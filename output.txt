
running 649 tests
test attribute::test::should_parse_attribute_ident ... ok
test attribute::test::should_parse_attribute_no_args ... ok
test argument::test::should_parse_variadic_argument ... ok
test argument::test::should_parse_optional_single_argument ... ok
test argument::test::should_parse_single_argument ... ok
test argument::test::should_parse_optional_single_argument_with_default ... ok
test attribute::test::should_parse_attribute_arg_list ... ok
test argument::test::should_not_parse_default_if_not_optional ... ok
test attribute::test::should_parse_float ... ok
test attribute::test::should_parse_extattr_list ... ok
test attribute::test::should_parse_ident_list ... ok
test attribute::test::should_parse_string ... ok
test attribute::test::should_parse_named_arg_list ... ok
test common::test::should_not_parse_comma_separated_values_empty ... ok
test common::test::should_parse_boxed ... ok
test common::test::should_parse_braced ... ok
test common::test::should_parse_bracketed ... ok
test common::test::should_parse_comma_separated_values ... ok
test common::test::should_parse_generics ... ok
test common::test::should_parse_hyphened_identifier ... ok
test common::test::should_parse_generics_two ... ok
test common::test::should_parse_identifier ... ok
test common::test::should_parse_identifier_attached_to_symbol ... ok
test common::test::should_parse_numbered_identifier ... ok
test common::test::should_parse_identifier_surrounding_with_spaces ... ok
test common::test::should_parse_identifier_preceding_others ... ok
test common::test::should_parse_optional_not_present ... ok
test common::test::should_parse_optional_present ... ok
test common::test::should_parse_underscored_identifier ... ok
test common::test::should_parse_parenthesized ... ok
test common::test::should_parse_vec ... ok
test dictionary::test::should_parse_dictionary_member ... ok
test dictionary::test::should_parse_required_dictionary_member ... ok
test interface::test::should_parse_constructor_interface_member ... ok
test interface::test::should_parse_double_typed_async_iterable ... ok
test interface::test::should_parse_double_typed_iterable ... ok
test interface::test::should_parse_double_typed_async_iterable_with_args ... ok
test interface::test::should_parse_maplike_interface_member ... ok
test interface::test::should_parse_setlike_interface_member ... ok
test interface::test::should_parse_single_typed_async_iterable ... ok
test interface::test::should_parse_stringifier_member ... ok
test interface::test::should_parse_single_typed_iterable ... ok
test interface::test::should_parse_single_typed_async_iterable_with_args ... ok
test lexer::tests::should_lex_tests_defs_argument_constructor_webidl ... ok
test lexer::tests::should_lex_tests_defs_attributes_webidl ... ok
test lexer::tests::should_lex_tests_defs_allowany_webidl ... ok
test lexer::tests::should_lex_tests_defs_async_name_webidl ... ok
test lexer::tests::should_lex_tests_defs_argument_extattrs_webidl ... ok
test lexer::tests::should_lex_tests_defs_comment_webidl ... ok
test lexer::tests::should_lex_tests_defs_callback_webidl ... ok
test lexer::tests::should_lex_tests_defs_default_webidl ... ok
test lexer::tests::should_lex_tests_defs_bigint_webidl ... ok
test lexer::tests::should_lex_tests_defs_async_iterable_webidl ... ok
test lexer::tests::should_lex_tests_defs_constructor_webidl ... ok
test lexer::tests::should_lex_tests_defs_buffersource_webidl ... ok
test lexer::tests::should_lex_tests_defs_documentation_dos_webidl ... ok
test lexer::tests::should_lex_tests_defs_documentation_webidl ... ok
test lexer::tests::should_lex_tests_defs_constants_webidl ... ok
test lexer::tests::should_lex_tests_defs_dictionary_inherits_webidl ... ok
test lexer::tests::should_lex_tests_defs_enum_webidl ... ok
test lexer::tests::should_lex_tests_defs_escaped_type_webidl ... ok
test lexer::tests::should_lex_tests_defs_exposed_asterisk_webidl ... ok
test lexer::tests::should_lex_tests_defs_equivalent_decl_webidl ... ok
test lexer::tests::should_lex_tests_defs_escaped_name_webidl ... ok
test lexer::tests::should_lex_tests_defs_dictionary_webidl ... ok
test lexer::tests::should_lex_tests_defs_extended_attributes_webidl ... ok
test lexer::tests::should_lex_tests_defs_identifier_hyphen_webidl ... ok
test lexer::tests::should_lex_tests_defs_getter_setter_webidl ... ok
test lexer::tests::should_lex_tests_defs_generic_webidl ... ok
test lexer::tests::should_lex_tests_defs_identifier_qualified_names_webidl ... ok
test lexer::tests::should_lex_tests_defs_interface_constructor_webidl ... ok
test lexer::tests::should_lex_tests_defs_inherits_getter_webidl ... ok
test lexer::tests::should_lex_tests_defs_interface_inherits_webidl ... ok
test lexer::tests::should_lex_tests_defs_indexed_properties_webidl ... ok
test lexer::tests::should_lex_tests_defs_includes_name_webidl ... ok
test lexer::tests::should_lex_tests_defs_iterable_webidl ... ok
test lexer::tests::should_lex_tests_defs_namedconstructor_webidl ... ok
test lexer::tests::should_lex_tests_defs_maplike_webidl ... ok
test lexer::tests::should_lex_tests_defs_mixin_webidl ... ok
test lexer::tests::should_lex_tests_defs_namespace_webidl ... ok
test lexer::tests::should_lex_tests_defs_nullable_webidl ... ok
test lexer::tests::should_lex_tests_defs_obsolete_keywords_webidl ... ok
test lexer::tests::should_lex_tests_defs_nointerfaceobject_webidl ... ok
test lexer::tests::should_lex_tests_defs_nullableobjects_webidl ... ok
test lexer::tests::should_lex_tests_defs_partial_interface_webidl ... ok
test lexer::tests::should_lex_tests_defs_operation_optional_arg_webidl ... ok
test lexer::tests::should_lex_tests_defs_overridebuiltins_webidl ... ok
test lexer::tests::should_lex_tests_defs_overloading_webidl ... ok
test lexer::tests::should_lex_tests_defs_prototyperoot_webidl ... ok
test lexer::tests::should_lex_tests_defs_putforwards_webidl ... ok
test lexer::tests::should_lex_tests_defs_promise_void_webidl ... ok
test lexer::tests::should_lex_tests_defs_primitives_webidl ... ok
test lexer::tests::should_lex_tests_defs_replaceable_webidl ... ok
test lexer::tests::should_lex_tests_defs_reg_operations_webidl ... ok
test lexer::tests::should_lex_tests_defs_reflector_interface_webidl ... ok
test lexer::tests::should_lex_tests_defs_record_webidl ... ok
test lexer::tests::should_lex_tests_defs_setlike_webidl ... ok
test lexer::tests::should_lex_tests_defs_stringifier_attribute_webidl ... ok
test lexer::tests::should_lex_tests_defs_sequence_webidl ... ok
test lexer::tests::should_lex_tests_defs_static_webidl ... ok
test lexer::tests::should_lex_tests_defs_stringifier_webidl ... ok
test lexer::tests::should_lex_tests_defs_treatasnull_webidl ... ok
test lexer::tests::should_lex_tests_defs_treatasundefined_webidl ... ok
test lexer::tests::should_lex_tests_defs_typedef_union_webidl ... ok
test lexer::tests::should_lex_tests_defs_typedef_webidl ... ok
test lexer::tests::should_lex_tests_defs_undefined_webidl ... ok
test lexer::tests::should_lex_tests_defs_variadic_operations_webidl ... ok
test lexer::tests::should_lex_tests_defs_typesuffixes_webidl ... ok
test literal::test::should_parse_bool_false ... ok
test lexer::tests::should_lex_tests_defs_uniontype_webidl ... ok
test lexer::tests::test ... ok
test literal::test::should_parse_bool_true ... ok
test literal::test::should_parse_empty_array ... ok
test literal::test::should_parse_float_exp ... ok
test literal::test::should_parse_float ... ok
test literal::test::should_parse_float_exp_with_decimal ... ok
test literal::test::should_parse_float_preceding_others ... ok
test literal::test::should_parse_hex_large_number ... ok
test literal::test::should_parse_float_surrounding_with_spaces ... ok
test literal::test::should_parse_hex_number ... ok
test literal::test::should_parse_integer ... ok
test literal::test::should_parse_integer_preceding_others ... ok
test literal::test::should_parse_infinity ... ok
test literal::test::should_parse_integer_surrounding_with_spaces ... ok
test literal::test::should_parse_neg_float ... ok
test literal::test::should_parse_neg_infinity ... ok
test literal::test::should_parse_neg_integer ... ok
test literal::test::should_parse_null ... ok
test literal::test::should_parse_oct_number ... ok
test literal::test::should_parse_string ... ok
test literal::test::should_parse_string_followed_by_string ... ok
test literal::test::should_parse_string_surround_with_spaces ... ok
test literal::test::should_parse_string_with_comment ... ok
test literal::test::should_parse_string_with_multiline_comment ... ok
test literal::test::should_parse_zero ... ok
test literal::test::should_parse_string_with_spaces ... ok
test members::test::should_parse_attribute_interface_member ... ok
test members::test::should_parse_attribute_mixin_member ... ok
test members::test::should_parse_attribute_namespace_member ... ok
test members::test::should_parse_modifier ... ok
test members::test::should_parse_const_member ... ok
test term::test::Any::should_parse ... ok
test members::test::should_parse_stringifier_or_inherit_or_static ... ok
test members::test::should_parse_regular_operation_member ... ok
test members::test::should_parse_operation_interface_member ... ok
test term::test::Any::should_parse_if_anything_next ... ok
test term::test::Any::should_parse_with_preceding_spaces ... ok
test term::test::Any::should_parse_with_succeeding_spaces ... ok
test term::test::Any::should_parse_with_surrounding_spaces ... ok
test term::test::ArrayBuffer::should_parse ... ok
test term::test::ArrayBuffer::should_parse_if_anything_next ... ok
test term::test::ArrayBuffer::should_parse_with_succeeding_spaces ... ok
test term::test::ArrayBuffer::should_parse_with_preceding_spaces ... ok
test term::test::ArrayBuffer::should_parse_with_surrounding_spaces ... ok
test term::test::Assign::should_parse ... ok
test term::test::Assign::should_parse_if_anything_next ... ok
test term::test::Assign::should_parse_with_preceding_spaces ... ok
test term::test::Assign::should_parse_with_succeeding_spaces ... ok
test term::test::Assign::should_parse_with_surrounding_spaces ... ok
test term::test::Async::should_parse_with_preceding_spaces ... ok
test term::test::Async::should_parse ... ok
test term::test::Async::should_parse_if_anything_next ... ok
test term::test::Async::should_parse_with_succeeding_spaces ... ok
test term::test::Async::should_parse_with_surrounding_spaces ... ok
test term::test::Attribute::should_parse ... ok
test term::test::Attribute::should_parse_if_anything_next ... ok
test term::test::Attribute::should_parse_with_preceding_spaces ... ok
test term::test::Attribute::should_parse_with_succeeding_spaces ... ok
test term::test::Attribute::should_parse_with_surrounding_spaces ... ok
test term::test::BigInt64Array::should_parse ... ok
test term::test::BigInt64Array::should_parse_if_anything_next ... ok
test term::test::BigInt64Array::should_parse_with_succeeding_spaces ... ok
test term::test::BigInt64Array::should_parse_with_preceding_spaces ... ok
test term::test::BigUint64Array::should_parse ... ok
test term::test::BigInt64Array::should_parse_with_surrounding_spaces ... ok
test term::test::BigUint64Array::should_parse_if_anything_next ... ok
test term::test::BigUint64Array::should_parse_with_succeeding_spaces ... ok
test term::test::BigUint64Array::should_parse_with_surrounding_spaces ... ok
test term::test::BigUint64Array::should_parse_with_preceding_spaces ... ok
test term::test::Bigint::should_parse ... ok
test term::test::Bigint::should_parse_with_preceding_spaces ... ok
test term::test::Bigint::should_parse_if_anything_next ... ok
test term::test::Bigint::should_parse_with_succeeding_spaces ... ok
test term::test::Bigint::should_parse_with_surrounding_spaces ... ok
test term::test::Boolean::should_parse ... ok
test term::test::Boolean::should_parse_if_anything_next ... ok
test term::test::Boolean::should_parse_with_preceding_spaces ... ok
test term::test::Boolean::should_parse_with_succeeding_spaces ... ok
test term::test::Boolean::should_parse_with_surrounding_spaces ... ok
test term::test::Byte::should_parse ... ok
test term::test::Byte::should_parse_with_preceding_spaces ... ok
test term::test::Byte::should_parse_if_anything_next ... ok
test term::test::Byte::should_parse_with_succeeding_spaces ... ok
test term::test::Byte::should_parse_with_surrounding_spaces ... ok
test term::test::ByteString::should_parse ... ok
test term::test::ByteString::should_parse_if_anything_next ... ok
test lexer::tests::should_lex_tests_defs_mediacapture_streams_webidl ... ok
test term::test::ByteString::should_parse_with_preceding_spaces ... ok
test term::test::ByteString::should_parse_with_succeeding_spaces ... ok
test term::test::ByteString::should_parse_with_surrounding_spaces ... ok
test term::test::Callback::should_parse ... ok
test term::test::Callback::should_parse_with_succeeding_spaces ... ok
test term::test::Callback::should_parse_with_preceding_spaces ... ok
test term::test::Callback::should_parse_if_anything_next ... ok
test term::test::Callback::should_parse_with_surrounding_spaces ... ok
test term::test::CloseBrace::should_parse ... ok
test term::test::CloseBrace::should_parse_with_succeeding_spaces ... ok
test term::test::CloseBrace::should_parse_with_surrounding_spaces ... ok
test term::test::CloseBrace::should_parse_with_preceding_spaces ... ok
test term::test::CloseBrace::should_parse_if_anything_next ... ok
test term::test::CloseBracket::should_parse ... ok
test term::test::CloseBracket::should_parse_if_anything_next ... ok
test term::test::CloseBracket::should_parse_with_preceding_spaces ... ok
test term::test::CloseBracket::should_parse_with_succeeding_spaces ... ok
test term::test::CloseBracket::should_parse_with_surrounding_spaces ... ok
test term::test::CloseParen::should_parse ... ok
test term::test::CloseParen::should_parse_if_anything_next ... ok
test term::test::CloseParen::should_parse_with_preceding_spaces ... ok
test term::test::CloseParen::should_parse_with_succeeding_spaces ... ok
test term::test::CloseParen::should_parse_with_surrounding_spaces ... ok
test term::test::Colon::should_parse ... ok
test term::test::Colon::should_parse_with_preceding_spaces ... ok
test term::test::Colon::should_parse_with_succeeding_spaces ... ok
test term::test::Colon::should_parse_if_anything_next ... ok
test term::test::Colon::should_parse_with_surrounding_spaces ... ok
test term::test::Comma::should_parse ... ok
test term::test::Comma::should_parse_if_anything_next ... ok
test term::test::Comma::should_parse_with_preceding_spaces ... ok
test term::test::Comma::should_parse_with_succeeding_spaces ... ok
test term::test::Comma::should_parse_with_surrounding_spaces ... ok
test term::test::Const::should_parse ... ok
test term::test::Const::should_parse_if_anything_next ... ok
test term::test::Const::should_parse_with_preceding_spaces ... ok
test term::test::Const::should_parse_with_succeeding_spaces ... ok
test term::test::Const::should_parse_with_surrounding_spaces ... ok
test term::test::Constructor::should_parse ... ok
test term::test::Constructor::should_parse_if_anything_next ... ok
test term::test::Constructor::should_parse_with_preceding_spaces ... ok
test term::test::Constructor::should_parse_with_succeeding_spaces ... ok
test term::test::Constructor::should_parse_with_surrounding_spaces ... ok
test term::test::DOMString::should_parse ... ok
test lexer::tests::should_lex_tests_defs_streams_webidl ... ok
test term::test::DOMString::should_parse_if_anything_next ... ok
test term::test::DOMString::should_parse_with_preceding_spaces ... ok
test term::test::DOMString::should_parse_with_succeeding_spaces ... ok
test term::test::DOMString::should_parse_with_surrounding_spaces ... ok
test term::test::DataView::should_parse ... ok
test term::test::DataView::should_parse_if_anything_next ... ok
test term::test::DataView::should_parse_with_preceding_spaces ... ok
test term::test::DataView::should_parse_with_succeeding_spaces ... ok
test term::test::DataView::should_parse_with_surrounding_spaces ... ok
test term::test::Deleter::should_parse ... ok
test term::test::Deleter::should_parse_with_preceding_spaces ... ok
test term::test::Deleter::should_parse_if_anything_next ... ok
test term::test::Deleter::should_parse_with_succeeding_spaces ... ok
test term::test::Deleter::should_parse_with_surrounding_spaces ... ok
test term::test::Dictionary::should_parse ... ok
test term::test::Dictionary::should_parse_if_anything_next ... ok
test term::test::Dictionary::should_parse_with_preceding_spaces ... ok
test term::test::Dictionary::should_parse_with_succeeding_spaces ... ok
test term::test::Dictionary::should_parse_with_surrounding_spaces ... ok
test term::test::Dot::should_parse ... ok
test term::test::Dot::should_parse_if_anything_next ... ok
test term::test::Dot::should_parse_with_preceding_spaces ... ok
test term::test::Dot::should_parse_with_succeeding_spaces ... ok
test term::test::Dot::should_parse_with_surrounding_spaces ... ok
test term::test::Double::should_parse ... ok
test term::test::Double::should_parse_if_anything_next ... ok
test term::test::Double::should_parse_with_preceding_spaces ... ok
test term::test::Double::should_parse_with_succeeding_spaces ... ok
test term::test::Double::should_parse_with_surrounding_spaces ... ok
test term::test::Ellipsis::should_parse ... ok
test term::test::Ellipsis::should_parse_if_anything_next ... ok
test term::test::Ellipsis::should_parse_with_preceding_spaces ... ok
test term::test::Ellipsis::should_parse_with_succeeding_spaces ... ok
test term::test::Ellipsis::should_parse_with_surrounding_spaces ... ok
test term::test::Enum::should_parse ... ok
test term::test::Enum::should_parse_with_preceding_spaces ... ok
test term::test::Enum::should_parse_if_anything_next ... ok
test term::test::Enum::should_parse_with_succeeding_spaces ... ok
test term::test::Enum::should_parse_with_surrounding_spaces ... ok
test term::test::False::should_parse ... ok
test term::test::False::should_parse_if_anything_next ... ok
test term::test::False::should_parse_with_preceding_spaces ... ok
test term::test::False::should_parse_with_succeeding_spaces ... ok
test term::test::False::should_parse_with_surrounding_spaces ... ok
test term::test::Float32Array::should_parse ... ok
test term::test::Float32Array::should_parse_if_anything_next ... ok
test term::test::Float32Array::should_parse_with_preceding_spaces ... ok
test term::test::Float32Array::should_parse_with_succeeding_spaces ... ok
test term::test::Float32Array::should_parse_with_surrounding_spaces ... ok
test term::test::Float64Array::should_parse ... ok
test term::test::Float64Array::should_parse_with_preceding_spaces ... ok
test term::test::Float64Array::should_parse_with_succeeding_spaces ... ok
test term::test::Float64Array::should_parse_if_anything_next ... ok
test term::test::Float::should_parse ... ok
test term::test::Float64Array::should_parse_with_surrounding_spaces ... ok
test term::test::Float::should_parse_if_anything_next ... ok
test term::test::Float::should_parse_with_preceding_spaces ... ok
test term::test::Float::should_parse_with_succeeding_spaces ... ok
test term::test::Float::should_parse_with_surrounding_spaces ... ok
test term::test::FrozenArray::should_parse ... ok
test term::test::FrozenArray::should_parse_if_anything_next ... ok
test term::test::FrozenArray::should_parse_with_preceding_spaces ... ok
test term::test::FrozenArray::should_parse_with_succeeding_spaces ... ok
test term::test::FrozenArray::should_parse_with_surrounding_spaces ... ok
test term::test::Getter::should_parse ... ok
test term::test::Getter::should_parse_if_anything_next ... ok
test term::test::Getter::should_parse_with_preceding_spaces ... ok
test term::test::Getter::should_parse_with_succeeding_spaces ... ok
test term::test::Getter::should_parse_with_surrounding_spaces ... ok
test term::test::GreaterThan::should_parse ... ok
test term::test::GreaterThan::should_parse_if_anything_next ... ok
test term::test::GreaterThan::should_parse_with_preceding_spaces ... ok
test term::test::GreaterThan::should_parse_with_succeeding_spaces ... ok
test term::test::GreaterThan::should_parse_with_surrounding_spaces ... ok
test term::test::Includes::should_parse ... ok
test term::test::Includes::should_parse_if_anything_next ... ok
test term::test::Includes::should_parse_with_preceding_spaces ... ok
test term::test::Includes::should_parse_with_succeeding_spaces ... ok
test term::test::Includes::should_parse_with_surrounding_spaces ... ok
test term::test::Infinity::should_parse ... ok
test term::test::Infinity::should_parse_if_anything_next ... ok
test term::test::Infinity::should_parse_with_preceding_spaces ... ok
test term::test::Infinity::should_parse_with_succeeding_spaces ... ok
test term::test::Infinity::should_parse_with_surrounding_spaces ... ok
test term::test::Inherit::should_parse ... ok
test term::test::Inherit::should_parse_if_anything_next ... ok
test term::test::Inherit::should_parse_with_preceding_spaces ... ok
test term::test::Inherit::should_parse_with_succeeding_spaces ... ok
test term::test::Int16Array::should_parse ... ok
test term::test::Inherit::should_parse_with_surrounding_spaces ... ok
test term::test::Int16Array::should_parse_if_anything_next ... ok
test term::test::Int16Array::should_parse_with_preceding_spaces ... ok
test term::test::Int16Array::should_parse_with_succeeding_spaces ... ok
test term::test::Int16Array::should_parse_with_surrounding_spaces ... ok
test term::test::Int32Array::should_parse ... ok
test term::test::Int32Array::should_parse_if_anything_next ... ok
test term::test::Int32Array::should_parse_with_preceding_spaces ... ok
test term::test::Int32Array::should_parse_with_succeeding_spaces ... ok
test term::test::Int32Array::should_parse_with_surrounding_spaces ... ok
test term::test::Int8Array::should_parse ... ok
test term::test::Int8Array::should_parse_if_anything_next ... ok
test term::test::Int8Array::should_parse_with_preceding_spaces ... ok
test term::test::Int8Array::should_parse_with_succeeding_spaces ... ok
test term::test::Int8Array::should_parse_with_surrounding_spaces ... ok
test term::test::Interface::should_parse ... ok
test term::test::Interface::should_parse_if_anything_next ... ok
test term::test::Interface::should_parse_with_preceding_spaces ... ok
test term::test::Interface::should_parse_with_succeeding_spaces ... ok
test term::test::Interface::should_parse_with_surrounding_spaces ... ok
test term::test::Iterable::should_parse ... ok
test term::test::Iterable::should_parse_if_anything_next ... ok
test term::test::Iterable::should_parse_with_preceding_spaces ... ok
test term::test::Iterable::should_parse_with_surrounding_spaces ... ok
test term::test::Iterable::should_parse_with_succeeding_spaces ... ok
test term::test::LessThan::should_parse ... ok
test term::test::LessThan::should_parse_if_anything_next ... ok
test term::test::LessThan::should_parse_with_preceding_spaces ... ok
test term::test::LessThan::should_parse_with_succeeding_spaces ... ok
test term::test::LessThan::should_parse_with_surrounding_spaces ... ok
test term::test::Long::should_parse ... ok
test term::test::Long::should_parse_if_anything_next ... ok
test term::test::Long::should_parse_with_preceding_spaces ... ok
test term::test::Long::should_parse_with_succeeding_spaces ... ok
test term::test::Long::should_parse_with_surrounding_spaces ... ok
test term::test::Maplike::should_parse ... ok
test term::test::Maplike::should_parse_if_anything_next ... ok
test term::test::Maplike::should_parse_with_preceding_spaces ... ok
test term::test::Maplike::should_parse_with_succeeding_spaces ... ok
test term::test::Maplike::should_parse_with_surrounding_spaces ... ok
test term::test::Minus::should_parse ... ok
test term::test::Minus::should_parse_if_anything_next ... ok
test term::test::Minus::should_parse_with_preceding_spaces ... ok
test term::test::Minus::should_parse_with_succeeding_spaces ... ok
test term::test::Minus::should_parse_with_surrounding_spaces ... ok
test term::test::Mixin::should_parse ... ok
test term::test::Mixin::should_parse_if_anything_next ... ok
test term::test::Mixin::should_parse_with_preceding_spaces ... ok
test term::test::Mixin::should_parse_with_succeeding_spaces ... ok
test term::test::Mixin::should_parse_with_surrounding_spaces ... ok
test term::test::NaN::should_parse ... ok
test term::test::NaN::should_parse_if_anything_next ... ok
test term::test::NaN::should_parse_with_preceding_spaces ... ok
test term::test::NaN::should_parse_with_succeeding_spaces ... ok
test term::test::NaN::should_parse_with_surrounding_spaces ... ok
test term::test::Namespace::should_parse ... ok
test term::test::Namespace::should_parse_if_anything_next ... ok
test term::test::Namespace::should_parse_with_preceding_spaces ... ok
test term::test::Namespace::should_parse_with_succeeding_spaces ... ok
test term::test::Namespace::should_parse_with_surrounding_spaces ... ok
test term::test::NegInfinity::should_parse ... ok
test term::test::NegInfinity::should_parse_if_anything_next ... ok
test term::test::NegInfinity::should_parse_with_preceding_spaces ... ok
test term::test::NegInfinity::should_parse_with_succeeding_spaces ... ok
test term::test::NegInfinity::should_parse_with_surrounding_spaces ... ok
test term::test::Null::should_parse ... ok
test term::test::Null::should_parse_if_anything_next ... ok
test term::test::Null::should_parse_with_preceding_spaces ... ok
test term::test::Null::should_parse_with_succeeding_spaces ... ok
test term::test::Null::should_parse_with_surrounding_spaces ... ok
test term::test::Object::should_parse ... ok
test term::test::Object::should_parse_if_anything_next ... ok
test term::test::Object::should_parse_with_preceding_spaces ... ok
test term::test::Object::should_parse_with_succeeding_spaces ... ok
test term::test::Object::should_parse_with_surrounding_spaces ... ok
test term::test::ObservableArray::should_parse ... ok
test term::test::ObservableArray::should_parse_if_anything_next ... ok
test term::test::ObservableArray::should_parse_with_preceding_spaces ... ok
test term::test::ObservableArray::should_parse_with_succeeding_spaces ... ok
test term::test::ObservableArray::should_parse_with_surrounding_spaces ... ok
test term::test::Octet::should_parse ... ok
test term::test::Octet::should_parse_if_anything_next ... ok
test term::test::Octet::should_parse_with_preceding_spaces ... ok
test term::test::Octet::should_parse_with_succeeding_spaces ... ok
test term::test::Octet::should_parse_with_surrounding_spaces ... ok
test term::test::OpenBrace::should_parse ... ok
test term::test::OpenBrace::should_parse_if_anything_next ... ok
test term::test::OpenBrace::should_parse_with_preceding_spaces ... ok
test term::test::OpenBrace::should_parse_with_succeeding_spaces ... ok
test term::test::OpenBrace::should_parse_with_surrounding_spaces ... ok
test term::test::OpenBracket::should_parse ... ok
test term::test::OpenBracket::should_parse_if_anything_next ... ok
test term::test::OpenBracket::should_parse_with_preceding_spaces ... ok
test term::test::OpenBracket::should_parse_with_succeeding_spaces ... ok
test term::test::OpenBracket::should_parse_with_surrounding_spaces ... ok
test term::test::OpenParen::should_parse ... ok
test term::test::OpenParen::should_parse_if_anything_next ... ok
test term::test::OpenParen::should_parse_with_preceding_spaces ... ok
test term::test::OpenParen::should_parse_with_succeeding_spaces ... ok
test term::test::OpenParen::should_parse_with_surrounding_spaces ... ok
test term::test::Optional::should_parse ... ok
test term::test::Optional::should_parse_if_anything_next ... ok
test term::test::Optional::should_parse_with_preceding_spaces ... ok
test term::test::Optional::should_parse_with_succeeding_spaces ... ok
test term::test::Optional::should_parse_with_surrounding_spaces ... ok
test term::test::Or::should_parse ... ok
test term::test::Or::should_parse_if_anything_next ... ok
test term::test::Or::should_parse_with_preceding_spaces ... ok
test term::test::Or::should_parse_with_succeeding_spaces ... ok
test term::test::Or::should_parse_with_surrounding_spaces ... ok
test term::test::Partial::should_parse ... ok
test term::test::Partial::should_parse_if_anything_next ... ok
test term::test::Partial::should_parse_with_preceding_spaces ... ok
test term::test::Partial::should_parse_with_succeeding_spaces ... ok
test term::test::Partial::should_parse_with_surrounding_spaces ... ok
test lexer::tests::should_lex_tests_defs_dom_webidl ... ok
test term::test::Promise::should_parse ... ok
test term::test::Promise::should_parse_if_anything_next ... ok
test term::test::Promise::should_parse_with_preceding_spaces ... ok
test term::test::Promise::should_parse_with_succeeding_spaces ... ok
test term::test::Promise::should_parse_with_surrounding_spaces ... ok
test term::test::QMark::should_parse ... ok
test term::test::QMark::should_parse_if_anything_next ... ok
test term::test::QMark::should_parse_with_preceding_spaces ... ok
test term::test::QMark::should_parse_with_succeeding_spaces ... ok
test term::test::QMark::should_parse_with_surrounding_spaces ... ok
test term::test::ReadOnly::should_parse ... ok
test term::test::ReadOnly::should_parse_if_anything_next ... ok
test term::test::ReadOnly::should_parse_with_preceding_spaces ... ok
test term::test::ReadOnly::should_parse_with_succeeding_spaces ... ok
test term::test::ReadOnly::should_parse_with_surrounding_spaces ... ok
test term::test::Record::should_parse ... ok
test term::test::Record::should_parse_if_anything_next ... ok
test term::test::Record::should_parse_with_preceding_spaces ... ok
test term::test::Record::should_parse_with_succeeding_spaces ... ok
test term::test::Record::should_parse_with_surrounding_spaces ... ok
test term::test::Required::should_parse ... ok
test term::test::Required::should_parse_if_anything_next ... ok
test term::test::Required::should_parse_with_preceding_spaces ... ok
test term::test::Required::should_parse_with_succeeding_spaces ... ok
test term::test::Required::should_parse_with_surrounding_spaces ... ok
test term::test::SemiColon::should_parse ... ok
test term::test::SemiColon::should_parse_if_anything_next ... ok
test term::test::SemiColon::should_parse_with_preceding_spaces ... ok
test term::test::SemiColon::should_parse_with_succeeding_spaces ... ok
test term::test::SemiColon::should_parse_with_surrounding_spaces ... ok
test term::test::Sequence::should_parse ... ok
test term::test::Sequence::should_parse_if_anything_next ... ok
test term::test::Sequence::should_parse_with_preceding_spaces ... ok
test term::test::Sequence::should_parse_with_succeeding_spaces ... ok
test term::test::Sequence::should_parse_with_surrounding_spaces ... ok
test term::test::Setlike::should_parse ... ok
test term::test::Setlike::should_parse_if_anything_next ... ok
test term::test::Setlike::should_parse_with_preceding_spaces ... ok
test term::test::Setlike::should_parse_with_succeeding_spaces ... ok
test term::test::Setlike::should_parse_with_surrounding_spaces ... ok
test term::test::Setter::should_parse ... ok
test term::test::Setter::should_parse_if_anything_next ... ok
test term::test::Setter::should_parse_with_preceding_spaces ... ok
test term::test::Setter::should_parse_with_succeeding_spaces ... ok
test term::test::Setter::should_parse_with_surrounding_spaces ... ok
test term::test::Short::should_parse ... ok
test term::test::Short::should_parse_if_anything_next ... ok
test term::test::Short::should_parse_with_preceding_spaces ... ok
test term::test::Short::should_parse_with_succeeding_spaces ... ok
test term::test::Short::should_parse_with_surrounding_spaces ... ok
test term::test::Static::should_parse ... ok
test term::test::Static::should_parse_if_anything_next ... ok
test term::test::Static::should_parse_with_preceding_spaces ... ok
test term::test::Static::should_parse_with_succeeding_spaces ... ok
test term::test::Static::should_parse_with_surrounding_spaces ... ok
test term::test::Stringifier::should_parse ... ok
test term::test::Stringifier::should_parse_if_anything_next ... ok
test term::test::Stringifier::should_parse_with_preceding_spaces ... ok
test term::test::Stringifier::should_parse_with_succeeding_spaces ... ok
test term::test::Stringifier::should_parse_with_surrounding_spaces ... ok
test term::test::Symbol::should_parse ... ok
test term::test::Symbol::should_parse_if_anything_next ... ok
test term::test::Symbol::should_parse_with_preceding_spaces ... ok
test term::test::Symbol::should_parse_with_succeeding_spaces ... ok
test term::test::Symbol::should_parse_with_surrounding_spaces ... ok
test term::test::True::should_parse ... ok
test term::test::True::should_parse_if_anything_next ... ok
test term::test::True::should_parse_with_preceding_spaces ... ok
test term::test::True::should_parse_with_succeeding_spaces ... ok
test term::test::True::should_parse_with_surrounding_spaces ... ok
test term::test::Typedef::should_parse ... ok
test term::test::Typedef::should_parse_if_anything_next ... ok
test term::test::Typedef::should_parse_with_preceding_spaces ... ok
test term::test::Typedef::should_parse_with_succeeding_spaces ... ok
test term::test::Typedef::should_parse_with_surrounding_spaces ... ok
test term::test::USVString::should_parse ... ok
test term::test::USVString::should_parse_if_anything_next ... ok
test term::test::USVString::should_parse_with_preceding_spaces ... ok
test term::test::USVString::should_parse_with_succeeding_spaces ... ok
test term::test::USVString::should_parse_with_surrounding_spaces ... ok
test term::test::Uint16Array::should_parse ... ok
test term::test::Uint16Array::should_parse_if_anything_next ... ok
test term::test::Uint16Array::should_parse_with_preceding_spaces ... ok
test term::test::Uint16Array::should_parse_with_succeeding_spaces ... ok
test term::test::Uint16Array::should_parse_with_surrounding_spaces ... ok
test term::test::Uint32Array::should_parse ... ok
test term::test::Uint32Array::should_parse_if_anything_next ... ok
test term::test::Uint32Array::should_parse_with_preceding_spaces ... ok
test term::test::Uint32Array::should_parse_with_succeeding_spaces ... ok
test term::test::Uint32Array::should_parse_with_surrounding_spaces ... ok
test term::test::Uint8Array::should_parse ... ok
test term::test::Uint8Array::should_parse_if_anything_next ... ok
test term::test::Uint8Array::should_parse_with_preceding_spaces ... ok
test term::test::Uint8Array::should_parse_with_succeeding_spaces ... ok
test term::test::Uint8Array::should_parse_with_surrounding_spaces ... ok
test term::test::Uint8ClampedArray::should_parse ... ok
test term::test::Uint8ClampedArray::should_parse_if_anything_next ... ok
test term::test::Uint8ClampedArray::should_parse_with_preceding_spaces ... ok
test term::test::Uint8ClampedArray::should_parse_with_succeeding_spaces ... ok
test term::test::Undefined::should_parse ... ok
test term::test::Undefined::should_parse_if_anything_next ... ok
test term::test::Undefined::should_parse_with_preceding_spaces ... ok
test term::test::Uint8ClampedArray::should_parse_with_surrounding_spaces ... ok
test term::test::Undefined::should_parse_with_succeeding_spaces ... ok
test term::test::Undefined::should_parse_with_surrounding_spaces ... ok
test term::test::Unrestricted::should_parse ... ok
test term::test::Unrestricted::should_parse_if_anything_next ... ok
test term::test::Unrestricted::should_parse_with_preceding_spaces ... ok
test term::test::Unrestricted::should_parse_with_succeeding_spaces ... ok
test term::test::Unrestricted::should_parse_with_surrounding_spaces ... ok
test term::test::Unsigned::should_parse ... ok
test term::test::Unsigned::should_parse_if_anything_next ... ok
test term::test::Unsigned::should_parse_with_preceding_spaces ... ok
test term::test::Unsigned::should_parse_with_succeeding_spaces ... ok
test term::test::Unsigned::should_parse_with_surrounding_spaces ... ok
test term::test::Wildcard::should_parse ... ok
test term::test::Wildcard::should_parse_if_anything_next ... ok
test term::test::Wildcard::should_parse_with_preceding_spaces ... ok
test term::test::Wildcard::should_parse_with_succeeding_spaces ... ok
test term::test::Wildcard::should_parse_with_surrounding_spaces ... ok
test test::should_not_parse_callback_interface_inheritance ... ok
test test::should_parse_callback ... ok
test test::should_parse_dictionary ... ok
test test::should_parse_enum ... ok
test test::should_parse_includes_statement ... ok
test test::should_parse_dictionary_inherited ... ok
test test::should_parse_callback_interface ... ok
test test::should_parse_interface_mixin ... ok
test test::should_parse_interface ... ok
test test::should_parse_partial_interface ... ok
test test::should_parse_partial_dictionary ... ok
test test::should_parse_partial_interface_mixin ... ok
test test::should_parse_namespace ... ok
test test::should_parse_typedef ... ok
test test::should_parse_with_block_comments ... ok
test test::should_parse_with_line_comments ... ok
test test::should_parse_with_multiple_comments ... ok
test types::test::ConstType::Bigint::should_parse ... ok
test types::test::ConstType::Boolean::should_parse ... ok
test types::test::ConstType::Byte::should_parse ... ok
test types::test::ConstType::FloatingPoint::should_parse ... ok
test test::should_parse_partial_namespace ... ok
test types::test::ConstType::Identifier::should_parse ... ok
test types::test::ConstType::Integer::should_parse ... ok
test types::test::ConstType::Octet::should_parse ... ok
test types::test::DistinguishableType::ArrayBuffer::should_parse ... ok
test types::test::DistinguishableType::Boolean::should_parse ... ok
test types::test::DistinguishableType::Byte::should_parse ... ok
test types::test::DistinguishableType::ByteString::should_parse ... ok
test types::test::DistinguishableType::DOMString::should_parse ... ok
test types::test::DistinguishableType::DataView::should_parse ... ok
test types::test::DistinguishableType::Float32Array::should_parse ... ok
test types::test::DistinguishableType::Float64Array::should_parse ... ok
test types::test::DistinguishableType::FloatingPoint::should_parse ... ok
test types::test::DistinguishableType::Identifier::should_parse ... ok
test types::test::DistinguishableType::FrozenArrayType::should_parse ... ok
test types::test::DistinguishableType::Int16Array::should_parse ... ok
test types::test::DistinguishableType::Int32Array::should_parse ... ok
test types::test::DistinguishableType::Int8Array::should_parse ... ok
test types::test::DistinguishableType::Integer::should_parse ... ok
test types::test::DistinguishableType::Object::should_parse ... ok
test types::test::DistinguishableType::Octet::should_parse ... ok
test types::test::DistinguishableType::RecordType::should_parse ... ok
test types::test::DistinguishableType::Sequence::should_parse ... ok
test types::test::DistinguishableType::Symbol::should_parse ... ok
test types::test::DistinguishableType::USVString::should_parse ... ok
test types::test::DistinguishableType::Uint16Array::should_parse ... ok
test types::test::DistinguishableType::Uint32Array::should_parse ... ok
test types::test::DistinguishableType::Uint8Array::should_parse ... ok
test types::test::DistinguishableType::Uint8ClampedArray::should_parse ... ok
test types::test::DistinguishableType::Undefined::should_parse ... ok
test types::test::FloatingPointType::Double::should_parse ... ok
test types::test::FloatingPointType::Float::should_parse ... ok
test types::test::IntegerType::Long::should_parse ... ok
test types::test::IntegerType::LongLong::should_parse ... ok
test types::test::IntegerType::Short::should_parse ... ok
test types::test::RecordKeyType::Byte::should_parse ... ok
test types::test::RecordKeyType::DOM::should_parse ... ok
test types::test::RecordKeyType::USV::should_parse ... ok
test types::test::SingleType::Any::should_parse ... ok
test types::test::Type::Single::should_parse ... ok
test types::test::SingleType::Promise::should_parse ... ok
test types::test::SingleType::Distinguishable::should_parse ... ok
test types::test::UnionMemberType::Single::should_parse ... ok
test types::test::Type::Union::should_parse ... ok
test types::test::should_not_parse_record_type_alt_types ... ok
test types::test::UnionMemberType::Union::should_parse ... ok
test types::test::should_parse_attributed_type ... ok
test types::test::should_parse_double_type ... ok
test types::test::should_parse_float_type ... ok
test types::test::should_parse_frozen_array_type ... ok
test types::test::should_parse_long_long_type ... ok
test types::test::should_parse_long_type ... ok
test types::test::should_parse_may_be_null ... ok
test types::test::should_parse_nullable ... ok
test types::test::should_parse_promise_type ... ok
test types::test::should_parse_record_type ... ok
test types::test::should_parse_sequence_type ... ok
test types::test::should_parse_short_type ... ok
test types::test::should_parse_type_as_identifier ... ok
test types::test::should_parse_union_member_type_attributed_union ... ok
test lexer::tests::should_lex_tests_defs_html_webidl ... ok

test result: ok. 649 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.18s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 226 tests
test should_not_parse_tests_invalids_bigint64array_keyword_webidl ... ok
test should_not_parse_tests_invalids_any_keyword_webidl ... ok
test should_not_parse_tests_invalids_bigint_keyword_webidl ... ok
test should_not_parse_tests_invalids_array_webidl ... ok
test should_not_parse_tests_invalids_async_maplike_webidl ... ok
test should_not_parse_tests_invalids_async_iterable_readonly_webidl ... ok
test should_not_parse_tests_invalids_async_iterable_unterminated_args_webidl ... ok
test should_not_parse_tests_invalids_callback_noassign_webidl ... ok
test should_not_parse_tests_invalids_callback_attribute_webidl ... ok
test should_not_parse_tests_invalids_callback_noparen_webidl ... ok
test should_not_parse_tests_invalids_callback_noreturn_webidl ... ok
test should_not_parse_tests_invalids_callback_semicolon_webidl ... ok
test should_not_parse_tests_invalids_const_no_value_webidl ... ok
test should_not_parse_tests_invalids_caller_webidl ... ok
test should_not_parse_tests_invalids_const_null_webidl ... ok
test should_not_parse_tests_invalids_const_nullable_webidl ... ok
test should_not_parse_tests_invalids_dict_field_unterminated_webidl ... ok
test should_not_parse_tests_invalids_dict_no_default_webidl ... ok
test should_not_parse_tests_invalids_dict_required_default_webidl ... ok
test should_not_parse_tests_invalids_enum_bodyless_webidl ... ok
test should_not_parse_tests_invalids_enum_wo_comma_webidl ... ok
test should_not_parse_tests_invalids_enum_webidl ... ok
test should_not_parse_tests_invalids_enum_empty_webidl ... ok
test should_not_parse_tests_invalids_exception_webidl ... ok
test should_not_parse_tests_invalids_extattr_double_webidl ... ok
test should_not_parse_tests_invalids_extattr_empty_webidl ... ok
test should_not_parse_tests_invalids_extattr_no_rhs_webidl ... ok
test should_not_parse_tests_invalids_extattr_invalid_rhs_webidl ... ok
test should_not_parse_tests_invalids_extattr_empty_ids_webidl ... ok
test should_not_parse_tests_invalids_extattr_double_field_webidl ... ok
test should_not_parse_tests_invalids_id_underscored_number_webidl ... ok
test should_not_parse_tests_invalids_implements_and_includes_ws_webidl ... ok
test should_not_parse_tests_invalids_float_webidl ... ok
test should_not_parse_tests_invalids_frozenarray_empty_webidl ... ok
test should_not_parse_tests_invalids_inherit_readonly_webidl ... ok
test should_not_parse_tests_invalids_inheritance_typeless_webidl ... ok
test should_not_parse_tests_invalids_int32array_keyword_webidl ... ok
test should_not_parse_tests_invalids_iterable_args_webidl ... ok
test should_not_parse_tests_invalids_iterable_empty_webidl ... ok
test should_not_parse_tests_invalids_iterable_notype_webidl ... ok
test should_not_parse_tests_invalids_maplike_1type_webidl ... ok
test should_not_parse_tests_invalids_implements_webidl ... ok
test should_not_parse_tests_invalids_legacyiterable_webidl ... ok
test should_not_parse_tests_invalids_maplike_args_webidl ... ok
test should_not_parse_tests_invalids_iterator_webidl ... ok
test should_not_parse_tests_invalids_no_semicolon_callback_webidl ... ok
test should_not_parse_tests_invalids_namespace_readwrite_webidl ... ok
test should_not_parse_tests_invalids_no_semicolon_operation_webidl ... ok
test should_not_parse_tests_invalids_no_semicolon_webidl ... ok
test should_not_parse_tests_invalids_nonempty_dict_webidl ... ok
test should_not_parse_tests_invalids_module_webidl ... ok
test should_not_parse_tests_invalids_nonempty_sequence_webidl ... ok
test should_not_parse_tests_invalids_promise_empty_webidl ... ok
test should_not_parse_tests_invalids_nonnullableobjects_webidl ... ok
test should_not_parse_tests_invalids_nonnullableany_webidl ... ok
test should_not_parse_tests_invalids_operation_too_special_webidl ... ok
test should_not_parse_tests_invalids_promise_nullable_webidl ... ok
test should_not_parse_tests_invalids_readonly_iterable_webidl ... ok
test should_not_parse_tests_invalids_promise_with_extended_attribute_webidl ... ok
test should_not_parse_tests_invalids_raises_webidl ... ok
test should_not_parse_tests_invalids_record_single_webidl ... ok
test should_not_parse_tests_invalids_record_key_webidl ... ok
test should_not_parse_tests_invalids_scopedname_webidl ... ok
test should_not_parse_tests_invalids_record_key_with_extended_attribute_webidl ... ok
test should_not_parse_tests_invalids_sequence_empty_webidl ... ok
test should_not_parse_tests_invalids_setlike_2types_webidl ... ok
test should_not_parse_tests_invalids_spaced_negative_infinity_webidl ... ok
test should_not_parse_tests_invalids_setter_creator_webidl ... ok
test should_not_parse_tests_invalids_spaced_variadic_webidl ... ok
test should_not_parse_tests_invalids_setlike_args_webidl ... ok
test should_not_parse_tests_invalids_stray_slash_webidl ... ok
test should_not_parse_tests_invalids_stringconstants_webidl ... ok
test should_not_parse_tests_invalids_stringifier_custom_webidl ... ok
test should_not_parse_tests_invalids_union_one_webidl ... ok
test should_not_parse_tests_invalids_special_omittable_webidl ... ok
test should_not_parse_tests_invalids_union_any_webidl ... ok
test should_not_parse_tests_invalids_union_dangling_or_webidl ... ok
test should_not_parse_tests_invalids_union_zero_webidl ... ok
test should_not_parse_tests_invalids_union_promise_webidl ... ok
test should_not_parse_tests_invalids_unknown_generic_webidl ... ok
test should_not_parse_tests_invalids_typedef_nested_webidl ... ok
test should_parse_tests_defs_argument_extattrs_webidl ... ok
test should_parse_tests_defs_allowany_webidl ... ok
test should_parse_tests_defs_argument_constructor_webidl ... ok
test should_parse_tests_defs_attributes_webidl ... ok
test should_parse_tests_defs_async_iterable_webidl ... ok
test should_parse_tests_defs_bigint_webidl ... ok
test should_parse_tests_defs_async_name_webidl ... ok
test should_parse_tests_defs_callback_webidl ... ok
test should_parse_tests_defs_comment_webidl ... ok
test should_parse_tests_defs_constants_webidl ... ok
test should_parse_tests_defs_buffersource_webidl ... ok
test should_parse_tests_defs_constructor_webidl ... ok
test should_parse_tests_defs_default_webidl ... ok
test should_parse_tests_defs_dictionary_inherits_webidl ... ok
test should_parse_tests_defs_documentation_dos_webidl ... ok
test should_parse_tests_defs_documentation_webidl ... ok
test should_parse_tests_defs_dictionary_webidl ... ok
test should_parse_tests_defs_enum_webidl ... ok
test should_parse_tests_defs_escaped_name_webidl ... ok
test should_parse_tests_defs_equivalent_decl_webidl ... ok
test should_parse_tests_defs_escaped_type_webidl ... ok
test should_parse_tests_defs_exposed_asterisk_webidl ... ok
test should_parse_mediacapture_streams_webidl ... ok
test should_parse_tests_defs_generic_webidl ... ok
test should_parse_streams_webidl ... ok
test should_parse_tests_defs_extended_attributes_webidl ... ok
test should_parse_tests_defs_getter_setter_webidl ... ok
test should_parse_tests_defs_identifier_qualified_names_webidl ... ok
test should_parse_tests_defs_identifier_hyphen_webidl ... ok
test should_parse_tests_defs_includes_name_webidl ... ok
test should_parse_tests_defs_interface_constructor_webidl ... ok
test should_parse_tests_defs_inherits_getter_webidl ... ok
test should_parse_tests_defs_indexed_properties_webidl ... ok
test should_parse_tests_defs_interface_inherits_webidl ... ok
test should_parse_tests_defs_maplike_webidl ... ok
test interface_constructor ... FAILED
test should_parse_tests_defs_iterable_webidl ... ok
test should_parse_tests_defs_namedconstructor_webidl ... ok
test should_parse_tests_defs_nointerfaceobject_webidl ... ok
test should_parse_tests_defs_mixin_webidl ... ok
test should_parse_tests_defs_namespace_webidl ... ok
test should_parse_tests_defs_nullable_webidl ... ok
test should_parse_tests_defs_obsolete_keywords_webidl ... ok
test should_parse_tests_defs_nullableobjects_webidl ... ok
test should_parse_tests_defs_overridebuiltins_webidl ... ok
test should_parse_tests_defs_operation_optional_arg_webidl ... ok
test should_parse_tests_defs_primitives_webidl ... ok
test should_parse_tests_defs_overloading_webidl ... ok
test should_parse_tests_defs_partial_interface_webidl ... ok
test should_parse_tests_defs_prototyperoot_webidl ... ok
test should_parse_tests_defs_promise_void_webidl ... ok
test should_parse_tests_defs_putforwards_webidl ... ok
test should_parse_tests_defs_reflector_interface_webidl ... ok
test should_parse_tests_defs_record_webidl ... ok
test should_parse_tests_defs_reg_operations_webidl ... ok
test should_parse_tests_defs_setlike_webidl ... ok
test should_parse_tests_defs_sequence_webidl ... ok
test should_parse_tests_defs_replaceable_webidl ... ok
test should_parse_tests_defs_mediacapture_streams_webidl ... ok
test should_parse_tests_defs_static_webidl ... ok
test should_parse_tests_defs_stringifier_webidl ... ok
test should_parse_tests_defs_stringifier_attribute_webidl ... ok
test should_parse_tests_defs_treatasundefined_webidl ... ok
test should_parse_tests_defs_typedef_union_webidl ... ok
test should_parse_tests_defs_treatasnull_webidl ... ok
test should_parse_tests_defs_typedef_webidl ... ok
test should_parse_tests_defs_typesuffixes_webidl ... ok
test should_parse_tests_defs_undefined_webidl ... ok
test should_parse_tests_defs_variadic_operations_webidl ... ok
test should_parse_tests_defs_uniontype_webidl ... ok
test should_write_same_tests_defs_allowany_webidl ... ok
test should_write_same_tests_defs_argument_extattrs_webidl ... ok
test should_write_same_tests_defs_argument_constructor_webidl ... ok
test should_write_same_tests_defs_async_iterable_webidl ... ok
test should_parse_dom_webidl ... ok
test should_write_same_tests_defs_async_name_webidl ... ok
test should_write_same_tests_defs_attributes_webidl ... ok
test should_write_same_tests_defs_comment_webidl ... ok
test should_write_same_tests_defs_callback_webidl ... ok
test should_write_same_tests_defs_bigint_webidl ... ok
test should_write_same_tests_defs_constants_webidl ... ok
test should_write_same_tests_defs_buffersource_webidl ... ok
test should_write_same_tests_defs_constructor_webidl ... FAILED
test should_write_same_tests_defs_default_webidl ... ok
test should_write_same_tests_defs_documentation_webidl ... ok
test should_write_same_tests_defs_documentation_dos_webidl ... ok
test should_write_same_tests_defs_dictionary_inherits_webidl ... FAILED
test should_write_same_tests_defs_dictionary_webidl ... FAILED
test should_write_same_tests_defs_equivalent_decl_webidl ... ok
test should_write_same_tests_defs_escaped_name_webidl ... ok
test should_write_same_tests_defs_enum_webidl ... FAILED
test should_parse_tests_defs_streams_webidl ... ok
test should_write_same_tests_defs_exposed_asterisk_webidl ... ok
test should_write_same_tests_defs_escaped_type_webidl ... ok
test should_write_same_tests_defs_getter_setter_webidl ... ok
test should_write_same_tests_defs_extended_attributes_webidl ... FAILED
test should_write_same_tests_defs_generic_webidl ... ok
test should_write_same_tests_defs_includes_name_webidl ... ok
test should_write_same_tests_defs_identifier_hyphen_webidl ... ok
test should_write_same_tests_defs_identifier_qualified_names_webidl ... ok
test should_write_same_tests_defs_indexed_properties_webidl ... ok
test should_write_same_tests_defs_interface_constructor_webidl ... ok
test should_write_same_tests_defs_inherits_getter_webidl ... ok
test should_write_same_tests_defs_interface_inherits_webidl ... ok
test should_write_same_tests_defs_iterable_webidl ... ok
test should_write_same_tests_defs_mixin_webidl ... ok
test should_write_same_tests_defs_maplike_webidl ... ok
test should_write_same_tests_defs_namespace_webidl ... ok
test should_write_same_tests_defs_nointerfaceobject_webidl ... ok
test should_write_same_tests_defs_namedconstructor_webidl ... ok
test should_write_same_tests_defs_nullableobjects_webidl ... ok
test should_write_same_tests_defs_nullable_webidl ... ok
test should_write_same_tests_defs_obsolete_keywords_webidl ... ok
test should_write_same_tests_defs_operation_optional_arg_webidl ... ok
test should_parse_tests_defs_dom_webidl ... ok
test should_write_same_tests_defs_overridebuiltins_webidl ... ok
test should_write_same_tests_defs_overloading_webidl ... ok
test should_write_same_tests_defs_primitives_webidl ... ok
test should_write_same_tests_defs_partial_interface_webidl ... ok
test should_write_same_tests_defs_promise_void_webidl ... ok
test should_write_same_tests_defs_prototyperoot_webidl ... ok
test should_write_same_tests_defs_putforwards_webidl ... ok
test should_write_same_tests_defs_record_webidl ... ok
test should_write_same_tests_defs_replaceable_webidl ... ok
test should_write_same_tests_defs_reflector_interface_webidl ... FAILED
test should_write_same_tests_defs_sequence_webidl ... ok
test should_write_same_tests_defs_mediacapture_streams_webidl ... FAILED
test should_write_same_tests_defs_reg_operations_webidl ... ok
test should_write_same_tests_defs_static_webidl ... ok
test should_write_same_tests_defs_setlike_webidl ... ok
test should_write_same_tests_defs_stringifier_webidl ... ok
test should_write_same_tests_defs_treatasnull_webidl ... ok
test should_write_same_tests_defs_stringifier_attribute_webidl ... ok
test should_write_same_tests_defs_typedef_union_webidl ... ok
test should_write_same_tests_defs_treatasundefined_webidl ... ok
test should_write_same_tests_defs_undefined_webidl ... ok
test should_write_same_tests_defs_uniontype_webidl ... ok
test should_write_same_tests_defs_typesuffixes_webidl ... ok
test should_write_same_tests_defs_variadic_operations_webidl ... ok
test should_write_same_tests_defs_typedef_webidl ... ok
test should_write_same_tests_defs_streams_webidl ... FAILED
test should_write_same_tests_defs_dom_webidl ... FAILED
test should_parse_html_webidl ... ok
test should_write_same_tests_defs_html_webidl ... FAILED
test should_parse_tests_defs_html_webidl ... ok

failures:

---- interface_constructor stdout ----
thread 'interface_constructor' panicked at 'internal error: entered unreachable code', tests\webidl.rs:145:14
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::panicking::panic
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:114
   3: webidl::interface_constructor
             at .\tests\webidl.rs:145
   4: webidl::interface_constructor::closure$0
             at .\tests\webidl.rs:80
   5: core::ops::function::FnOnce::call_once<webidl::interface_constructor::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   6: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_constructor_webidl stdout ----
thread 'should_write_same_tests_defs_constructor_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"// Extracted from http://dev.w3.org/2006/webapi/WebIDL/ on 2011-05-06\ninterface Circle {\n  constructor();\n  constructor(float radius);\n  constructor(optional string str = );\n  constructor(sequence<string> seq);\n  constructor((Type1 or Type2) union);\n  attribute float r;\n  attribute float cx;\n  attribute float cy;\n  readonly attribute float circumference;\n};\n"`,
 right: `"// Extracted from http://dev.w3.org/2006/webapi/WebIDL/ on 2011-05-06\ninterface Circle {\n  constructor();\n  constructor(float radius);\n  constructor(optional string str = \"\");\n  constructor(sequence<string> seq);\n  constructor((Type1 or Type2) union);\n  attribute float r;\n  attribute float cx;\n  attribute float cy;\n  readonly attribute float circumference;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_constructor_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_constructor_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_constructor_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_dictionary_inherits_webidl stdout ----
thread 'should_write_same_tests_defs_dictionary_inherits_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"dictionary PaintOptions {\n  DOMString? fillPattern = black;\n  DOMString? strokePattern = null;\n  Point position;\n};\n\ndictionary WetPaintOptions : PaintOptions {\n  float hydrometry;\n};"`,
 right: `"dictionary PaintOptions {\n  DOMString? fillPattern = \"black\";\n  DOMString? strokePattern = null;\n  Point position;\n};\n\ndictionary WetPaintOptions : PaintOptions {\n  float hydrometry;\n};"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_dictionary_inherits_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_dictionary_inherits_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_dictionary_inherits_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_dictionary_webidl stdout ----
thread 'should_write_same_tests_defs_dictionary_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"// Extracted from Web IDL editors draft May 31 2011\ndictionary PaintOptions {\n  DOMString? fillPattern = black;\n  DOMString? strokePattern = null;\n  Point position;\n  // https://heycam.github.io/webidl/#dfn-optional-argument-default-value allows sequences to default to \"[]\".\n  sequence<long> seq = [];\n  // https://heycam.github.io/webidl/#required-dictionary-member\n  required long reqSeq;\n  Dictionary dict = {};\n};\n\npartial dictionary _A {\n  long h;\n  long d;\n};\n"`,
 right: `"// Extracted from Web IDL editors draft May 31 2011\ndictionary PaintOptions {\n  DOMString? fillPattern = \"black\";\n  DOMString? strokePattern = null;\n  Point position;\n  // https://heycam.github.io/webidl/#dfn-optional-argument-default-value allows sequences to default to \"[]\".\n  sequence<long> seq = [];\n  // https://heycam.github.io/webidl/#required-dictionary-member\n  required long reqSeq;\n  Dictionary dict = {};\n};\n\npartial dictionary _A {\n  long h;\n  long d;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_dictionary_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_dictionary_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_dictionary_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_enum_webidl stdout ----
thread 'should_write_same_tests_defs_enum_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"enum MealType { rice, noodles, other };\n\ninterface Meal {\n  attribute MealType type;\n  attribute float size;     // in grams\n\n  undefined initialize(MealType type, float size);\n};\n\nenum _AltMealType { rice, noodles, other, };\n"`,
 right: `"enum MealType { \"rice\", \"noodles\", \"other\" };\n\ninterface Meal {\n  attribute MealType type;\n  attribute float size;     // in grams\n\n  undefined initialize(MealType type, float size);\n};\n\nenum _AltMealType { \"rice\", \"noodles\", \"other\", };\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_enum_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_enum_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_enum_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_extended_attributes_webidl stdout ----
thread 'should_write_same_tests_defs_extended_attributes_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"// Extracted from http://www.w3.org/TR/2015/WD-service-workers-20150205/\n\n[Global=(Worker,ServiceWorker), Exposed=ServiceWorker]\ninterface ServiceWorkerGlobalScope : WorkerGlobalScope {\n\n};\n\n// Conformance with ExtendedAttributeList grammar in http://www.w3.org/TR/WebIDL/#idl-extended-attributes\n// Section 3.11\n[IntAttr=0, FloatAttr=3.14, StringAttr=abc, IdentifierAttr=_null, IdentifiersAttr=(_null, _const), FloatList=(3.14)]\ninterface IdInterface {};\n\n// Extracted from http://www.w3.org/TR/2016/REC-WebIDL-1-20161215/#Constructor on 2017-5-18 with whitespace differences\n[\n  Constructor,\n  Constructor(double radius)\n]\ninterface Circle {\n  attribute double r;\n  attribute double cx;\n  attribute double cy;\n  readonly attribute double circumference;\n};\n\n// Extracted from https://heycam.github.io/webidl/#idl-annotated-types on 2017-12-15\n[Exposed=Window]\ninterface I {\n    attribute [XAttr] (long or Node) attrib;\n};\n"`,
 right: `"// Extracted from http://www.w3.org/TR/2015/WD-service-workers-20150205/\n\n[Global=(Worker,ServiceWorker), Exposed=ServiceWorker]\ninterface ServiceWorkerGlobalScope : WorkerGlobalScope {\n\n};\n\n// Conformance with ExtendedAttributeList grammar in http://www.w3.org/TR/WebIDL/#idl-extended-attributes\n// Section 3.11\n[IntAttr=0, FloatAttr=3.14, StringAttr=\"abc\", IdentifierAttr=_null, IdentifiersAttr=(_null, _const), FloatList=(3.14)]\ninterface IdInterface {};\n\n// Extracted from http://www.w3.org/TR/2016/REC-WebIDL-1-20161215/#Constructor on 2017-5-18 with whitespace differences\n[\n  Constructor,\n  Constructor(double radius)\n]\ninterface Circle {\n  attribute double r;\n  attribute double cx;\n  attribute double cy;\n  readonly attribute double circumference;\n};\n\n// Extracted from https://heycam.github.io/webidl/#idl-annotated-types on 2017-12-15\n[Exposed=Window]\ninterface I {\n    attribute [XAttr] (long or Node) attrib;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_extended_attributes_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_extended_attributes_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_extended_attributes_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_reflector_interface_webidl stdout ----
thread 'should_write_same_tests_defs_reflector_interface_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"interface mixin Reflector {\n  [Reflect, ReflectOnly=on] attribute DOMString toggle;\n  // Parens may contain 2 to n values.\n  [Reflect=q, ReflectOnly=(anonymous, use-credentials)] attribute DOMString quarter;\n  [Reflect, ReflectRange=(1, 4)] attribute unsigned long span;\n};\n"`,
 right: `"interface mixin Reflector {\n  [Reflect, ReflectOnly=\"on\"] attribute DOMString toggle;\n  // Parens may contain 2 to n values.\n  [Reflect=q, ReflectOnly=(\"anonymous\", \"use-credentials\")] attribute DOMString quarter;\n  [Reflect, ReflectRange=(1, 4)] attribute unsigned long span;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_reflector_interface_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_reflector_interface_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_reflector_interface_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_mediacapture_streams_webidl stdout ----
thread 'should_write_same_tests_defs_mediacapture_streams_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"[Exposed=Window,\n Constructor,\n Constructor(MediaStream stream),\n Constructor(sequence<MediaStreamTrack> tracks)]\ninterface MediaStream : EventTarget {\n    readonly        attribute DOMString id;\n    sequence<MediaStreamTrack> getAudioTracks();\n    sequence<MediaStreamTrack> getVideoTracks();\n    sequence<MediaStreamTrack> getTracks();\n    MediaStreamTrack? getTrackById(DOMString trackId);\n    undefined addTrack(MediaStreamTrack track);\n    undefined removeTrack(MediaStreamTrack track);\n    MediaStream clone();\n    readonly        attribute boolean active;\n                    attribute EventHandler onaddtrack;\n                    attribute EventHandler onremovetrack;\n};\n\n[Exposed=Window]\ninterface MediaStreamTrack : EventTarget {\n    readonly        attribute DOMString kind;\n    readonly        attribute DOMString id;\n    readonly        attribute DOMString label;\n                    attribute boolean enabled;\n    readonly        attribute boolean muted;\n                    attribute EventHandler onmute;\n                    attribute EventHandler onunmute;\n    readonly        attribute MediaStreamTrackState readyState;\n                    attribute EventHandler onended;\n    MediaStreamTrack clone();\n    undefined stop();\n    MediaTrackCapabilities getCapabilities();\n    MediaTrackConstraints getConstraints();\n    MediaTrackSettings getSettings();\n    Promise<undefined> applyConstraints(optional MediaTrackConstraints constraints = {});\n};\n\nenum MediaStreamTrackState {\n    live,\n    ended\n};\n\ndictionary MediaTrackSupportedConstraints {\n             boolean width = true;\n             boolean height = true;\n             boolean aspectRatio = true;\n             boolean frameRate = true;\n             boolean facingMode = true;\n             boolean resizeMode = true;\n             boolean volume = true;\n             boolean sampleRate = true;\n             boolean sampleSize = true;\n             boolean echoCancellation = true;\n             boolean autoGainControl = true;\n             boolean noiseSuppression = true;\n             boolean latency = true;\n             boolean channelCount = true;\n             boolean deviceId = true;\n             boolean groupId = true;\n};\n\ndictionary MediaTrackCapabilities {\n             ULongRange width;\n             ULongRange height;\n             DoubleRange aspectRatio;\n             DoubleRange frameRate;\n             sequence<DOMString> facingMode;\n             sequence<DOMString> resizeMode;\n             DoubleRange volume;\n             ULongRange sampleRate;\n             ULongRange sampleSize;\n             sequence<boolean> echoCancellation;\n             sequence<boolean> autoGainControl;\n             sequence<boolean> noiseSuppression;\n             DoubleRange latency;\n             ULongRange channelCount;\n             DOMString deviceId;\n             DOMString groupId;\n};\n\ndictionary MediaTrackConstraints : MediaTrackConstraintSet {\n             sequence<MediaTrackConstraintSet> advanced;\n};\n\ndictionary MediaTrackConstraintSet {\n             ConstrainULong width;\n             ConstrainULong height;\n             ConstrainDouble aspectRatio;\n             ConstrainDouble frameRate;\n             ConstrainDOMString facingMode;\n             ConstrainDOMString resizeMode;\n             ConstrainDouble volume;\n             ConstrainULong sampleRate;\n             ConstrainULong sampleSize;\n             ConstrainBoolean echoCancellation;\n             ConstrainBoolean autoGainControl;\n             ConstrainBoolean noiseSuppression;\n             ConstrainDouble latency;\n             ConstrainULong channelCount;\n             ConstrainDOMString deviceId;\n             ConstrainDOMString groupId;\n};\n\ndictionary MediaTrackSettings {\n             long width;\n             long height;\n             double aspectRatio;\n             double frameRate;\n             DOMString facingMode;\n             DOMString resizeMode;\n             double volume;\n             long sampleRate;\n             long sampleSize;\n             boolean echoCancellation;\n             boolean autoGainControl;\n             boolean noiseSuppression;\n             double latency;\n             long channelCount;\n             DOMString deviceId;\n             DOMString groupId;\n};\n\nenum VideoFacingModeEnum {\n    user,\n    environment,\n    left,\n    right\n};\n\nenum VideoResizeModeEnum {\n    none,\n    crop-and-scale\n};\n\n[Exposed=Window,\n Constructor(DOMString type, MediaStreamTrackEventInit eventInitDict)]\ninterface MediaStreamTrackEvent : Event {\n    [SameObject]\n    readonly        attribute MediaStreamTrack track;\n};\n\ndictionary MediaStreamTrackEventInit : EventInit {\n    required MediaStreamTrack track;\n};\n\npartial interface Navigator {\n    [SameObject, SecureContext]\n    readonly        attribute MediaDevices mediaDevices;\n};\n\n[Exposed=Window, SecureContext]\ninterface MediaDevices : EventTarget {\n                    attribute EventHandler ondevicechange;\n    Promise<sequence<MediaDeviceInfo>> enumerateDevices();\n};\n\n[Exposed=Window, SecureContext]\ninterface MediaDeviceInfo {\n    readonly        attribute DOMString deviceId;\n    readonly        attribute MediaDeviceKind kind;\n    readonly        attribute DOMString label;\n    readonly        attribute DOMString groupId;\n    [Default] object toJSON();\n};\n\nenum MediaDeviceKind {\n    audioinput,\n    audiooutput,\n    videoinput\n};\n\n[Exposed=Window] interface InputDeviceInfo : MediaDeviceInfo {\n    MediaTrackCapabilities getCapabilities();\n};\n\npartial interface Navigator {\n    [SecureContext]\n    undefined getUserMedia(MediaStreamConstraints constraints, NavigatorUserMediaSuccessCallback successCallback, NavigatorUserMediaErrorCallback errorCallback);\n};\n\npartial interface MediaDevices {\n    MediaTrackSupportedConstraints getSupportedConstraints();\n    Promise<MediaStream> getUserMedia(optional MediaStreamConstraints constraints = {});\n};\n\ndictionary MediaStreamConstraints {\n             (boolean or MediaTrackConstraints) video = false;\n             (boolean or MediaTrackConstraints) audio = false;\n};\n\ncallback NavigatorUserMediaSuccessCallback = undefined (MediaStream stream);\n\ncallback NavigatorUserMediaErrorCallback = undefined (MediaStreamError error);\n\ntypedef object MediaStreamError;\n\ndictionary DoubleRange {\n             double max;\n             double min;\n};\n\ndictionary ConstrainDoubleRange : DoubleRange {\n             double exact;\n             double ideal;\n};\n\ndictionary ULongRange {\n             [Clamp] unsigned long max;\n             [Clamp] unsigned long min;\n};\n\ndictionary ConstrainULongRange : ULongRange {\n             [Clamp] unsigned long exact;\n             [Clamp] unsigned long ideal;\n};\n\ndictionary ConstrainBooleanParameters {\n             boolean exact;\n             boolean ideal;\n};\n\ndictionary ConstrainDOMStringParameters {\n             (DOMString or sequence<DOMString>) exact;\n             (DOMString or sequence<DOMString>) ideal;\n};\n\ntypedef ([Clamp] unsigned long or ConstrainULongRange) ConstrainULong;\n\ntypedef (double or ConstrainDoubleRange) ConstrainDouble;\n\ntypedef (boolean or ConstrainBooleanParameters) ConstrainBoolean;\n\ntypedef (DOMString or sequence<DOMString> or ConstrainDOMStringParameters) ConstrainDOMString;\n\ndictionary Capabilities {\n};\n\ndictionary Settings {\n};\n\ndictionary ConstraintSet {\n};\n\ndictionary Constraints : ConstraintSet {\n             sequence<ConstraintSet> advanced;\n};\n"`,
 right: `"[Exposed=Window,\n Constructor,\n Constructor(MediaStream stream),\n Constructor(sequence<MediaStreamTrack> tracks)]\ninterface MediaStream : EventTarget {\n    readonly        attribute DOMString id;\n    sequence<MediaStreamTrack> getAudioTracks();\n    sequence<MediaStreamTrack> getVideoTracks();\n    sequence<MediaStreamTrack> getTracks();\n    MediaStreamTrack? getTrackById(DOMString trackId);\n    undefined addTrack(MediaStreamTrack track);\n    undefined removeTrack(MediaStreamTrack track);\n    MediaStream clone();\n    readonly        attribute boolean active;\n                    attribute EventHandler onaddtrack;\n                    attribute EventHandler onremovetrack;\n};\n\n[Exposed=Window]\ninterface MediaStreamTrack : EventTarget {\n    readonly        attribute DOMString kind;\n    readonly        attribute DOMString id;\n    readonly        attribute DOMString label;\n                    attribute boolean enabled;\n    readonly        attribute boolean muted;\n                    attribute EventHandler onmute;\n                    attribute EventHandler onunmute;\n    readonly        attribute MediaStreamTrackState readyState;\n                    attribute EventHandler onended;\n    MediaStreamTrack clone();\n    undefined stop();\n    MediaTrackCapabilities getCapabilities();\n    MediaTrackConstraints getConstraints();\n    MediaTrackSettings getSettings();\n    Promise<undefined> applyConstraints(optional MediaTrackConstraints constraints = {});\n};\n\nenum MediaStreamTrackState {\n    \"live\",\n    \"ended\"\n};\n\ndictionary MediaTrackSupportedConstraints {\n             boolean width = true;\n             boolean height = true;\n             boolean aspectRatio = true;\n             boolean frameRate = true;\n             boolean facingMode = true;\n             boolean resizeMode = true;\n             boolean volume = true;\n             boolean sampleRate = true;\n             boolean sampleSize = true;\n             boolean echoCancellation = true;\n             boolean autoGainControl = true;\n             boolean noiseSuppression = true;\n             boolean latency = true;\n             boolean channelCount = true;\n             boolean deviceId = true;\n             boolean groupId = true;\n};\n\ndictionary MediaTrackCapabilities {\n             ULongRange width;\n             ULongRange height;\n             DoubleRange aspectRatio;\n             DoubleRange frameRate;\n             sequence<DOMString> facingMode;\n             sequence<DOMString> resizeMode;\n             DoubleRange volume;\n             ULongRange sampleRate;\n             ULongRange sampleSize;\n             sequence<boolean> echoCancellation;\n             sequence<boolean> autoGainControl;\n             sequence<boolean> noiseSuppression;\n             DoubleRange latency;\n             ULongRange channelCount;\n             DOMString deviceId;\n             DOMString groupId;\n};\n\ndictionary MediaTrackConstraints : MediaTrackConstraintSet {\n             sequence<MediaTrackConstraintSet> advanced;\n};\n\ndictionary MediaTrackConstraintSet {\n             ConstrainULong width;\n             ConstrainULong height;\n             ConstrainDouble aspectRatio;\n             ConstrainDouble frameRate;\n             ConstrainDOMString facingMode;\n             ConstrainDOMString resizeMode;\n             ConstrainDouble volume;\n             ConstrainULong sampleRate;\n             ConstrainULong sampleSize;\n             ConstrainBoolean echoCancellation;\n             ConstrainBoolean autoGainControl;\n             ConstrainBoolean noiseSuppression;\n             ConstrainDouble latency;\n             ConstrainULong channelCount;\n             ConstrainDOMString deviceId;\n             ConstrainDOMString groupId;\n};\n\ndictionary MediaTrackSettings {\n             long width;\n             long height;\n             double aspectRatio;\n             double frameRate;\n             DOMString facingMode;\n             DOMString resizeMode;\n             double volume;\n             long sampleRate;\n             long sampleSize;\n             boolean echoCancellation;\n             boolean autoGainControl;\n             boolean noiseSuppression;\n             double latency;\n             long channelCount;\n             DOMString deviceId;\n             DOMString groupId;\n};\n\nenum VideoFacingModeEnum {\n    \"user\",\n    \"environment\",\n    \"left\",\n    \"right\"\n};\n\nenum VideoResizeModeEnum {\n    \"none\",\n    \"crop-and-scale\"\n};\n\n[Exposed=Window,\n Constructor(DOMString type, MediaStreamTrackEventInit eventInitDict)]\ninterface MediaStreamTrackEvent : Event {\n    [SameObject]\n    readonly        attribute MediaStreamTrack track;\n};\n\ndictionary MediaStreamTrackEventInit : EventInit {\n    required MediaStreamTrack track;\n};\n\npartial interface Navigator {\n    [SameObject, SecureContext]\n    readonly        attribute MediaDevices mediaDevices;\n};\n\n[Exposed=Window, SecureContext]\ninterface MediaDevices : EventTarget {\n                    attribute EventHandler ondevicechange;\n    Promise<sequence<MediaDeviceInfo>> enumerateDevices();\n};\n\n[Exposed=Window, SecureContext]\ninterface MediaDeviceInfo {\n    readonly        attribute DOMString deviceId;\n    readonly        attribute MediaDeviceKind kind;\n    readonly        attribute DOMString label;\n    readonly        attribute DOMString groupId;\n    [Default] object toJSON();\n};\n\nenum MediaDeviceKind {\n    \"audioinput\",\n    \"audiooutput\",\n    \"videoinput\"\n};\n\n[Exposed=Window] interface InputDeviceInfo : MediaDeviceInfo {\n    MediaTrackCapabilities getCapabilities();\n};\n\npartial interface Navigator {\n    [SecureContext]\n    undefined getUserMedia(MediaStreamConstraints constraints, NavigatorUserMediaSuccessCallback successCallback, NavigatorUserMediaErrorCallback errorCallback);\n};\n\npartial interface MediaDevices {\n    MediaTrackSupportedConstraints getSupportedConstraints();\n    Promise<MediaStream> getUserMedia(optional MediaStreamConstraints constraints = {});\n};\n\ndictionary MediaStreamConstraints {\n             (boolean or MediaTrackConstraints) video = false;\n             (boolean or MediaTrackConstraints) audio = false;\n};\n\ncallback NavigatorUserMediaSuccessCallback = undefined (MediaStream stream);\n\ncallback NavigatorUserMediaErrorCallback = undefined (MediaStreamError error);\n\ntypedef object MediaStreamError;\n\ndictionary DoubleRange {\n             double max;\n             double min;\n};\n\ndictionary ConstrainDoubleRange : DoubleRange {\n             double exact;\n             double ideal;\n};\n\ndictionary ULongRange {\n             [Clamp] unsigned long max;\n             [Clamp] unsigned long min;\n};\n\ndictionary ConstrainULongRange : ULongRange {\n             [Clamp] unsigned long exact;\n             [Clamp] unsigned long ideal;\n};\n\ndictionary ConstrainBooleanParameters {\n             boolean exact;\n             boolean ideal;\n};\n\ndictionary ConstrainDOMStringParameters {\n             (DOMString or sequence<DOMString>) exact;\n             (DOMString or sequence<DOMString>) ideal;\n};\n\ntypedef ([Clamp] unsigned long or ConstrainULongRange) ConstrainULong;\n\ntypedef (double or ConstrainDoubleRange) ConstrainDouble;\n\ntypedef (boolean or ConstrainBooleanParameters) ConstrainBoolean;\n\ntypedef (DOMString or sequence<DOMString> or ConstrainDOMStringParameters) ConstrainDOMString;\n\ndictionary Capabilities {\n};\n\ndictionary Settings {\n};\n\ndictionary ConstraintSet {\n};\n\ndictionary Constraints : ConstraintSet {\n             sequence<ConstraintSet> advanced;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_mediacapture_streams_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_mediacapture_streams_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_mediacapture_streams_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_streams_webidl stdout ----
thread 'should_write_same_tests_defs_streams_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStream {\n  constructor(optional object underlyingSource, optional QueuingStrategy strategy = {});\n\n  readonly attribute boolean locked;\n\n  Promise<undefined> cancel(optional any reason);\n  ReadableStreamReader getReader(optional ReadableStreamGetReaderOptions options = {});\n  ReadableStream pipeThrough(ReadableWritablePair transform, optional StreamPipeOptions options = {});\n  Promise<undefined> pipeTo(WritableStream destination, optional StreamPipeOptions options = {});\n  sequence<ReadableStream> tee();\n\n  async iterable<any>(optional ReadableStreamIteratorOptions options = {});\n};\n\ntypedef (ReadableStreamDefaultReader or ReadableStreamBYOBReader) ReadableStreamReader;\n\nenum ReadableStreamReaderMode { byob };\n\ndictionary ReadableStreamGetReaderOptions {\n  ReadableStreamReaderMode mode;\n};\n\ndictionary ReadableStreamIteratorOptions {\n  boolean preventCancel = false;\n};\n\ndictionary ReadableWritablePair {\n  required ReadableStream readable;\n  required WritableStream writable;\n};\n\ndictionary StreamPipeOptions {\n  boolean preventClose = false;\n  boolean preventAbort = false;\n  boolean preventCancel = false;\n  AbortSignal signal;\n};\n\ndictionary UnderlyingSource {\n  UnderlyingSourceStartCallback start;\n  UnderlyingSourcePullCallback pull;\n  UnderlyingSourceCancelCallback cancel;\n  ReadableStreamType type;\n  [EnforceRange] unsigned long long autoAllocateChunkSize;\n};\n\ntypedef (ReadableStreamDefaultController or ReadableByteStreamController) ReadableStreamController;\n\ncallback UnderlyingSourceStartCallback = any (ReadableStreamController controller);\ncallback UnderlyingSourcePullCallback = Promise<undefined> (ReadableStreamController controller);\ncallback UnderlyingSourceCancelCallback = Promise<undefined> (optional any reason);\n\nenum ReadableStreamType { bytes };\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamDefaultReader {\n  constructor(ReadableStream stream);\n\n  readonly attribute Promise<undefined> closed;\n\n  Promise<undefined> cancel(optional any reason);\n  Promise<any> read();\n  undefined releaseLock();\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamBYOBReader {\n  constructor(ReadableStream stream);\n\n  readonly attribute Promise<undefined> closed;\n\n  Promise<undefined> cancel(optional any reason);\n  Promise<any> read(ArrayBufferView view);\n  undefined releaseLock();\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamDefaultController {\n  readonly attribute unrestricted double? desiredSize;\n\n  undefined close();\n  undefined enqueue(optional any chunk);\n  undefined error(optional any e);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableByteStreamController {\n  readonly attribute ReadableStreamBYOBRequest? byobRequest;\n  readonly attribute unrestricted double? desiredSize;\n\n  undefined close();\n  undefined enqueue(ArrayBufferView chunk);\n  undefined error(optional any e);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamBYOBRequest {\n  readonly attribute ArrayBufferView? view;\n\n  undefined respond([EnforceRange] unsigned long long bytesWritten);\n  undefined respondWithNewView(ArrayBufferView view);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface WritableStream {\n  constructor(optional object underlyingSink, optional QueuingStrategy strategy = {});\n\n  readonly attribute boolean locked;\n\n  Promise<undefined> abort(optional any reason);\n  Promise<undefined> close();\n  WritableStreamDefaultWriter getWriter();\n};\n\ndictionary UnderlyingSink {\n  UnderlyingSinkStartCallback start;\n  UnderlyingSinkWriteCallback write;\n  UnderlyingSinkCloseCallback close;\n  UnderlyingSinkAbortCallback abort;\n  any type;\n};\n\ncallback UnderlyingSinkStartCallback = any (WritableStreamDefaultController controller);\ncallback UnderlyingSinkWriteCallback = Promise<undefined> (WritableStreamDefaultController controller, optional any chunk);\ncallback UnderlyingSinkCloseCallback = Promise<undefined> ();\ncallback UnderlyingSinkAbortCallback = Promise<undefined> (optional any reason);\n\n[Exposed=(Window,Worker,Worklet)]\ninterface WritableStreamDefaultWriter {\n  constructor(WritableStream stream);\n\n  readonly attribute Promise<undefined> closed;\n  readonly attribute unrestricted double? desiredSize;\n  readonly attribute Promise<undefined> ready;\n\n  Promise<undefined> abort(optional any reason);\n  Promise<undefined> close();\n  undefined releaseLock();\n  Promise<undefined> write(optional any chunk);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface WritableStreamDefaultController {\n  undefined error(optional any e);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface TransformStream {\n  constructor(optional object transformer,\n              optional QueuingStrategy writableStrategy = {},\n              optional QueuingStrategy readableStrategy = {});\n\n  readonly attribute ReadableStream readable;\n  readonly attribute WritableStream writable;\n};\n\ndictionary Transformer {\n  TransformerStartCallback start;\n  TransformerTransformCallback transform;\n  TransformerFlushCallback flush;\n  any readableType;\n  any writableType;\n};\n\ncallback TransformerStartCallback = any (TransformStreamDefaultController controller);\ncallback TransformerFlushCallback = Promise<undefined> (TransformStreamDefaultController controller);\ncallback TransformerTransformCallback = Promise<undefined> (TransformStreamDefaultController controller, optional any chunk);\n\n[Exposed=(Window,Worker,Worklet)]\ninterface TransformStreamDefaultController {\n  readonly attribute unrestricted double? desiredSize;\n\n  undefined enqueue(optional any chunk);\n  undefined error(optional any reason);\n  undefined terminate();\n};\n\ndictionary QueuingStrategy {\n  unrestricted double highWaterMark;\n  QueuingStrategySize size;\n};\n\ncallback QueuingStrategySize = unrestricted double (optional any chunk);\n\ndictionary QueuingStrategyInit {\n  required unrestricted double highWaterMark;\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ByteLengthQueuingStrategy {\n  constructor(QueuingStrategyInit init);\n\n  readonly attribute unrestricted double highWaterMark;\n  readonly attribute Function size;\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface CountQueuingStrategy {\n  constructor(QueuingStrategyInit init);\n\n  readonly attribute unrestricted double highWaterMark;\n  readonly attribute Function size;\n};\n"`,
 right: `"[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStream {\n  constructor(optional object underlyingSource, optional QueuingStrategy strategy = {});\n\n  readonly attribute boolean locked;\n\n  Promise<undefined> cancel(optional any reason);\n  ReadableStreamReader getReader(optional ReadableStreamGetReaderOptions options = {});\n  ReadableStream pipeThrough(ReadableWritablePair transform, optional StreamPipeOptions options = {});\n  Promise<undefined> pipeTo(WritableStream destination, optional StreamPipeOptions options = {});\n  sequence<ReadableStream> tee();\n\n  async iterable<any>(optional ReadableStreamIteratorOptions options = {});\n};\n\ntypedef (ReadableStreamDefaultReader or ReadableStreamBYOBReader) ReadableStreamReader;\n\nenum ReadableStreamReaderMode { \"byob\" };\n\ndictionary ReadableStreamGetReaderOptions {\n  ReadableStreamReaderMode mode;\n};\n\ndictionary ReadableStreamIteratorOptions {\n  boolean preventCancel = false;\n};\n\ndictionary ReadableWritablePair {\n  required ReadableStream readable;\n  required WritableStream writable;\n};\n\ndictionary StreamPipeOptions {\n  boolean preventClose = false;\n  boolean preventAbort = false;\n  boolean preventCancel = false;\n  AbortSignal signal;\n};\n\ndictionary UnderlyingSource {\n  UnderlyingSourceStartCallback start;\n  UnderlyingSourcePullCallback pull;\n  UnderlyingSourceCancelCallback cancel;\n  ReadableStreamType type;\n  [EnforceRange] unsigned long long autoAllocateChunkSize;\n};\n\ntypedef (ReadableStreamDefaultController or ReadableByteStreamController) ReadableStreamController;\n\ncallback UnderlyingSourceStartCallback = any (ReadableStreamController controller);\ncallback UnderlyingSourcePullCallback = Promise<undefined> (ReadableStreamController controller);\ncallback UnderlyingSourceCancelCallback = Promise<undefined> (optional any reason);\n\nenum ReadableStreamType { \"bytes\" };\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamDefaultReader {\n  constructor(ReadableStream stream);\n\n  readonly attribute Promise<undefined> closed;\n\n  Promise<undefined> cancel(optional any reason);\n  Promise<any> read();\n  undefined releaseLock();\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamBYOBReader {\n  constructor(ReadableStream stream);\n\n  readonly attribute Promise<undefined> closed;\n\n  Promise<undefined> cancel(optional any reason);\n  Promise<any> read(ArrayBufferView view);\n  undefined releaseLock();\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamDefaultController {\n  readonly attribute unrestricted double? desiredSize;\n\n  undefined close();\n  undefined enqueue(optional any chunk);\n  undefined error(optional any e);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableByteStreamController {\n  readonly attribute ReadableStreamBYOBRequest? byobRequest;\n  readonly attribute unrestricted double? desiredSize;\n\n  undefined close();\n  undefined enqueue(ArrayBufferView chunk);\n  undefined error(optional any e);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ReadableStreamBYOBRequest {\n  readonly attribute ArrayBufferView? view;\n\n  undefined respond([EnforceRange] unsigned long long bytesWritten);\n  undefined respondWithNewView(ArrayBufferView view);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface WritableStream {\n  constructor(optional object underlyingSink, optional QueuingStrategy strategy = {});\n\n  readonly attribute boolean locked;\n\n  Promise<undefined> abort(optional any reason);\n  Promise<undefined> close();\n  WritableStreamDefaultWriter getWriter();\n};\n\ndictionary UnderlyingSink {\n  UnderlyingSinkStartCallback start;\n  UnderlyingSinkWriteCallback write;\n  UnderlyingSinkCloseCallback close;\n  UnderlyingSinkAbortCallback abort;\n  any type;\n};\n\ncallback UnderlyingSinkStartCallback = any (WritableStreamDefaultController controller);\ncallback UnderlyingSinkWriteCallback = Promise<undefined> (WritableStreamDefaultController controller, optional any chunk);\ncallback UnderlyingSinkCloseCallback = Promise<undefined> ();\ncallback UnderlyingSinkAbortCallback = Promise<undefined> (optional any reason);\n\n[Exposed=(Window,Worker,Worklet)]\ninterface WritableStreamDefaultWriter {\n  constructor(WritableStream stream);\n\n  readonly attribute Promise<undefined> closed;\n  readonly attribute unrestricted double? desiredSize;\n  readonly attribute Promise<undefined> ready;\n\n  Promise<undefined> abort(optional any reason);\n  Promise<undefined> close();\n  undefined releaseLock();\n  Promise<undefined> write(optional any chunk);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface WritableStreamDefaultController {\n  undefined error(optional any e);\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface TransformStream {\n  constructor(optional object transformer,\n              optional QueuingStrategy writableStrategy = {},\n              optional QueuingStrategy readableStrategy = {});\n\n  readonly attribute ReadableStream readable;\n  readonly attribute WritableStream writable;\n};\n\ndictionary Transformer {\n  TransformerStartCallback start;\n  TransformerTransformCallback transform;\n  TransformerFlushCallback flush;\n  any readableType;\n  any writableType;\n};\n\ncallback TransformerStartCallback = any (TransformStreamDefaultController controller);\ncallback TransformerFlushCallback = Promise<undefined> (TransformStreamDefaultController controller);\ncallback TransformerTransformCallback = Promise<undefined> (TransformStreamDefaultController controller, optional any chunk);\n\n[Exposed=(Window,Worker,Worklet)]\ninterface TransformStreamDefaultController {\n  readonly attribute unrestricted double? desiredSize;\n\n  undefined enqueue(optional any chunk);\n  undefined error(optional any reason);\n  undefined terminate();\n};\n\ndictionary QueuingStrategy {\n  unrestricted double highWaterMark;\n  QueuingStrategySize size;\n};\n\ncallback QueuingStrategySize = unrestricted double (optional any chunk);\n\ndictionary QueuingStrategyInit {\n  required unrestricted double highWaterMark;\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface ByteLengthQueuingStrategy {\n  constructor(QueuingStrategyInit init);\n\n  readonly attribute unrestricted double highWaterMark;\n  readonly attribute Function size;\n};\n\n[Exposed=(Window,Worker,Worklet)]\ninterface CountQueuingStrategy {\n  constructor(QueuingStrategyInit init);\n\n  readonly attribute unrestricted double highWaterMark;\n  readonly attribute Function size;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_streams_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_streams_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_streams_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_dom_webidl stdout ----
thread 'should_write_same_tests_defs_dom_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"[Constructor(DOMString type, optional EventInit eventInitDict),\n Exposed=(Window,Worker,AudioWorklet)]\ninterface Event {\n  readonly attribute DOMString type;\n  readonly attribute EventTarget? target;\n  readonly attribute EventTarget? srcElement; // historical\n  readonly attribute EventTarget? currentTarget;\n  sequence<EventTarget> composedPath();\n\n  const unsigned short NONE = 0;\n  const unsigned short CAPTURING_PHASE = 1;\n  const unsigned short AT_TARGET = 2;\n  const unsigned short BUBBLING_PHASE = 3;\n  readonly attribute unsigned short eventPhase;\n\n  undefined stopPropagation();\n           attribute boolean cancelBubble; // historical alias of .stopPropagation\n  undefined stopImmediatePropagation();\n\n  readonly attribute boolean bubbles;\n  readonly attribute boolean cancelable;\n           attribute boolean returnValue;  // historical\n  undefined preventDefault();\n  readonly attribute boolean defaultPrevented;\n  readonly attribute boolean composed;\n\n  [Unforgeable] readonly attribute boolean isTrusted;\n  readonly attribute DOMHighResTimeStamp timeStamp;\n\n  undefined initEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false); // historical\n};\n\ndictionary EventInit {\n  boolean bubbles = false;\n  boolean cancelable = false;\n  boolean composed = false;\n};\n\n[Constructor(DOMString type, optional CustomEventInit eventInitDict),\n Exposed=(Window,Worker)]\ninterface CustomEvent : Event {\n  readonly attribute any detail;\n\n  undefined initCustomEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any detail = null);\n};\n\ndictionary CustomEventInit : EventInit {\n  any detail = null;\n};\n\n[Constructor,\n Exposed=(Window,Worker,AudioWorklet)]\ninterface EventTarget {\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options);\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options);\n  boolean dispatchEvent(Event event);\n};\n\ncallback interface EventListener {\n  undefined handleEvent(Event event);\n};\n\ndictionary EventListenerOptions {\n  boolean capture = false;\n};\n\ndictionary AddEventListenerOptions : EventListenerOptions {\n  boolean passive = false;\n  boolean once = false;\n};\n\n[Constructor,\n Exposed=(Window,Worker)]\ninterface AbortController {\n  [SameObject] readonly attribute AbortSignal signal;\n\n  undefined abort();\n};\n\n[Exposed=(Window,Worker)]\ninterface AbortSignal : EventTarget {\n  readonly attribute boolean aborted;\n\n  attribute EventHandler onabort;\n};\n\ninterface mixin NonElementParentNode {\n  Element? getElementById(DOMString elementId);\n};\nDocument includes NonElementParentNode;\nDocumentFragment includes NonElementParentNode;\n\ninterface mixin DocumentOrShadowRoot {\n};\nDocument includes DocumentOrShadowRoot;\nShadowRoot includes DocumentOrShadowRoot;\n\ninterface mixin ParentNode {\n  [SameObject] readonly attribute HTMLCollection children;\n  readonly attribute Element? firstElementChild;\n  readonly attribute Element? lastElementChild;\n  readonly attribute unsigned long childElementCount;\n\n  [CEReactions, Unscopable] undefined prepend((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined append((Node or DOMString)... nodes);\n\n  Element? querySelector(DOMString selectors);\n  [NewObject] NodeList querySelectorAll(DOMString selectors);\n};\nDocument includes ParentNode;\nDocumentFragment includes ParentNode;\nElement includes ParentNode;\n\ninterface mixin NonDocumentTypeChildNode {\n  readonly attribute Element? previousElementSibling;\n  readonly attribute Element? nextElementSibling;\n};\nElement includes NonDocumentTypeChildNode;\nCharacterData includes NonDocumentTypeChildNode;\n\ninterface mixin ChildNode {\n  [CEReactions, Unscopable] undefined before((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined after((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined replaceWith((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined remove();\n};\nDocumentType includes ChildNode;\nElement includes ChildNode;\nCharacterData includes ChildNode;\n\ninterface mixin Slotable {\n  readonly attribute HTMLSlotElement? assignedSlot;\n};\nElement includes Slotable;\nText includes Slotable;\n\n[Exposed=Window]\ninterface NodeList {\n  getter Node? item(unsigned long index);\n  readonly attribute unsigned long length;\n  iterable<Node>;\n};\n\n[Exposed=Window, LegacyUnenumerableNamedProperties]\ninterface HTMLCollection {\n  readonly attribute unsigned long length;\n  getter Element? item(unsigned long index);\n  getter Element? namedItem(DOMString name);\n};\n\n[Constructor(MutationCallback callback),\n Exposed=Window]\ninterface MutationObserver {\n  undefined observe(Node target, optional MutationObserverInit options);\n  undefined disconnect();\n  sequence<MutationRecord> takeRecords();\n};\n\ncallback MutationCallback = undefined (sequence<MutationRecord> mutations, MutationObserver observer);\n\ndictionary MutationObserverInit {\n  boolean childList = false;\n  boolean attributes;\n  boolean characterData;\n  boolean subtree = false;\n  boolean attributeOldValue;\n  boolean characterDataOldValue;\n  sequence<DOMString> attributeFilter;\n};\n\n[Exposed=Window]\ninterface MutationRecord {\n  readonly attribute DOMString type;\n  [SameObject] readonly attribute Node target;\n  [SameObject] readonly attribute NodeList addedNodes;\n  [SameObject] readonly attribute NodeList removedNodes;\n  readonly attribute Node? previousSibling;\n  readonly attribute Node? nextSibling;\n  readonly attribute DOMString? attributeName;\n  readonly attribute DOMString? attributeNamespace;\n  readonly attribute DOMString? oldValue;\n};\n\n[Exposed=Window]\ninterface Node : EventTarget {\n  const unsigned short ELEMENT_NODE = 1;\n  const unsigned short ATTRIBUTE_NODE = 2;\n  const unsigned short TEXT_NODE = 3;\n  const unsigned short CDATA_SECTION_NODE = 4;\n  const unsigned short ENTITY_REFERENCE_NODE = 5; // historical\n  const unsigned short ENTITY_NODE = 6; // historical\n  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;\n  const unsigned short COMMENT_NODE = 8;\n  const unsigned short DOCUMENT_NODE = 9;\n  const unsigned short DOCUMENT_TYPE_NODE = 10;\n  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;\n  const unsigned short NOTATION_NODE = 12; // historical\n  readonly attribute unsigned short nodeType;\n  readonly attribute DOMString nodeName;\n\n  readonly attribute USVString baseURI;\n\n  readonly attribute boolean isConnected;\n  readonly attribute Document? ownerDocument;\n  Node getRootNode(optional GetRootNodeOptions options);\n  readonly attribute Node? parentNode;\n  readonly attribute Element? parentElement;\n  boolean hasChildNodes();\n  [SameObject] readonly attribute NodeList childNodes;\n  readonly attribute Node? firstChild;\n  readonly attribute Node? lastChild;\n  readonly attribute Node? previousSibling;\n  readonly attribute Node? nextSibling;\n\n  [CEReactions] attribute DOMString? nodeValue;\n  [CEReactions] attribute DOMString? textContent;\n  [CEReactions] undefined normalize();\n\n  [CEReactions, NewObject] Node cloneNode(optional boolean deep = false);\n  boolean isEqualNode(Node? otherNode);\n  boolean isSameNode(Node? otherNode); // historical alias of ===\n\n  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;\n  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;\n  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;\n  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;\n  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;\n  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\n  unsigned short compareDocumentPosition(Node other);\n  boolean contains(Node? other);\n\n  DOMString? lookupPrefix(DOMString? namespace);\n  DOMString? lookupNamespaceURI(DOMString? prefix);\n  boolean isDefaultNamespace(DOMString? namespace);\n\n  [CEReactions] Node insertBefore(Node node, Node? child);\n  [CEReactions] Node appendChild(Node node);\n  [CEReactions] Node replaceChild(Node node, Node child);\n  [CEReactions] Node removeChild(Node child);\n};\n\ndictionary GetRootNodeOptions {\n  boolean composed = false;\n};\n\n[Constructor,\n Exposed=Window]\ninterface Document : Node {\n  [SameObject] readonly attribute DOMImplementation implementation;\n  readonly attribute USVString URL;\n  readonly attribute USVString documentURI;\n  readonly attribute USVString origin;\n  readonly attribute DOMString compatMode;\n  readonly attribute DOMString characterSet;\n  readonly attribute DOMString charset; // historical alias of .characterSet\n  readonly attribute DOMString inputEncoding; // historical alias of .characterSet\n  readonly attribute DOMString contentType;\n\n  readonly attribute DocumentType? doctype;\n  readonly attribute Element? documentElement;\n  HTMLCollection getElementsByTagName(DOMString qualifiedName);\n  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);\n  HTMLCollection getElementsByClassName(DOMString classNames);\n\n  [CEReactions, NewObject] Element createElement(DOMString localName, optional (DOMString or ElementCreationOptions) options);\n  [CEReactions, NewObject] Element createElementNS(DOMString? namespace, DOMString qualifiedName, optional (DOMString or ElementCreationOptions) options);\n  [NewObject] DocumentFragment createDocumentFragment();\n  [NewObject] Text createTextNode(DOMString data);\n  [NewObject] CDATASection createCDATASection(DOMString data);\n  [NewObject] Comment createComment(DOMString data);\n  [NewObject] ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);\n\n  [CEReactions, NewObject] Node importNode(Node node, optional boolean deep = false);\n  [CEReactions] Node adoptNode(Node node);\n\n  [NewObject] Attr createAttribute(DOMString localName);\n  [NewObject] Attr createAttributeNS(DOMString? namespace, DOMString qualifiedName);\n\n  [NewObject] Event createEvent(DOMString interface);\n\n  [NewObject] Range createRange();\n\n  // NodeFilter.SHOW_ALL = 0xFFFFFFFF\n  [NewObject] NodeIterator createNodeIterator(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);\n  [NewObject] TreeWalker createTreeWalker(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);\n};\n\n[Exposed=Window]\ninterface XMLDocument : Document {};\n\ndictionary ElementCreationOptions {\n  DOMString is;\n};\n\n[Exposed=Window]\ninterface DOMImplementation {\n  [NewObject] DocumentType createDocumentType(DOMString qualifiedName, DOMString publicId, DOMString systemId);\n  [NewObject] XMLDocument createDocument(DOMString? namespace, [TreatNullAs=EmptyString] DOMString qualifiedName, optional DocumentType? doctype = null);\n  [NewObject] Document createHTMLDocument(optional DOMString title);\n\n  boolean hasFeature(); // useless; always returns true\n};\n\n[Exposed=Window]\ninterface DocumentType : Node {\n  readonly attribute DOMString name;\n  readonly attribute DOMString publicId;\n  readonly attribute DOMString systemId;\n};\n\n[Constructor,\n Exposed=Window]\ninterface DocumentFragment : Node {\n};\n\n[Exposed=Window]\ninterface ShadowRoot : DocumentFragment {\n  readonly attribute ShadowRootMode mode;\n  readonly attribute Element host;\n};\n\nenum ShadowRootMode { open, closed };\n\n[Exposed=Window]\ninterface Element : Node {\n  readonly attribute DOMString? namespaceURI;\n  readonly attribute DOMString? prefix;\n  readonly attribute DOMString localName;\n  readonly attribute DOMString tagName;\n\n  [CEReactions] attribute DOMString id;\n  [CEReactions] attribute DOMString className;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList classList;\n  [CEReactions, Unscopable] attribute DOMString slot;\n\n  boolean hasAttributes();\n  [SameObject] readonly attribute NamedNodeMap attributes;\n  sequence<DOMString> getAttributeNames();\n  DOMString? getAttribute(DOMString qualifiedName);\n  DOMString? getAttributeNS(DOMString? namespace, DOMString localName);\n  [CEReactions] undefined setAttribute(DOMString qualifiedName, DOMString value);\n  [CEReactions] undefined setAttributeNS(DOMString? namespace, DOMString qualifiedName, DOMString value);\n  [CEReactions] undefined removeAttribute(DOMString qualifiedName);\n  [CEReactions] undefined removeAttributeNS(DOMString? namespace, DOMString localName);\n  boolean hasAttribute(DOMString qualifiedName);\n  boolean hasAttributeNS(DOMString? namespace, DOMString localName);\n\n  Attr? getAttributeNode(DOMString qualifiedName);\n  Attr? getAttributeNodeNS(DOMString? namespace, DOMString localName);\n  [CEReactions] Attr? setAttributeNode(Attr attr);\n  [CEReactions] Attr? setAttributeNodeNS(Attr attr);\n  [CEReactions] Attr removeAttributeNode(Attr attr);\n\n  ShadowRoot attachShadow(ShadowRootInit init);\n  readonly attribute ShadowRoot? shadowRoot;\n\n  Element? closest(DOMString selectors);\n  boolean matches(DOMString selectors);\n  boolean webkitMatchesSelector(DOMString selectors); // historical alias of .matches\n\n  HTMLCollection getElementsByTagName(DOMString qualifiedName);\n  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);\n  HTMLCollection getElementsByClassName(DOMString classNames);\n\n  [CEReactions] Element? insertAdjacentElement(DOMString where, Element element); // historical\n  undefined insertAdjacentText(DOMString where, DOMString data); // historical\n};\n\ndictionary ShadowRootInit {\n  required ShadowRootMode mode;\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface NamedNodeMap {\n  readonly attribute unsigned long length;\n  getter Attr? item(unsigned long index);\n  getter Attr? getNamedItem(DOMString qualifiedName);\n  Attr? getNamedItemNS(DOMString? namespace, DOMString localName);\n  [CEReactions] Attr? setNamedItem(Attr attr);\n  [CEReactions] Attr? setNamedItemNS(Attr attr);\n  [CEReactions] Attr removeNamedItem(DOMString qualifiedName);\n  [CEReactions] Attr removeNamedItemNS(DOMString? namespace, DOMString localName);\n};\n\n[Exposed=Window]\ninterface Attr : Node {\n  readonly attribute DOMString? namespaceURI;\n  readonly attribute DOMString? prefix;\n  readonly attribute DOMString localName;\n  readonly attribute DOMString name;\n  [CEReactions] attribute DOMString value;\n\n  readonly attribute Element? ownerElement;\n\n  readonly attribute boolean specified; // useless; always returns true\n};\n\n[Exposed=Window]\ninterface CharacterData : Node {\n  attribute [TreatNullAs=EmptyString] DOMString data;\n  readonly attribute unsigned long length;\n  DOMString substringData(unsigned long offset, unsigned long count);\n  undefined appendData(DOMString data);\n  undefined insertData(unsigned long offset, DOMString data);\n  undefined deleteData(unsigned long offset, unsigned long count);\n  undefined replaceData(unsigned long offset, unsigned long count, DOMString data);\n};\n\n[Constructor(optional DOMString data = ),\n Exposed=Window]\ninterface Text : CharacterData {\n  [NewObject] Text splitText(unsigned long offset);\n  readonly attribute DOMString wholeText;\n};\n\n[Exposed=Window]\ninterface CDATASection : Text {\n};\n\n[Exposed=Window]\ninterface ProcessingInstruction : CharacterData {\n  readonly attribute DOMString target;\n};\n\n[Constructor(optional DOMString data = ),\n Exposed=Window]\ninterface Comment : CharacterData {\n};\n\n[Exposed=Window]\ninterface AbstractRange {\n  readonly attribute Node startContainer;\n  readonly attribute unsigned long startOffset;\n  readonly attribute Node endContainer;\n  readonly attribute unsigned long endOffset;\n  readonly attribute boolean collapsed;\n};\n\n[Exposed=Window]\ninterface StaticRange : AbstractRange {\n};\n\n[Constructor,\n Exposed=Window]\ninterface Range : AbstractRange {\n  readonly attribute Node commonAncestorContainer;\n\n  undefined setStart(Node node, unsigned long offset);\n  undefined setEnd(Node node, unsigned long offset);\n  undefined setStartBefore(Node node);\n  undefined setStartAfter(Node node);\n  undefined setEndBefore(Node node);\n  undefined setEndAfter(Node node);\n  undefined collapse(optional boolean toStart = false);\n  undefined selectNode(Node node);\n  undefined selectNodeContents(Node node);\n\n  const unsigned short START_TO_START = 0;\n  const unsigned short START_TO_END = 1;\n  const unsigned short END_TO_END = 2;\n  const unsigned short END_TO_START = 3;\n  short compareBoundaryPoints(unsigned short how, Range sourceRange);\n\n  [CEReactions] undefined deleteContents();\n  [CEReactions, NewObject] DocumentFragment extractContents();\n  [CEReactions, NewObject] DocumentFragment cloneContents();\n  [CEReactions] undefined insertNode(Node node);\n  [CEReactions] undefined surroundContents(Node newParent);\n\n  [NewObject] Range cloneRange();\n  undefined detach();\n\n  boolean isPointInRange(Node node, unsigned long offset);\n  short comparePoint(Node node, unsigned long offset);\n\n  boolean intersectsNode(Node node);\n\n  stringifier;\n};\n\n[Exposed=Window]\ninterface NodeIterator {\n  [SameObject] readonly attribute Node root;\n  readonly attribute Node referenceNode;\n  readonly attribute boolean pointerBeforeReferenceNode;\n  readonly attribute unsigned long whatToShow;\n  readonly attribute NodeFilter? filter;\n\n  Node? nextNode();\n  Node? previousNode();\n\n  undefined detach();\n};\n\n[Exposed=Window]\ninterface TreeWalker {\n  [SameObject] readonly attribute Node root;\n  readonly attribute unsigned long whatToShow;\n  readonly attribute NodeFilter? filter;\n           attribute Node currentNode;\n\n  Node? parentNode();\n  Node? firstChild();\n  Node? lastChild();\n  Node? previousSibling();\n  Node? nextSibling();\n  Node? previousNode();\n  Node? nextNode();\n};\n\n[Exposed=Window]\ncallback interface NodeFilter {\n  // Constants for acceptNode()\n  const unsigned short FILTER_ACCEPT = 1;\n  const unsigned short FILTER_REJECT = 2;\n  const unsigned short FILTER_SKIP = 3;\n\n  // Constants for whatToShow\n  const unsigned long SHOW_ALL = 0xFFFFFFFF;\n  const unsigned long SHOW_ELEMENT = 0x1;\n  const unsigned long SHOW_ATTRIBUTE = 0x2;\n  const unsigned long SHOW_TEXT = 0x4;\n  const unsigned long SHOW_CDATA_SECTION = 0x8;\n  const unsigned long SHOW_ENTITY_REFERENCE = 0x10; // historical\n  const unsigned long SHOW_ENTITY = 0x20; // historical\n  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;\n  const unsigned long SHOW_COMMENT = 0x80;\n  const unsigned long SHOW_DOCUMENT = 0x100;\n  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;\n  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;\n  const unsigned long SHOW_NOTATION = 0x800; // historical\n\n  unsigned short acceptNode(Node node);\n};\n\n[Exposed=Window]\ninterface DOMTokenList {\n  readonly attribute unsigned long length;\n  getter DOMString? item(unsigned long index);\n  boolean contains(DOMString token);\n  [CEReactions] undefined add(DOMString... tokens);\n  [CEReactions] undefined remove(DOMString... tokens);\n  [CEReactions] boolean toggle(DOMString token, optional boolean force);\n  [CEReactions] boolean replace(DOMString token, DOMString newToken);\n  boolean supports(DOMString token);\n  [CEReactions] stringifier attribute DOMString value;\n  iterable<DOMString>;\n};\n"`,
 right: `"[Constructor(DOMString type, optional EventInit eventInitDict),\n Exposed=(Window,Worker,AudioWorklet)]\ninterface Event {\n  readonly attribute DOMString type;\n  readonly attribute EventTarget? target;\n  readonly attribute EventTarget? srcElement; // historical\n  readonly attribute EventTarget? currentTarget;\n  sequence<EventTarget> composedPath();\n\n  const unsigned short NONE = 0;\n  const unsigned short CAPTURING_PHASE = 1;\n  const unsigned short AT_TARGET = 2;\n  const unsigned short BUBBLING_PHASE = 3;\n  readonly attribute unsigned short eventPhase;\n\n  undefined stopPropagation();\n           attribute boolean cancelBubble; // historical alias of .stopPropagation\n  undefined stopImmediatePropagation();\n\n  readonly attribute boolean bubbles;\n  readonly attribute boolean cancelable;\n           attribute boolean returnValue;  // historical\n  undefined preventDefault();\n  readonly attribute boolean defaultPrevented;\n  readonly attribute boolean composed;\n\n  [Unforgeable] readonly attribute boolean isTrusted;\n  readonly attribute DOMHighResTimeStamp timeStamp;\n\n  undefined initEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false); // historical\n};\n\ndictionary EventInit {\n  boolean bubbles = false;\n  boolean cancelable = false;\n  boolean composed = false;\n};\n\n[Constructor(DOMString type, optional CustomEventInit eventInitDict),\n Exposed=(Window,Worker)]\ninterface CustomEvent : Event {\n  readonly attribute any detail;\n\n  undefined initCustomEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any detail = null);\n};\n\ndictionary CustomEventInit : EventInit {\n  any detail = null;\n};\n\n[Constructor,\n Exposed=(Window,Worker,AudioWorklet)]\ninterface EventTarget {\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options);\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options);\n  boolean dispatchEvent(Event event);\n};\n\ncallback interface EventListener {\n  undefined handleEvent(Event event);\n};\n\ndictionary EventListenerOptions {\n  boolean capture = false;\n};\n\ndictionary AddEventListenerOptions : EventListenerOptions {\n  boolean passive = false;\n  boolean once = false;\n};\n\n[Constructor,\n Exposed=(Window,Worker)]\ninterface AbortController {\n  [SameObject] readonly attribute AbortSignal signal;\n\n  undefined abort();\n};\n\n[Exposed=(Window,Worker)]\ninterface AbortSignal : EventTarget {\n  readonly attribute boolean aborted;\n\n  attribute EventHandler onabort;\n};\n\ninterface mixin NonElementParentNode {\n  Element? getElementById(DOMString elementId);\n};\nDocument includes NonElementParentNode;\nDocumentFragment includes NonElementParentNode;\n\ninterface mixin DocumentOrShadowRoot {\n};\nDocument includes DocumentOrShadowRoot;\nShadowRoot includes DocumentOrShadowRoot;\n\ninterface mixin ParentNode {\n  [SameObject] readonly attribute HTMLCollection children;\n  readonly attribute Element? firstElementChild;\n  readonly attribute Element? lastElementChild;\n  readonly attribute unsigned long childElementCount;\n\n  [CEReactions, Unscopable] undefined prepend((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined append((Node or DOMString)... nodes);\n\n  Element? querySelector(DOMString selectors);\n  [NewObject] NodeList querySelectorAll(DOMString selectors);\n};\nDocument includes ParentNode;\nDocumentFragment includes ParentNode;\nElement includes ParentNode;\n\ninterface mixin NonDocumentTypeChildNode {\n  readonly attribute Element? previousElementSibling;\n  readonly attribute Element? nextElementSibling;\n};\nElement includes NonDocumentTypeChildNode;\nCharacterData includes NonDocumentTypeChildNode;\n\ninterface mixin ChildNode {\n  [CEReactions, Unscopable] undefined before((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined after((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined replaceWith((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined remove();\n};\nDocumentType includes ChildNode;\nElement includes ChildNode;\nCharacterData includes ChildNode;\n\ninterface mixin Slotable {\n  readonly attribute HTMLSlotElement? assignedSlot;\n};\nElement includes Slotable;\nText includes Slotable;\n\n[Exposed=Window]\ninterface NodeList {\n  getter Node? item(unsigned long index);\n  readonly attribute unsigned long length;\n  iterable<Node>;\n};\n\n[Exposed=Window, LegacyUnenumerableNamedProperties]\ninterface HTMLCollection {\n  readonly attribute unsigned long length;\n  getter Element? item(unsigned long index);\n  getter Element? namedItem(DOMString name);\n};\n\n[Constructor(MutationCallback callback),\n Exposed=Window]\ninterface MutationObserver {\n  undefined observe(Node target, optional MutationObserverInit options);\n  undefined disconnect();\n  sequence<MutationRecord> takeRecords();\n};\n\ncallback MutationCallback = undefined (sequence<MutationRecord> mutations, MutationObserver observer);\n\ndictionary MutationObserverInit {\n  boolean childList = false;\n  boolean attributes;\n  boolean characterData;\n  boolean subtree = false;\n  boolean attributeOldValue;\n  boolean characterDataOldValue;\n  sequence<DOMString> attributeFilter;\n};\n\n[Exposed=Window]\ninterface MutationRecord {\n  readonly attribute DOMString type;\n  [SameObject] readonly attribute Node target;\n  [SameObject] readonly attribute NodeList addedNodes;\n  [SameObject] readonly attribute NodeList removedNodes;\n  readonly attribute Node? previousSibling;\n  readonly attribute Node? nextSibling;\n  readonly attribute DOMString? attributeName;\n  readonly attribute DOMString? attributeNamespace;\n  readonly attribute DOMString? oldValue;\n};\n\n[Exposed=Window]\ninterface Node : EventTarget {\n  const unsigned short ELEMENT_NODE = 1;\n  const unsigned short ATTRIBUTE_NODE = 2;\n  const unsigned short TEXT_NODE = 3;\n  const unsigned short CDATA_SECTION_NODE = 4;\n  const unsigned short ENTITY_REFERENCE_NODE = 5; // historical\n  const unsigned short ENTITY_NODE = 6; // historical\n  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;\n  const unsigned short COMMENT_NODE = 8;\n  const unsigned short DOCUMENT_NODE = 9;\n  const unsigned short DOCUMENT_TYPE_NODE = 10;\n  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;\n  const unsigned short NOTATION_NODE = 12; // historical\n  readonly attribute unsigned short nodeType;\n  readonly attribute DOMString nodeName;\n\n  readonly attribute USVString baseURI;\n\n  readonly attribute boolean isConnected;\n  readonly attribute Document? ownerDocument;\n  Node getRootNode(optional GetRootNodeOptions options);\n  readonly attribute Node? parentNode;\n  readonly attribute Element? parentElement;\n  boolean hasChildNodes();\n  [SameObject] readonly attribute NodeList childNodes;\n  readonly attribute Node? firstChild;\n  readonly attribute Node? lastChild;\n  readonly attribute Node? previousSibling;\n  readonly attribute Node? nextSibling;\n\n  [CEReactions] attribute DOMString? nodeValue;\n  [CEReactions] attribute DOMString? textContent;\n  [CEReactions] undefined normalize();\n\n  [CEReactions, NewObject] Node cloneNode(optional boolean deep = false);\n  boolean isEqualNode(Node? otherNode);\n  boolean isSameNode(Node? otherNode); // historical alias of ===\n\n  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;\n  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;\n  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;\n  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;\n  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;\n  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\n  unsigned short compareDocumentPosition(Node other);\n  boolean contains(Node? other);\n\n  DOMString? lookupPrefix(DOMString? namespace);\n  DOMString? lookupNamespaceURI(DOMString? prefix);\n  boolean isDefaultNamespace(DOMString? namespace);\n\n  [CEReactions] Node insertBefore(Node node, Node? child);\n  [CEReactions] Node appendChild(Node node);\n  [CEReactions] Node replaceChild(Node node, Node child);\n  [CEReactions] Node removeChild(Node child);\n};\n\ndictionary GetRootNodeOptions {\n  boolean composed = false;\n};\n\n[Constructor,\n Exposed=Window]\ninterface Document : Node {\n  [SameObject] readonly attribute DOMImplementation implementation;\n  readonly attribute USVString URL;\n  readonly attribute USVString documentURI;\n  readonly attribute USVString origin;\n  readonly attribute DOMString compatMode;\n  readonly attribute DOMString characterSet;\n  readonly attribute DOMString charset; // historical alias of .characterSet\n  readonly attribute DOMString inputEncoding; // historical alias of .characterSet\n  readonly attribute DOMString contentType;\n\n  readonly attribute DocumentType? doctype;\n  readonly attribute Element? documentElement;\n  HTMLCollection getElementsByTagName(DOMString qualifiedName);\n  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);\n  HTMLCollection getElementsByClassName(DOMString classNames);\n\n  [CEReactions, NewObject] Element createElement(DOMString localName, optional (DOMString or ElementCreationOptions) options);\n  [CEReactions, NewObject] Element createElementNS(DOMString? namespace, DOMString qualifiedName, optional (DOMString or ElementCreationOptions) options);\n  [NewObject] DocumentFragment createDocumentFragment();\n  [NewObject] Text createTextNode(DOMString data);\n  [NewObject] CDATASection createCDATASection(DOMString data);\n  [NewObject] Comment createComment(DOMString data);\n  [NewObject] ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);\n\n  [CEReactions, NewObject] Node importNode(Node node, optional boolean deep = false);\n  [CEReactions] Node adoptNode(Node node);\n\n  [NewObject] Attr createAttribute(DOMString localName);\n  [NewObject] Attr createAttributeNS(DOMString? namespace, DOMString qualifiedName);\n\n  [NewObject] Event createEvent(DOMString interface);\n\n  [NewObject] Range createRange();\n\n  // NodeFilter.SHOW_ALL = 0xFFFFFFFF\n  [NewObject] NodeIterator createNodeIterator(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);\n  [NewObject] TreeWalker createTreeWalker(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);\n};\n\n[Exposed=Window]\ninterface XMLDocument : Document {};\n\ndictionary ElementCreationOptions {\n  DOMString is;\n};\n\n[Exposed=Window]\ninterface DOMImplementation {\n  [NewObject] DocumentType createDocumentType(DOMString qualifiedName, DOMString publicId, DOMString systemId);\n  [NewObject] XMLDocument createDocument(DOMString? namespace, [TreatNullAs=EmptyString] DOMString qualifiedName, optional DocumentType? doctype = null);\n  [NewObject] Document createHTMLDocument(optional DOMString title);\n\n  boolean hasFeature(); // useless; always returns true\n};\n\n[Exposed=Window]\ninterface DocumentType : Node {\n  readonly attribute DOMString name;\n  readonly attribute DOMString publicId;\n  readonly attribute DOMString systemId;\n};\n\n[Constructor,\n Exposed=Window]\ninterface DocumentFragment : Node {\n};\n\n[Exposed=Window]\ninterface ShadowRoot : DocumentFragment {\n  readonly attribute ShadowRootMode mode;\n  readonly attribute Element host;\n};\n\nenum ShadowRootMode { \"open\", \"closed\" };\n\n[Exposed=Window]\ninterface Element : Node {\n  readonly attribute DOMString? namespaceURI;\n  readonly attribute DOMString? prefix;\n  readonly attribute DOMString localName;\n  readonly attribute DOMString tagName;\n\n  [CEReactions] attribute DOMString id;\n  [CEReactions] attribute DOMString className;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList classList;\n  [CEReactions, Unscopable] attribute DOMString slot;\n\n  boolean hasAttributes();\n  [SameObject] readonly attribute NamedNodeMap attributes;\n  sequence<DOMString> getAttributeNames();\n  DOMString? getAttribute(DOMString qualifiedName);\n  DOMString? getAttributeNS(DOMString? namespace, DOMString localName);\n  [CEReactions] undefined setAttribute(DOMString qualifiedName, DOMString value);\n  [CEReactions] undefined setAttributeNS(DOMString? namespace, DOMString qualifiedName, DOMString value);\n  [CEReactions] undefined removeAttribute(DOMString qualifiedName);\n  [CEReactions] undefined removeAttributeNS(DOMString? namespace, DOMString localName);\n  boolean hasAttribute(DOMString qualifiedName);\n  boolean hasAttributeNS(DOMString? namespace, DOMString localName);\n\n  Attr? getAttributeNode(DOMString qualifiedName);\n  Attr? getAttributeNodeNS(DOMString? namespace, DOMString localName);\n  [CEReactions] Attr? setAttributeNode(Attr attr);\n  [CEReactions] Attr? setAttributeNodeNS(Attr attr);\n  [CEReactions] Attr removeAttributeNode(Attr attr);\n\n  ShadowRoot attachShadow(ShadowRootInit init);\n  readonly attribute ShadowRoot? shadowRoot;\n\n  Element? closest(DOMString selectors);\n  boolean matches(DOMString selectors);\n  boolean webkitMatchesSelector(DOMString selectors); // historical alias of .matches\n\n  HTMLCollection getElementsByTagName(DOMString qualifiedName);\n  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);\n  HTMLCollection getElementsByClassName(DOMString classNames);\n\n  [CEReactions] Element? insertAdjacentElement(DOMString where, Element element); // historical\n  undefined insertAdjacentText(DOMString where, DOMString data); // historical\n};\n\ndictionary ShadowRootInit {\n  required ShadowRootMode mode;\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface NamedNodeMap {\n  readonly attribute unsigned long length;\n  getter Attr? item(unsigned long index);\n  getter Attr? getNamedItem(DOMString qualifiedName);\n  Attr? getNamedItemNS(DOMString? namespace, DOMString localName);\n  [CEReactions] Attr? setNamedItem(Attr attr);\n  [CEReactions] Attr? setNamedItemNS(Attr attr);\n  [CEReactions] Attr removeNamedItem(DOMString qualifiedName);\n  [CEReactions] Attr removeNamedItemNS(DOMString? namespace, DOMString localName);\n};\n\n[Exposed=Window]\ninterface Attr : Node {\n  readonly attribute DOMString? namespaceURI;\n  readonly attribute DOMString? prefix;\n  readonly attribute DOMString localName;\n  readonly attribute DOMString name;\n  [CEReactions] attribute DOMString value;\n\n  readonly attribute Element? ownerElement;\n\n  readonly attribute boolean specified; // useless; always returns true\n};\n\n[Exposed=Window]\ninterface CharacterData : Node {\n  attribute [TreatNullAs=EmptyString] DOMString data;\n  readonly attribute unsigned long length;\n  DOMString substringData(unsigned long offset, unsigned long count);\n  undefined appendData(DOMString data);\n  undefined insertData(unsigned long offset, DOMString data);\n  undefined deleteData(unsigned long offset, unsigned long count);\n  undefined replaceData(unsigned long offset, unsigned long count, DOMString data);\n};\n\n[Constructor(optional DOMString data = \"\"),\n Exposed=Window]\ninterface Text : CharacterData {\n  [NewObject] Text splitText(unsigned long offset);\n  readonly attribute DOMString wholeText;\n};\n\n[Exposed=Window]\ninterface CDATASection : Text {\n};\n\n[Exposed=Window]\ninterface ProcessingInstruction : CharacterData {\n  readonly attribute DOMString target;\n};\n\n[Constructor(optional DOMString data = \"\"),\n Exposed=Window]\ninterface Comment : CharacterData {\n};\n\n[Exposed=Window]\ninterface AbstractRange {\n  readonly attribute Node startContainer;\n  readonly attribute unsigned long startOffset;\n  readonly attribute Node endContainer;\n  readonly attribute unsigned long endOffset;\n  readonly attribute boolean collapsed;\n};\n\n[Exposed=Window]\ninterface StaticRange : AbstractRange {\n};\n\n[Constructor,\n Exposed=Window]\ninterface Range : AbstractRange {\n  readonly attribute Node commonAncestorContainer;\n\n  undefined setStart(Node node, unsigned long offset);\n  undefined setEnd(Node node, unsigned long offset);\n  undefined setStartBefore(Node node);\n  undefined setStartAfter(Node node);\n  undefined setEndBefore(Node node);\n  undefined setEndAfter(Node node);\n  undefined collapse(optional boolean toStart = false);\n  undefined selectNode(Node node);\n  undefined selectNodeContents(Node node);\n\n  const unsigned short START_TO_START = 0;\n  const unsigned short START_TO_END = 1;\n  const unsigned short END_TO_END = 2;\n  const unsigned short END_TO_START = 3;\n  short compareBoundaryPoints(unsigned short how, Range sourceRange);\n\n  [CEReactions] undefined deleteContents();\n  [CEReactions, NewObject] DocumentFragment extractContents();\n  [CEReactions, NewObject] DocumentFragment cloneContents();\n  [CEReactions] undefined insertNode(Node node);\n  [CEReactions] undefined surroundContents(Node newParent);\n\n  [NewObject] Range cloneRange();\n  undefined detach();\n\n  boolean isPointInRange(Node node, unsigned long offset);\n  short comparePoint(Node node, unsigned long offset);\n\n  boolean intersectsNode(Node node);\n\n  stringifier;\n};\n\n[Exposed=Window]\ninterface NodeIterator {\n  [SameObject] readonly attribute Node root;\n  readonly attribute Node referenceNode;\n  readonly attribute boolean pointerBeforeReferenceNode;\n  readonly attribute unsigned long whatToShow;\n  readonly attribute NodeFilter? filter;\n\n  Node? nextNode();\n  Node? previousNode();\n\n  undefined detach();\n};\n\n[Exposed=Window]\ninterface TreeWalker {\n  [SameObject] readonly attribute Node root;\n  readonly attribute unsigned long whatToShow;\n  readonly attribute NodeFilter? filter;\n           attribute Node currentNode;\n\n  Node? parentNode();\n  Node? firstChild();\n  Node? lastChild();\n  Node? previousSibling();\n  Node? nextSibling();\n  Node? previousNode();\n  Node? nextNode();\n};\n\n[Exposed=Window]\ncallback interface NodeFilter {\n  // Constants for acceptNode()\n  const unsigned short FILTER_ACCEPT = 1;\n  const unsigned short FILTER_REJECT = 2;\n  const unsigned short FILTER_SKIP = 3;\n\n  // Constants for whatToShow\n  const unsigned long SHOW_ALL = 0xFFFFFFFF;\n  const unsigned long SHOW_ELEMENT = 0x1;\n  const unsigned long SHOW_ATTRIBUTE = 0x2;\n  const unsigned long SHOW_TEXT = 0x4;\n  const unsigned long SHOW_CDATA_SECTION = 0x8;\n  const unsigned long SHOW_ENTITY_REFERENCE = 0x10; // historical\n  const unsigned long SHOW_ENTITY = 0x20; // historical\n  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;\n  const unsigned long SHOW_COMMENT = 0x80;\n  const unsigned long SHOW_DOCUMENT = 0x100;\n  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;\n  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;\n  const unsigned long SHOW_NOTATION = 0x800; // historical\n\n  unsigned short acceptNode(Node node);\n};\n\n[Exposed=Window]\ninterface DOMTokenList {\n  readonly attribute unsigned long length;\n  getter DOMString? item(unsigned long index);\n  boolean contains(DOMString token);\n  [CEReactions] undefined add(DOMString... tokens);\n  [CEReactions] undefined remove(DOMString... tokens);\n  [CEReactions] boolean toggle(DOMString token, optional boolean force);\n  [CEReactions] boolean replace(DOMString token, DOMString newToken);\n  boolean supports(DOMString token);\n  [CEReactions] stringifier attribute DOMString value;\n  iterable<DOMString>;\n};\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_dom_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_dom_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_dom_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

---- should_write_same_tests_defs_html_webidl stdout ----
thread 'should_write_same_tests_defs_html_webidl' panicked at 'assertion failed: `(left == right)`
  left: `"[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface HTMLAllCollection {\n  readonly attribute unsigned long length;\n  getter Element (unsigned long index);\n  getter (HTMLCollection or Element)? namedItem(DOMString name);\n  (HTMLCollection or Element)? item(optional DOMString nameOrIndex);\n\n  // Note: HTMLAllCollection objects have a custom [[Call]] internal method and an [[IsHTMLDDA]] internal slot.\n};\n\n[Exposed=Window]\ninterface HTMLFormControlsCollection : HTMLCollection {\n  // inherits length and item()\n  getter (RadioNodeList or Element)? namedItem(DOMString name); // shadows inherited namedItem()\n};\n\n[Exposed=Window]\ninterface RadioNodeList : NodeList {\n  attribute DOMString value;\n};\n\n[Exposed=Window]\ninterface HTMLOptionsCollection : HTMLCollection {\n  // inherits item(), namedItem()\n  [CEReactions] attribute unsigned long length; // shadows inherited length\n  [CEReactions] setter undefined (unsigned long index, HTMLOptionElement? option);\n  [CEReactions] undefined add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);\n  [CEReactions] undefined remove(long index);\n  attribute long selectedIndex;\n};\n\n[Exposed=(Window,Worker)]\ninterface DOMStringList {\n  readonly attribute unsigned long length;\n  getter DOMString? item(unsigned long index);\n  boolean contains(DOMString string);\n};\n\nenum DocumentReadyState { loading, interactive, complete };\ntypedef (HTMLScriptElement or SVGScriptElement) HTMLOrSVGScriptElement;\n\n[OverrideBuiltins]\npartial interface Document {\n  // resource metadata management\n  [PutForwards=href, Unforgeable] readonly attribute Location? location;\n  attribute USVString domain;\n  readonly attribute USVString referrer;\n  attribute USVString cookie;\n  readonly attribute DOMString lastModified;\n  readonly attribute DocumentReadyState readyState;\n\n  // DOM tree accessors\n  getter object (DOMString name);\n  [CEReactions] attribute DOMString title;\n  [CEReactions] attribute DOMString dir;\n  [CEReactions] attribute HTMLElement? body;\n  readonly attribute HTMLHeadElement? head;\n  [SameObject] readonly attribute HTMLCollection images;\n  [SameObject] readonly attribute HTMLCollection embeds;\n  [SameObject] readonly attribute HTMLCollection plugins;\n  [SameObject] readonly attribute HTMLCollection links;\n  [SameObject] readonly attribute HTMLCollection forms;\n  [SameObject] readonly attribute HTMLCollection scripts;\n  NodeList getElementsByName(DOMString elementName);\n  readonly attribute HTMLOrSVGScriptElement? currentScript; // classic scripts in a document tree only\n\n  // dynamic markup insertion\n  [CEReactions] Document open(optional DOMString type, optional DOMString replace = ); // type is ignored\n  WindowProxy open(USVString url, DOMString name, DOMString features);\n  [CEReactions] undefined close();\n  [CEReactions] undefined write(DOMString... text);\n  [CEReactions] undefined writeln(DOMString... text);\n\n  // user interaction\n  readonly attribute WindowProxy? defaultView;\n  readonly attribute Element? activeElement;\n  boolean hasFocus();\n  [CEReactions] attribute DOMString designMode;\n  [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = );\n  boolean queryCommandEnabled(DOMString commandId);\n  boolean queryCommandIndeterm(DOMString commandId);\n  boolean queryCommandState(DOMString commandId);\n  boolean queryCommandSupported(DOMString commandId);\n  DOMString queryCommandValue(DOMString commandId);\n\n  // special event handler IDL attributes that only apply to Document objects\n  [LenientThis] attribute EventHandler onreadystatechange;\n};\nDocument includes GlobalEventHandlers;\nDocument includes DocumentAndElementEventHandlers;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLElement : Element {\n  // metadata attributes\n  [CEReactions] attribute DOMString title;\n  [CEReactions] attribute DOMString lang;\n  [CEReactions] attribute boolean translate;\n  [CEReactions] attribute DOMString dir;\n\n  // user interaction\n  [CEReactions] attribute boolean hidden;\n  undefined click();\n  [CEReactions] attribute DOMString accessKey;\n  readonly attribute DOMString accessKeyLabel;\n  [CEReactions] attribute boolean draggable;\n  [CEReactions] attribute boolean spellcheck;\n  [CEReactions] attribute DOMString autocapitalize;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString innerText;\n};\n\nHTMLElement includes GlobalEventHandlers;\nHTMLElement includes DocumentAndElementEventHandlers;\nHTMLElement includes ElementContentEditable;\n\n// Note: intentionally not [HTMLConstructor]\n[Exposed=Window]\ninterface HTMLUnknownElement : HTMLElement { };\n\ninterface mixin HTMLOrSVGElement {\n  [SameObject] readonly attribute DOMStringMap dataset;\n  attribute DOMString nonce;\n\n  [CEReactions] attribute long tabIndex;\n  undefined focus(optional FocusOptions options = {});\n  undefined blur();\n};\nHTMLElement includes HTMLOrSVGElement;\nSVGElement includes HTMLOrSVGElement;\n\n[Exposed=Window,\n OverrideBuiltins]\ninterface DOMStringMap {\n  getter DOMString (DOMString name);\n  [CEReactions] setter undefined (DOMString name, DOMString value);\n  [CEReactions] deleter undefined (DOMString name);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHtmlElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHeadElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTitleElement : HTMLElement {\n  [CEReactions] attribute DOMString text;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLBaseElement : HTMLElement {\n  [CEReactions] attribute USVString href;\n  [CEReactions] attribute DOMString target;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLinkElement : HTMLElement {\n  [CEReactions] attribute USVString href;\n  [CEReactions] attribute DOMString? crossOrigin;\n  [CEReactions] attribute DOMString rel;\n  [CEReactions] attribute DOMString as; // (default \"\")\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\n  [CEReactions] attribute DOMString media;\n  [CEReactions] attribute DOMString integrity;\n  [CEReactions] attribute DOMString hreflang;\n  [CEReactions] attribute DOMString type;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList sizes;\n  [CEReactions] attribute DOMString referrerPolicy;\n};\nHTMLLinkElement includes LinkStyle;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMetaElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString httpEquiv;\n  [CEReactions] attribute DOMString content;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLStyleElement : HTMLElement {\n  [CEReactions] attribute DOMString media;\n};\nHTMLStyleElement includes LinkStyle;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLBodyElement : HTMLElement {};\n\nHTMLBodyElement includes WindowEventHandlers;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHeadingElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLParagraphElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHRElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLPreElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLQuoteElement : HTMLElement {\n  [CEReactions] attribute USVString cite;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLOListElement : HTMLElement {\n  [CEReactions] attribute boolean reversed;\n  [CEReactions] attribute long start;\n  [CEReactions] attribute DOMString type;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLUListElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMenuElement : HTMLElement {\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLIElement : HTMLElement {\n  [CEReactions] attribute long value;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDListElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDivElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLAnchorElement : HTMLElement {\n  [CEReactions] attribute DOMString target;\n  [CEReactions] attribute DOMString download;\n  [CEReactions] attribute USVString ping;\n  [CEReactions] attribute DOMString rel;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\n  [CEReactions] attribute DOMString hreflang;\n  [CEReactions] attribute DOMString type;\n\n  [CEReactions] attribute DOMString text;\n\n  [CEReactions] attribute DOMString referrerPolicy;\n};\nHTMLAnchorElement includes HTMLHyperlinkElementUtils;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDataElement : HTMLElement {\n  [CEReactions] attribute DOMString value;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTimeElement : HTMLElement {\n  [CEReactions] attribute DOMString dateTime;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSpanElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLBRElement : HTMLElement {};\n\ninterface mixin HTMLHyperlinkElementUtils {\n  [CEReactions] stringifier attribute USVString href;\n  readonly attribute USVString origin;\n  [CEReactions] attribute USVString protocol;\n  [CEReactions] attribute USVString username;\n  [CEReactions] attribute USVString password;\n  [CEReactions] attribute USVString host;\n  [CEReactions] attribute USVString hostname;\n  [CEReactions] attribute USVString port;\n  [CEReactions] attribute USVString pathname;\n  [CEReactions] attribute USVString search;\n  [CEReactions] attribute USVString hash;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLModElement : HTMLElement {\n  [CEReactions] attribute USVString cite;\n  [CEReactions] attribute DOMString dateTime;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLPictureElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSourceElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute USVString srcset;\n  [CEReactions] attribute DOMString sizes;\n  [CEReactions] attribute DOMString media;\n};\n\n[Exposed=Window,\n HTMLConstructor,\n NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]\ninterface HTMLImageElement : HTMLElement {\n  [CEReactions] attribute DOMString alt;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute USVString srcset;\n  [CEReactions] attribute DOMString sizes;\n  [CEReactions] attribute DOMString? crossOrigin;\n  [CEReactions] attribute DOMString useMap;\n  [CEReactions] attribute boolean isMap;\n  [CEReactions] attribute unsigned long width;\n  [CEReactions] attribute unsigned long height;\n  readonly attribute unsigned long naturalWidth;\n  readonly attribute unsigned long naturalHeight;\n  readonly attribute boolean complete;\n  readonly attribute USVString currentSrc;\n  [CEReactions] attribute DOMString referrerPolicy;\n  [CEReactions] attribute DOMString decoding;\n\n  Promise<undefined> decode();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLIFrameElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString srcdoc;\n  [CEReactions] attribute DOMString name;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList sandbox;\n  [CEReactions] attribute boolean allowFullscreen;\n  [CEReactions] attribute boolean allowPaymentRequest;\n  [CEReactions] attribute boolean allowUserMedia;\n  [CEReactions] attribute DOMString width;\n  [CEReactions] attribute DOMString height;\n  [CEReactions] attribute DOMString referrerPolicy;\n  readonly attribute Document? contentDocument;\n  readonly attribute WindowProxy? contentWindow;\n  Document? getSVGDocument();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLEmbedElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString width;\n  [CEReactions] attribute DOMString height;\n  Document? getSVGDocument();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLObjectElement : HTMLElement {\n  [CEReactions] attribute USVString data;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute boolean typeMustMatch;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString useMap;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString width;\n  [CEReactions] attribute DOMString height;\n  readonly attribute Document? contentDocument;\n  readonly attribute WindowProxy? contentWindow;\n  Document? getSVGDocument();\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLParamElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString value;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLVideoElement : HTMLMediaElement {\n  [CEReactions] attribute unsigned long width;\n  [CEReactions] attribute unsigned long height;\n  readonly attribute unsigned long videoWidth;\n  readonly attribute unsigned long videoHeight;\n  [CEReactions] attribute USVString poster;\n  [CEReactions] attribute boolean playsInline;\n};\n\n[Exposed=Window,\n HTMLConstructor,\n NamedConstructor=Audio(optional DOMString src)]\ninterface HTMLAudioElement : HTMLMediaElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTrackElement : HTMLElement {\n  [CEReactions] attribute DOMString kind;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString srclang;\n  [CEReactions] attribute DOMString label;\n  [CEReactions] attribute boolean default;\n\n  const unsigned short NONE = 0;\n  const unsigned short LOADING = 1;\n  const unsigned short LOADED = 2;\n  const unsigned short ERROR = 3;\n  readonly attribute unsigned short readyState;\n\n  readonly attribute TextTrack track;\n};\n\nenum CanPlayTypeResult {  /* empty string */, maybe, probably };\ntypedef (MediaStream or MediaSource or Blob) MediaProvider;\n\n[Exposed=Window]\ninterface HTMLMediaElement : HTMLElement {\n\n  // error state\n  readonly attribute MediaError? error;\n\n  // network state\n  [CEReactions] attribute USVString src;\n  attribute MediaProvider? srcObject;\n  readonly attribute USVString currentSrc;\n  [CEReactions] attribute DOMString? crossOrigin;\n  const unsigned short NETWORK_EMPTY = 0;\n  const unsigned short NETWORK_IDLE = 1;\n  const unsigned short NETWORK_LOADING = 2;\n  const unsigned short NETWORK_NO_SOURCE = 3;\n  readonly attribute unsigned short networkState;\n  [CEReactions] attribute DOMString preload;\n  readonly attribute TimeRanges buffered;\n  undefined load();\n  CanPlayTypeResult canPlayType(DOMString type);\n\n  // ready state\n  const unsigned short HAVE_NOTHING = 0;\n  const unsigned short HAVE_METADATA = 1;\n  const unsigned short HAVE_CURRENT_DATA = 2;\n  const unsigned short HAVE_FUTURE_DATA = 3;\n  const unsigned short HAVE_ENOUGH_DATA = 4;\n  readonly attribute unsigned short readyState;\n  readonly attribute boolean seeking;\n\n  // playback state\n  attribute double currentTime;\n  undefined fastSeek(double time);\n  readonly attribute unrestricted double duration;\n  object getStartDate();\n  readonly attribute boolean paused;\n  attribute double defaultPlaybackRate;\n  attribute double playbackRate;\n  readonly attribute TimeRanges played;\n  readonly attribute TimeRanges seekable;\n  readonly attribute boolean ended;\n  [CEReactions] attribute boolean autoplay;\n  [CEReactions] attribute boolean loop;\n  Promise<undefined> play();\n  undefined pause();\n\n  // controls\n  [CEReactions] attribute boolean controls;\n  attribute double volume;\n  attribute boolean muted;\n  [CEReactions] attribute boolean defaultMuted;\n\n  // tracks\n  [SameObject] readonly attribute AudioTrackList audioTracks;\n  [SameObject] readonly attribute VideoTrackList videoTracks;\n  [SameObject] readonly attribute TextTrackList textTracks;\n  TextTrack addTextTrack(TextTrackKind kind, optional DOMString label = , optional DOMString language = );\n};\n\n[Exposed=Window]\ninterface MediaError {\n  const unsigned short MEDIA_ERR_ABORTED = 1;\n  const unsigned short MEDIA_ERR_NETWORK = 2;\n  const unsigned short MEDIA_ERR_DECODE = 3;\n  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\n\n  readonly attribute unsigned short code;\n  readonly attribute DOMString message;\n};\n\n[Exposed=Window]\ninterface AudioTrackList : EventTarget {\n  readonly attribute unsigned long length;\n  getter AudioTrack (unsigned long index);\n  AudioTrack? getTrackById(DOMString id);\n\n  attribute EventHandler onchange;\n  attribute EventHandler onaddtrack;\n  attribute EventHandler onremovetrack;\n};\n\n[Exposed=Window]\ninterface AudioTrack {\n  readonly attribute DOMString id;\n  readonly attribute DOMString kind;\n  readonly attribute DOMString label;\n  readonly attribute DOMString language;\n  attribute boolean enabled;\n};\n\n[Exposed=Window]\ninterface VideoTrackList : EventTarget {\n  readonly attribute unsigned long length;\n  getter VideoTrack (unsigned long index);\n  VideoTrack? getTrackById(DOMString id);\n  readonly attribute long selectedIndex;\n\n  attribute EventHandler onchange;\n  attribute EventHandler onaddtrack;\n  attribute EventHandler onremovetrack;\n};\n\n[Exposed=Window]\ninterface VideoTrack {\n  readonly attribute DOMString id;\n  readonly attribute DOMString kind;\n  readonly attribute DOMString label;\n  readonly attribute DOMString language;\n  attribute boolean selected;\n};\n\n[Exposed=Window]\ninterface TextTrackList : EventTarget {\n  readonly attribute unsigned long length;\n  getter TextTrack (unsigned long index);\n  TextTrack? getTrackById(DOMString id);\n\n  attribute EventHandler onchange;\n  attribute EventHandler onaddtrack;\n  attribute EventHandler onremovetrack;\n};\n\nenum TextTrackMode { disabled,  hidden,  showing };\nenum TextTrackKind { subtitles,  captions,  descriptions,  chapters,  metadata };\n\n[Exposed=Window]\ninterface TextTrack : EventTarget {\n  readonly attribute TextTrackKind kind;\n  readonly attribute DOMString label;\n  readonly attribute DOMString language;\n\n  readonly attribute DOMString id;\n  readonly attribute DOMString inBandMetadataTrackDispatchType;\n\n  attribute TextTrackMode mode;\n\n  readonly attribute TextTrackCueList? cues;\n  readonly attribute TextTrackCueList? activeCues;\n\n  undefined addCue(TextTrackCue cue);\n  undefined removeCue(TextTrackCue cue);\n\n  attribute EventHandler oncuechange;\n};\n\n[Exposed=Window]\ninterface TextTrackCueList {\n  readonly attribute unsigned long length;\n  getter TextTrackCue (unsigned long index);\n  TextTrackCue? getCueById(DOMString id);\n};\n\n[Exposed=Window]\ninterface TextTrackCue : EventTarget {\n  readonly attribute TextTrack? track;\n\n  attribute DOMString id;\n  attribute double startTime;\n  attribute double endTime;\n  attribute boolean pauseOnExit;\n\n  attribute EventHandler onenter;\n  attribute EventHandler onexit;\n};\n\n[Exposed=Window]\ninterface TimeRanges {\n  readonly attribute unsigned long length;\n  double start(unsigned long index);\n  double end(unsigned long index);\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional TrackEventInit eventInitDict = {})]\ninterface TrackEvent : Event {\n  readonly attribute (VideoTrack or AudioTrack or TextTrack)? track;\n};\n\ndictionary TrackEventInit : EventInit {\n  (VideoTrack or AudioTrack or TextTrack)? track = null;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMapElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [SameObject] readonly attribute HTMLCollection areas;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLAreaElement : HTMLElement {\n  [CEReactions] attribute DOMString alt;\n  [CEReactions] attribute DOMString coords;\n  [CEReactions] attribute DOMString shape;\n  [CEReactions] attribute DOMString target;\n  [CEReactions] attribute DOMString download;\n  [CEReactions] attribute USVString ping;\n  [CEReactions] attribute DOMString rel;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\n  [CEReactions] attribute DOMString referrerPolicy;\n};\nHTMLAreaElement includes HTMLHyperlinkElementUtils;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableElement : HTMLElement {\n  [CEReactions] attribute HTMLTableCaptionElement? caption;\n  HTMLTableCaptionElement createCaption();\n  [CEReactions] undefined deleteCaption();\n\n  [CEReactions] attribute HTMLTableSectionElement? tHead;\n  HTMLTableSectionElement createTHead();\n  [CEReactions] undefined deleteTHead();\n\n  [CEReactions] attribute HTMLTableSectionElement? tFoot;\n  HTMLTableSectionElement createTFoot();\n  [CEReactions] undefined deleteTFoot();\n\n  [SameObject] readonly attribute HTMLCollection tBodies;\n  HTMLTableSectionElement createTBody();\n\n  [SameObject] readonly attribute HTMLCollection rows;\n  HTMLTableRowElement insertRow(optional long index = -1);\n  [CEReactions] undefined deleteRow(long index);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableCaptionElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableColElement : HTMLElement {\n  [CEReactions] attribute unsigned long span;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableSectionElement : HTMLElement {\n  [SameObject] readonly attribute HTMLCollection rows;\n  HTMLTableRowElement insertRow(optional long index = -1);\n  [CEReactions] undefined deleteRow(long index);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableRowElement : HTMLElement {\n  readonly attribute long rowIndex;\n  readonly attribute long sectionRowIndex;\n  [SameObject] readonly attribute HTMLCollection cells;\n  HTMLTableCellElement insertCell(optional long index = -1);\n  [CEReactions] undefined deleteCell(long index);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableCellElement : HTMLElement {\n  [CEReactions] attribute unsigned long colSpan;\n  [CEReactions] attribute unsigned long rowSpan;\n  [CEReactions] attribute DOMString headers;\n  readonly attribute long cellIndex;\n\n  [CEReactions] attribute DOMString scope; // only conforming for th elements\n  [CEReactions] attribute DOMString abbr;  // only conforming for th elements\n};\n\n[Exposed=Window,\n OverrideBuiltins,\n LegacyUnenumerableNamedProperties,\n HTMLConstructor]\ninterface HTMLFormElement : HTMLElement {\n  [CEReactions] attribute DOMString acceptCharset;\n  [CEReactions] attribute USVString action;\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute DOMString enctype;\n  [CEReactions] attribute DOMString encoding;\n  [CEReactions] attribute DOMString method;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute boolean noValidate;\n  [CEReactions] attribute DOMString target;\n\n  [SameObject] readonly attribute HTMLFormControlsCollection elements;\n  readonly attribute unsigned long length;\n  getter Element (unsigned long index);\n  getter (RadioNodeList or Element) (DOMString name);\n\n  undefined submit();\n  [CEReactions] undefined reset();\n  boolean checkValidity();\n  boolean reportValidity();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLabelElement : HTMLElement {\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString htmlFor;\n  readonly attribute HTMLElement? control;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLInputElement : HTMLElement {\n  [CEReactions] attribute DOMString accept;\n  [CEReactions] attribute DOMString alt;\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute boolean defaultChecked;\n  attribute boolean checked;\n  [CEReactions] attribute DOMString dirName;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  attribute FileList? files;\n  [CEReactions] attribute USVString formAction;\n  [CEReactions] attribute DOMString formEnctype;\n  [CEReactions] attribute DOMString formMethod;\n  [CEReactions] attribute boolean formNoValidate;\n  [CEReactions] attribute DOMString formTarget;\n  [CEReactions] attribute unsigned long height;\n  attribute boolean indeterminate;\n  readonly attribute HTMLElement? list;\n  [CEReactions] attribute DOMString max;\n  [CEReactions] attribute long maxLength;\n  [CEReactions] attribute DOMString min;\n  [CEReactions] attribute long minLength;\n  [CEReactions] attribute boolean multiple;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString pattern;\n  [CEReactions] attribute DOMString placeholder;\n  [CEReactions] attribute boolean readOnly;\n  [CEReactions] attribute boolean required;\n  [CEReactions] attribute unsigned long size;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString step;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString defaultValue;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString value;\n  attribute object? valueAsDate;\n  attribute unrestricted double valueAsNumber;\n  [CEReactions] attribute unsigned long width;\n\n  undefined stepUp(optional long n = 1);\n  undefined stepDown(optional long n = 1);\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList? labels;\n\n  undefined select();\n  attribute unsigned long? selectionStart;\n  attribute unsigned long? selectionEnd;\n  attribute DOMString? selectionDirection;\n  undefined setRangeText(DOMString replacement);\n  undefined setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = preserve);\n  undefined setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLButtonElement : HTMLElement {\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute USVString formAction;\n  [CEReactions] attribute DOMString formEnctype;\n  [CEReactions] attribute DOMString formMethod;\n  [CEReactions] attribute boolean formNoValidate;\n  [CEReactions] attribute DOMString formTarget;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString value;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSelectElement : HTMLElement {\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute boolean multiple;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute boolean required;\n  [CEReactions] attribute unsigned long size;\n\n  readonly attribute DOMString type;\n\n  [SameObject] readonly attribute HTMLOptionsCollection options;\n  [CEReactions] attribute unsigned long length;\n  getter Element? item(unsigned long index);\n  HTMLOptionElement? namedItem(DOMString name);\n  [CEReactions] undefined add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);\n  [CEReactions] undefined remove(); // ChildNode overload\n  [CEReactions] undefined remove(long index);\n  [CEReactions] setter undefined (unsigned long index, HTMLOptionElement? option);\n\n  [SameObject] readonly attribute HTMLCollection selectedOptions;\n  attribute long selectedIndex;\n  attribute DOMString value;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDataListElement : HTMLElement {\n  [SameObject] readonly attribute HTMLCollection options;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLOptGroupElement : HTMLElement {\n  [CEReactions] attribute boolean disabled;\n  [CEReactions] attribute DOMString label;\n};\n\n[Exposed=Window,\n HTMLConstructor,\n NamedConstructor=Option(optional DOMString text = , optional DOMString value, optional boolean defaultSelected = false, optional boolean selected = false)]\ninterface HTMLOptionElement : HTMLElement {\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString label;\n  [CEReactions] attribute boolean defaultSelected;\n  attribute boolean selected;\n  [CEReactions] attribute DOMString value;\n\n  [CEReactions] attribute DOMString text;\n  readonly attribute long index;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTextAreaElement : HTMLElement {\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute unsigned long cols;\n  [CEReactions] attribute DOMString dirName;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute long maxLength;\n  [CEReactions] attribute long minLength;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString placeholder;\n  [CEReactions] attribute boolean readOnly;\n  [CEReactions] attribute boolean required;\n  [CEReactions] attribute unsigned long rows;\n  [CEReactions] attribute DOMString wrap;\n\n  readonly attribute DOMString type;\n  [CEReactions] attribute DOMString defaultValue;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString value;\n  readonly attribute unsigned long textLength;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n\n  undefined select();\n  attribute unsigned long selectionStart;\n  attribute unsigned long selectionEnd;\n  attribute DOMString selectionDirection;\n  undefined setRangeText(DOMString replacement);\n  undefined setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = preserve);\n  undefined setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLOutputElement : HTMLElement {\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList htmlFor;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString name;\n\n  readonly attribute DOMString type;\n  [CEReactions] attribute DOMString defaultValue;\n  [CEReactions] attribute DOMString value;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLProgressElement : HTMLElement {\n  [CEReactions] attribute double value;\n  [CEReactions] attribute double max;\n  readonly attribute double position;\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMeterElement : HTMLElement {\n  [CEReactions] attribute double value;\n  [CEReactions] attribute double min;\n  [CEReactions] attribute double max;\n  [CEReactions] attribute double low;\n  [CEReactions] attribute double high;\n  [CEReactions] attribute double optimum;\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFieldSetElement : HTMLElement {\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString name;\n\n  readonly attribute DOMString type;\n\n  [SameObject] readonly attribute HTMLCollection elements;\n\n  readonly attribute boolean willValidate;\n  [SameObject] readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLegendElement : HTMLElement {\n  readonly attribute HTMLFormElement? form;\n};\n\nenum SelectionMode {\n  select,\n  start,\n  end,\n  preserve // default\n};\n\n[Exposed=Window]\ninterface ValidityState {\n  readonly attribute boolean valueMissing;\n  readonly attribute boolean typeMismatch;\n  readonly attribute boolean patternMismatch;\n  readonly attribute boolean tooLong;\n  readonly attribute boolean tooShort;\n  readonly attribute boolean rangeUnderflow;\n  readonly attribute boolean rangeOverflow;\n  readonly attribute boolean stepMismatch;\n  readonly attribute boolean badInput;\n  readonly attribute boolean customError;\n  readonly attribute boolean valid;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDetailsElement : HTMLElement {\n  [CEReactions] attribute boolean open;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDialogElement : HTMLElement {\n  [CEReactions] attribute boolean open;\n  attribute DOMString returnValue;\n  [CEReactions] undefined show();\n  [CEReactions] undefined showModal();\n  [CEReactions] undefined close(optional DOMString returnValue);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLScriptElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute boolean noModule;\n  [CEReactions] attribute boolean async;\n  [CEReactions] attribute boolean defer;\n  [CEReactions] attribute DOMString? crossOrigin;\n  [CEReactions] attribute DOMString text;\n  [CEReactions] attribute DOMString integrity;\n\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTemplateElement : HTMLElement {\n  readonly attribute DocumentFragment content;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSlotElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  sequence<Node> assignedNodes(optional AssignedNodesOptions options = {});\n  sequence<Element> assignedElements(optional AssignedNodesOptions options = {});\n};\n\ndictionary AssignedNodesOptions {\n  boolean flatten = false;\n};\n\ntypedef (CanvasRenderingContext2D or ImageBitmapRenderingContext or WebGLRenderingContext) RenderingContext;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLCanvasElement : HTMLElement {\n  [CEReactions] attribute unsigned long width;\n  [CEReactions] attribute unsigned long height;\n\n  RenderingContext? getContext(DOMString contextId, optional any options = null);\n\n  USVString toDataURL(optional DOMString type, optional any quality);\n  undefined toBlob(BlobCallback _callback, optional DOMString type, optional any quality);\n  OffscreenCanvas transferControlToOffscreen();\n};\n\ncallback BlobCallback = undefined (Blob? blob);\n\ntypedef (HTMLImageElement or\n         SVGImageElement) HTMLOrSVGImageElement;\n\ntypedef (HTMLOrSVGImageElement or\n         HTMLVideoElement or\n         HTMLCanvasElement or\n         ImageBitmap or\n         OffscreenCanvas) CanvasImageSource;\n\nenum CanvasFillRule { nonzero, evenodd };\n\ndictionary CanvasRenderingContext2DSettings {\n  boolean alpha = true;\n};\n\nenum ImageSmoothingQuality { low, medium, high };\n\n[Exposed=Window]\ninterface CanvasRenderingContext2D {\n  // back-reference to the canvas\n  readonly attribute HTMLCanvasElement canvas;\n};\nCanvasRenderingContext2D includes CanvasState;\nCanvasRenderingContext2D includes CanvasTransform;\nCanvasRenderingContext2D includes CanvasCompositing;\nCanvasRenderingContext2D includes CanvasImageSmoothing;\nCanvasRenderingContext2D includes CanvasFillStrokeStyles;\nCanvasRenderingContext2D includes CanvasShadowStyles;\nCanvasRenderingContext2D includes CanvasFilters;\nCanvasRenderingContext2D includes CanvasRect;\nCanvasRenderingContext2D includes CanvasDrawPath;\nCanvasRenderingContext2D includes CanvasUserInterface;\nCanvasRenderingContext2D includes CanvasText;\nCanvasRenderingContext2D includes CanvasDrawImage;\nCanvasRenderingContext2D includes CanvasImageData;\nCanvasRenderingContext2D includes CanvasPathDrawingStyles;\nCanvasRenderingContext2D includes CanvasTextDrawingStyles;\nCanvasRenderingContext2D includes CanvasPath;\n\ninterface mixin CanvasState {\n  // state\n  undefined save(); // push state on state stack\n  undefined restore(); // pop state stack and restore state\n};\n\ninterface mixin CanvasTransform {\n  // transformations (default transform is the identity matrix)\n  undefined scale(unrestricted double x, unrestricted double y);\n  undefined rotate(unrestricted double angle);\n  undefined translate(unrestricted double x, unrestricted double y);\n  undefined transform(unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f);\n\n  [NewObject] DOMMatrix getTransform();\n  undefined setTransform(unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f);\n  undefined setTransform(optional DOMMatrix2DInit transform = {});\n  undefined resetTransform();\n\n};\n\ninterface mixin CanvasCompositing {\n  // compositing\n  attribute unrestricted double globalAlpha; // (default 1.0)\n  attribute DOMString globalCompositeOperation; // (default source-over)\n};\n\ninterface mixin CanvasImageSmoothing {\n  // image smoothing\n  attribute boolean imageSmoothingEnabled; // (default true)\n  attribute ImageSmoothingQuality imageSmoothingQuality; // (default low)\n\n};\n\ninterface mixin CanvasFillStrokeStyles {\n  // colors and styles (see also the CanvasPathDrawingStyles and CanvasTextDrawingStyles interfaces)\n  attribute (DOMString or CanvasGradient or CanvasPattern) strokeStyle; // (default black)\n  attribute (DOMString or CanvasGradient or CanvasPattern) fillStyle; // (default black)\n  CanvasGradient createLinearGradient(double x0, double y0, double x1, double y1);\n  CanvasGradient createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1);\n  CanvasPattern? createPattern(CanvasImageSource image, [TreatNullAs=EmptyString] DOMString repetition);\n\n};\n\ninterface mixin CanvasShadowStyles {\n  // shadows\n  attribute unrestricted double shadowOffsetX; // (default 0)\n  attribute unrestricted double shadowOffsetY; // (default 0)\n  attribute unrestricted double shadowBlur; // (default 0)\n  attribute DOMString shadowColor; // (default transparent black)\n};\n\ninterface mixin CanvasFilters {\n  // filters\n  attribute DOMString filter; // (default \"none\")\n};\n\ninterface mixin CanvasRect {\n  // rects\n  undefined clearRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n  undefined fillRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n  undefined strokeRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n};\n\ninterface mixin CanvasDrawPath {\n  // path API (see also CanvasPath)\n  undefined beginPath();\n  undefined fill(optional CanvasFillRule fillRule = nonzero);\n  undefined fill(Path2D path, optional CanvasFillRule fillRule = nonzero);\n  undefined stroke();\n  undefined stroke(Path2D path);\n  undefined clip(optional CanvasFillRule fillRule = nonzero);\n  undefined clip(Path2D path, optional CanvasFillRule fillRule = nonzero);\n  undefined resetClip();\n  boolean isPointInPath(unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = nonzero);\n  boolean isPointInPath(Path2D path, unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = nonzero);\n  boolean isPointInStroke(unrestricted double x, unrestricted double y);\n  boolean isPointInStroke(Path2D path, unrestricted double x, unrestricted double y);\n};\n\ninterface mixin CanvasUserInterface {\n  undefined drawFocusIfNeeded(Element element);\n  undefined drawFocusIfNeeded(Path2D path, Element element);\n  undefined scrollPathIntoView();\n  undefined scrollPathIntoView(Path2D path);\n};\n\ninterface mixin CanvasText {\n  // text (see also the CanvasPathDrawingStyles and CanvasTextDrawingStyles interfaces)\n  undefined fillText(DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth);\n  undefined strokeText(DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth);\n  TextMetrics measureText(DOMString text);\n};\n\ninterface mixin CanvasDrawImage {\n  // drawing images\n  undefined drawImage(CanvasImageSource image, unrestricted double dx, unrestricted double dy);\n  undefined drawImage(CanvasImageSource image, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh);\n  undefined drawImage(CanvasImageSource image, unrestricted double sx, unrestricted double sy, unrestricted double sw, unrestricted double sh, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh);\n};\n\ninterface mixin CanvasImageData {\n  // pixel manipulation\n  ImageData createImageData(long sw, long sh);\n  ImageData createImageData(ImageData imagedata);\n  ImageData getImageData(long sx, long sy, long sw, long sh);\n  undefined putImageData(ImageData imagedata, long dx, long dy);\n  undefined putImageData(ImageData imagedata, long dx, long dy, long dirtyX, long dirtyY, long dirtyWidth, long dirtyHeight);\n};\n\nenum CanvasLineCap { butt, round, square };\nenum CanvasLineJoin { round, bevel, miter };\nenum CanvasTextAlign { start, end, left, right, center };\nenum CanvasTextBaseline { top, hanging, middle, alphabetic, ideographic, bottom };\nenum CanvasDirection { ltr, rtl, inherit };\n\ninterface mixin CanvasPathDrawingStyles {\n  // line caps/joins\n  attribute unrestricted double lineWidth; // (default 1)\n  attribute CanvasLineCap lineCap; // (default \"butt\")\n  attribute CanvasLineJoin lineJoin; // (default \"miter\")\n  attribute unrestricted double miterLimit; // (default 10)\n\n  // dashed lines\n  undefined setLineDash(sequence<unrestricted double> segments); // default empty\n  sequence<unrestricted double> getLineDash();\n  attribute unrestricted double lineDashOffset;\n};\n\ninterface mixin CanvasTextDrawingStyles {\n  // text\n  attribute DOMString font; // (default 10px sans-serif)\n  attribute CanvasTextAlign textAlign; // (default: \"start\")\n  attribute CanvasTextBaseline textBaseline; // (default: \"alphabetic\")\n  attribute CanvasDirection direction; // (default: \"inherit\")\n};\n\ninterface mixin CanvasPath {\n  // shared path API methods\n  undefined closePath();\n  undefined moveTo(unrestricted double x, unrestricted double y);\n  undefined lineTo(unrestricted double x, unrestricted double y);\n  undefined quadraticCurveTo(unrestricted double cpx, unrestricted double cpy, unrestricted double x, unrestricted double y);\n  undefined bezierCurveTo(unrestricted double cp1x, unrestricted double cp1y, unrestricted double cp2x, unrestricted double cp2y, unrestricted double x, unrestricted double y);\n  undefined arcTo(unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radius); \n  undefined rect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n  undefined arc(unrestricted double x, unrestricted double y, unrestricted double radius, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false);\n  undefined ellipse(unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false);\n};\n\n[Exposed=(Window,Worker)]\ninterface CanvasGradient {\n  // opaque object\n  undefined addColorStop(double offset, DOMString color);\n};\n\n[Exposed=(Window,Worker)]\ninterface CanvasPattern {\n  // opaque object\n  undefined setTransform(optional DOMMatrix2DInit transform = {});\n};\n\n[Exposed=Window]\ninterface TextMetrics {\n  // x-direction\n  readonly attribute double width; // advance width\n  readonly attribute double actualBoundingBoxLeft;\n  readonly attribute double actualBoundingBoxRight;\n\n  // y-direction\n  readonly attribute double fontBoundingBoxAscent;\n  readonly attribute double fontBoundingBoxDescent;\n  readonly attribute double actualBoundingBoxAscent;\n  readonly attribute double actualBoundingBoxDescent;\n  readonly attribute double emHeightAscent;\n  readonly attribute double emHeightDescent;\n  readonly attribute double hangingBaseline;\n  readonly attribute double alphabeticBaseline;\n  readonly attribute double ideographicBaseline;\n};\n\n[Constructor(unsigned long sw, unsigned long sh),\n Constructor(Uint8ClampedArray data, unsigned long sw, optional unsigned long sh),\n Exposed=(Window,Worker),\n Serializable]\ninterface ImageData {\n  readonly attribute unsigned long width;\n  readonly attribute unsigned long height;\n  readonly attribute Uint8ClampedArray data;\n};\n\n[Constructor(optional (Path2D or DOMString) path),\n Exposed=(Window,Worker)]\ninterface Path2D {\n  undefined addPath(Path2D path, optional DOMMatrix2DInit transform = {});\n};\nPath2D includes CanvasPath;\n\n[Exposed=Window]\ninterface ImageBitmapRenderingContext {\n  readonly attribute HTMLCanvasElement canvas;\n  undefined transferFromImageBitmap(ImageBitmap? bitmap);\n};\n\ndictionary ImageBitmapRenderingContextSettings {\n  boolean alpha = true;\n};\n\ntypedef (OffscreenCanvasRenderingContext2D or\n        WebGLRenderingContext) OffscreenRenderingContext;\n\ndictionary ImageEncodeOptions {\n  DOMString type = image/png;\n  unrestricted double quality = 1.0;\n};\n\nenum OffscreenRenderingContextId { 2d, webgl };\n\n[Constructor([EnforceRange] unsigned long long width, [EnforceRange] unsigned long long height), Exposed=(Window,Worker), Transferable]\ninterface OffscreenCanvas : EventTarget {\n  attribute unsigned long long width;\n  attribute unsigned long long height;\n\n  OffscreenRenderingContext? getContext(OffscreenRenderingContextId contextId, optional any options = null);\n  ImageBitmap transferToImageBitmap();\n  Promise<Blob> convertToBlob(optional ImageEncodeOptions options = {});\n};\n\n[Exposed=(Window,Worker)]\ninterface OffscreenCanvasRenderingContext2D {\n  undefined commit();\n  readonly attribute OffscreenCanvas canvas;\n};\n\nOffscreenCanvasRenderingContext2D includes CanvasState;\nOffscreenCanvasRenderingContext2D includes CanvasTransform;\nOffscreenCanvasRenderingContext2D includes CanvasCompositing;\nOffscreenCanvasRenderingContext2D includes CanvasImageSmoothing;\nOffscreenCanvasRenderingContext2D includes CanvasFillStrokeStyles;\nOffscreenCanvasRenderingContext2D includes CanvasShadowStyles;\nOffscreenCanvasRenderingContext2D includes CanvasFilters;\nOffscreenCanvasRenderingContext2D includes CanvasRect;\nOffscreenCanvasRenderingContext2D includes CanvasDrawPath;\nOffscreenCanvasRenderingContext2D includes CanvasDrawImage;\nOffscreenCanvasRenderingContext2D includes CanvasImageData;\nOffscreenCanvasRenderingContext2D includes CanvasPathDrawingStyles;\nOffscreenCanvasRenderingContext2D includes CanvasPath;\n\n[Exposed=Window]\ninterface CustomElementRegistry {\n  [CEReactions] undefined define(DOMString name, Function constructor, optional ElementDefinitionOptions options = {});\n  any get(DOMString name);\n  Promise<undefined> whenDefined(DOMString name);\n  [CEReactions] undefined upgrade(Node root);\n};\n\ndictionary ElementDefinitionOptions {\n  DOMString extends;\n};\n\ndictionary FocusOptions {\n  boolean preventScroll = false;\n};\n\ninterface mixin ElementContentEditable {\n  [CEReactions] attribute DOMString contentEditable;\n  readonly attribute boolean isContentEditable;\n  [CEReactions] attribute DOMString inputMode;\n};\n\n[Exposed=Window,\n Constructor]\ninterface DataTransfer {\n  attribute DOMString dropEffect;\n  attribute DOMString effectAllowed;\n\n  [SameObject] readonly attribute DataTransferItemList items;\n\n  undefined setDragImage(Element image, long x, long y);\n\n  /* old interface */\n  readonly attribute FrozenArray<DOMString> types;\n  DOMString getData(DOMString format);\n  undefined setData(DOMString format, DOMString data);\n  undefined clearData(optional DOMString format);\n  [SameObject] readonly attribute FileList files;\n};\n\n[Exposed=Window]\ninterface DataTransferItemList {\n  readonly attribute unsigned long length;\n  getter DataTransferItem (unsigned long index);\n  DataTransferItem? add(DOMString data, DOMString type);\n  DataTransferItem? add(File data);\n  undefined remove(unsigned long index);\n  undefined clear();\n};\n\n[Exposed=Window]\ninterface DataTransferItem {\n  readonly attribute DOMString kind;\n  readonly attribute DOMString type;\n  undefined getAsString(FunctionStringCallback? _callback);\n  File? getAsFile();\n};\n\ncallback FunctionStringCallback = undefined (DOMString data);\n\n[Exposed=Window,\n Constructor(DOMString type, optional DragEventInit eventInitDict = {})]\ninterface DragEvent : MouseEvent {\n  readonly attribute DataTransfer? dataTransfer;\n};\n\ndictionary DragEventInit : MouseEventInit {\n  DataTransfer? dataTransfer = null;\n};\n\n[Global=Window,\n Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface Window : EventTarget {\n  // the current browsing context\n  [Unforgeable] readonly attribute WindowProxy window;\n  [Replaceable] readonly attribute WindowProxy self;\n  [Unforgeable] readonly attribute Document document;\n  attribute DOMString name; \n  [PutForwards=href, Unforgeable] readonly attribute Location location;\n  readonly attribute History history;\n  readonly attribute CustomElementRegistry customElements;\n  [Replaceable] readonly attribute BarProp locationbar;\n  [Replaceable] readonly attribute BarProp menubar;\n  [Replaceable] readonly attribute BarProp personalbar;\n  [Replaceable] readonly attribute BarProp scrollbars;\n  [Replaceable] readonly attribute BarProp statusbar;\n  [Replaceable] readonly attribute BarProp toolbar;\n  attribute DOMString status;\n  undefined close();\n  readonly attribute boolean closed;\n  undefined stop();\n  undefined focus();\n  undefined blur();\n\n  // other browsing contexts\n  [Replaceable] readonly attribute WindowProxy frames;\n  [Replaceable] readonly attribute unsigned long length;\n  [Unforgeable] readonly attribute WindowProxy? top;\n  attribute any opener;\n  [Replaceable] readonly attribute WindowProxy? parent;\n  readonly attribute Element? frameElement;\n  WindowProxy? open(optional USVString url = about:blank, optional DOMString target = _blank, optional [TreatNullAs=EmptyString] DOMString features = );\n  getter object (DOMString name);\n  // Since this is the global object, the IDL named getter adds a NamedPropertiesObject exotic\n  // object on the prototype chain. Indeed, this does not make the global object an exotic object.\n  // Indexed access is taken care of by the WindowProxy exotic object.\n\n  // the user agent\n  readonly attribute Navigator navigator; \n  readonly attribute ApplicationCache applicationCache;\n\n  // user prompts\n  undefined alert();\n  undefined alert(DOMString message);\n  boolean confirm(optional DOMString message = );\n  DOMString? prompt(optional DOMString message = , optional DOMString default = );\n  undefined print();\n\n  unsigned long requestAnimationFrame(FrameRequestCallback callback);\n  undefined cancelAnimationFrame(unsigned long handle);\n\n  undefined postMessage(any message, USVString targetOrigin, optional sequence<object> transfer = []);\n};\nWindow includes GlobalEventHandlers;\nWindow includes WindowEventHandlers;\n\ncallback FrameRequestCallback = undefined (DOMHighResTimeStamp time);\n\n[Exposed=Window]\ninterface BarProp {\n  readonly attribute boolean visible;\n};\n\nenum ScrollRestoration { auto, manual };\n\n[Exposed=Window]\ninterface History {\n  readonly attribute unsigned long length;\n  attribute ScrollRestoration scrollRestoration;\n  readonly attribute any state;\n  undefined go(optional long delta = 0);\n  undefined back();\n  undefined forward();\n  undefined pushState(any data, DOMString title, optional USVString? url = null);\n  undefined replaceState(any data, DOMString title, optional USVString? url = null);\n};\n\n[Exposed=Window]\ninterface Location { // but see also additional creation steps and overridden internal methods\n  [Unforgeable] stringifier attribute USVString href;\n  [Unforgeable] readonly attribute USVString origin;\n  [Unforgeable] attribute USVString protocol;\n  [Unforgeable] attribute USVString host;\n  [Unforgeable] attribute USVString hostname;\n  [Unforgeable] attribute USVString port;\n  [Unforgeable] attribute USVString pathname;\n  [Unforgeable] attribute USVString search;\n  [Unforgeable] attribute USVString hash;\n\n  [Unforgeable] undefined assign(USVString url);\n  [Unforgeable] undefined replace(USVString url);\n  [Unforgeable] undefined reload();\n\n  [Unforgeable, SameObject] readonly attribute DOMStringList ancestorOrigins;\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional PopStateEventInit eventInitDict = {})]\ninterface PopStateEvent : Event {\n  readonly attribute any state;\n};\n\ndictionary PopStateEventInit : EventInit {\n  any state = null;\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional HashChangeEventInit eventInitDict = {})]\ninterface HashChangeEvent : Event {\n  readonly attribute USVString oldURL;\n  readonly attribute USVString newURL;\n};\n\ndictionary HashChangeEventInit : EventInit {\n  USVString oldURL = ;\n  USVString newURL = ;\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional PageTransitionEventInit eventInitDict = {})]\ninterface PageTransitionEvent : Event {\n  readonly attribute boolean persisted;\n};\n\ndictionary PageTransitionEventInit : EventInit {\n  boolean persisted = false;\n};\n\n[Exposed=Window]\ninterface BeforeUnloadEvent : Event {\n  attribute DOMString returnValue;\n};\n\n[Exposed=Window]\ninterface ApplicationCache : EventTarget {\n\n  // update status\n  const unsigned short UNCACHED = 0;\n  const unsigned short IDLE = 1;\n  const unsigned short CHECKING = 2;\n  const unsigned short DOWNLOADING = 3;\n  const unsigned short UPDATEREADY = 4;\n  const unsigned short OBSOLETE = 5;\n  readonly attribute unsigned short status;\n\n  // updates\n  undefined update();\n  undefined abort();\n  undefined swapCache();\n\n  // events\n  attribute EventHandler onchecking;\n  attribute EventHandler onerror;\n  attribute EventHandler onnoupdate;\n  attribute EventHandler ondownloading;\n  attribute EventHandler onprogress;\n  attribute EventHandler onupdateready;\n  attribute EventHandler oncached;\n  attribute EventHandler onobsolete;\n};\n\ninterface mixin NavigatorOnLine {\n  readonly attribute boolean onLine;\n};\n\n[Constructor(DOMString type, optional ErrorEventInit eventInitDict = {}), Exposed=(Window,Worker)]\ninterface ErrorEvent : Event {\n  readonly attribute DOMString message;\n  readonly attribute USVString filename;\n  readonly attribute unsigned long lineno;\n  readonly attribute unsigned long colno;\n  readonly attribute any error;\n};\n\ndictionary ErrorEventInit : EventInit {\n  DOMString message = ;\n  USVString filename = ;\n  unsigned long lineno = 0;\n  unsigned long colno = 0;\n  any error = null;\n};\n\n[Constructor(DOMString type, PromiseRejectionEventInit eventInitDict), Exposed=(Window,Worker)]\ninterface PromiseRejectionEvent : Event {\n  readonly attribute Promise<any> promise;\n  readonly attribute any reason;\n};\n\ndictionary PromiseRejectionEventInit : EventInit {\n  required Promise<any> promise;\n  any reason;\n};\n\n[TreatNonObjectAsNull]\ncallback EventHandlerNonNull = any (Event event);\ntypedef EventHandlerNonNull? EventHandler;\n\n[TreatNonObjectAsNull]\ncallback OnErrorEventHandlerNonNull = any ((Event or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long colno, optional any error);\ntypedef OnErrorEventHandlerNonNull? OnErrorEventHandler;\n\n[TreatNonObjectAsNull]\ncallback OnBeforeUnloadEventHandlerNonNull = DOMString? (Event event);\ntypedef OnBeforeUnloadEventHandlerNonNull? OnBeforeUnloadEventHandler;\n\ninterface mixin GlobalEventHandlers {\n  attribute EventHandler onabort;\n  attribute EventHandler onauxclick;\n  attribute EventHandler onblur;\n  attribute EventHandler oncancel;\n  attribute EventHandler oncanplay;\n  attribute EventHandler oncanplaythrough;\n  attribute EventHandler onchange;\n  attribute EventHandler onclick;\n  attribute EventHandler onclose;\n  attribute EventHandler oncontextmenu;\n  attribute EventHandler oncuechange;\n  attribute EventHandler ondblclick;\n  attribute EventHandler ondrag;\n  attribute EventHandler ondragend;\n  attribute EventHandler ondragenter;\n  attribute EventHandler ondragexit;\n  attribute EventHandler ondragleave;\n  attribute EventHandler ondragover;\n  attribute EventHandler ondragstart;\n  attribute EventHandler ondrop;\n  attribute EventHandler ondurationchange;\n  attribute EventHandler onemptied;\n  attribute EventHandler onended;\n  attribute OnErrorEventHandler onerror;\n  attribute EventHandler onfocus;\n  attribute EventHandler oninput;\n  attribute EventHandler oninvalid;\n  attribute EventHandler onkeydown;\n  attribute EventHandler onkeypress;\n  attribute EventHandler onkeyup;\n  attribute EventHandler onload;\n  attribute EventHandler onloadeddata;\n  attribute EventHandler onloadedmetadata;\n  attribute EventHandler onloadend;\n  attribute EventHandler onloadstart;\n  attribute EventHandler onmousedown;\n  [LenientThis] attribute EventHandler onmouseenter;\n  [LenientThis] attribute EventHandler onmouseleave;\n  attribute EventHandler onmousemove;\n  attribute EventHandler onmouseout;\n  attribute EventHandler onmouseover;\n  attribute EventHandler onmouseup;\n  attribute EventHandler onwheel;\n  attribute EventHandler onpause;\n  attribute EventHandler onplay;\n  attribute EventHandler onplaying;\n  attribute EventHandler onprogress;\n  attribute EventHandler onratechange;\n  attribute EventHandler onreset;\n  attribute EventHandler onresize;\n  attribute EventHandler onscroll;\n  attribute EventHandler onsecuritypolicyviolation;\n  attribute EventHandler onseeked;\n  attribute EventHandler onseeking;\n  attribute EventHandler onselect;\n  attribute EventHandler onstalled;\n  attribute EventHandler onsubmit;\n  attribute EventHandler onsuspend;\n  attribute EventHandler ontimeupdate;\n  attribute EventHandler ontoggle;\n  attribute EventHandler onvolumechange;\n  attribute EventHandler onwaiting;\n};\n\ninterface mixin WindowEventHandlers {\n  attribute EventHandler onafterprint;\n  attribute EventHandler onbeforeprint;\n  attribute OnBeforeUnloadEventHandler onbeforeunload;\n  attribute EventHandler onhashchange;\n  attribute EventHandler onlanguagechange;\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n  attribute EventHandler onoffline;\n  attribute EventHandler ononline;\n  attribute EventHandler onpagehide;\n  attribute EventHandler onpageshow;\n  attribute EventHandler onpopstate;\n  attribute EventHandler onrejectionhandled;\n  attribute EventHandler onstorage;\n  attribute EventHandler onunhandledrejection;\n  attribute EventHandler onunload;\n};\n\ninterface mixin DocumentAndElementEventHandlers {\n  attribute EventHandler oncopy;\n  attribute EventHandler oncut;\n  attribute EventHandler onpaste;\n};\n\ntypedef (DOMString or Function) TimerHandler;\n\ninterface mixin WindowOrWorkerGlobalScope {\n  [Replaceable] readonly attribute USVString origin;\n\n  // base64 utility methods\n  DOMString btoa(DOMString data);\n  ByteString atob(DOMString data);\n\n  // timers\n  long setTimeout(TimerHandler handler, optional long timeout = 0, any... arguments);\n  undefined clearTimeout(optional long handle = 0);\n  long setInterval(TimerHandler handler, optional long timeout = 0, any... arguments);\n  undefined clearInterval(optional long handle = 0);\n\n  // ImageBitmap\n  Promise<ImageBitmap> createImageBitmap(ImageBitmapSource image, optional ImageBitmapOptions options = {});\n  Promise<ImageBitmap> createImageBitmap(ImageBitmapSource image, long sx, long sy, long sw, long sh, optional ImageBitmapOptions options = {});\n};\nWindow includes WindowOrWorkerGlobalScope;\nWorkerGlobalScope includes WindowOrWorkerGlobalScope;\n\n[Exposed=Window]\ninterface Navigator {\n  // objects implementing this interface also implement the interfaces given below\n};\nNavigator includes NavigatorID;\nNavigator includes NavigatorLanguage;\nNavigator includes NavigatorOnLine;\nNavigator includes NavigatorContentUtils;\nNavigator includes NavigatorCookies;\nNavigator includes NavigatorPlugins;\nNavigator includes NavigatorConcurrentHardware;\n\ninterface mixin NavigatorID {\n  readonly attribute DOMString appCodeName; // constant \"Mozilla\"\n  readonly attribute DOMString appName; // constant \"Netscape\"\n  readonly attribute DOMString appVersion;\n  readonly attribute DOMString platform;\n  readonly attribute DOMString product; // constant \"Gecko\"\n  [Exposed=Window] readonly attribute DOMString productSub;\n  readonly attribute DOMString userAgent;\n  [Exposed=Window] readonly attribute DOMString vendor;\n  [Exposed=Window] readonly attribute DOMString vendorSub; // constant \"\"\n};\n\npartial interface NavigatorID {\n  [Exposed=Window] boolean taintEnabled(); // constant false\n  [Exposed=Window] readonly attribute DOMString oscpu;\n};\n\ninterface mixin NavigatorLanguage {\n  readonly attribute DOMString language;\n  readonly attribute FrozenArray<DOMString> languages;\n};\n\ninterface mixin NavigatorContentUtils {\n  undefined registerProtocolHandler(DOMString scheme, USVString url, DOMString title);\n  undefined unregisterProtocolHandler(DOMString scheme, USVString url);\n};\n\ninterface mixin NavigatorCookies {\n  readonly attribute boolean cookieEnabled;\n};\n\ninterface mixin NavigatorPlugins {\n  [SameObject] readonly attribute PluginArray plugins;\n  [SameObject] readonly attribute MimeTypeArray mimeTypes;\n  boolean javaEnabled();\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface PluginArray {\n  undefined refresh(optional boolean reload = false);\n  readonly attribute unsigned long length;\n  getter Plugin? item(unsigned long index);\n  getter Plugin? namedItem(DOMString name);\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface MimeTypeArray {\n  readonly attribute unsigned long length;\n  getter MimeType? item(unsigned long index);\n  getter MimeType? namedItem(DOMString name);\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface Plugin {\n  readonly attribute DOMString name;\n  readonly attribute DOMString description;\n  readonly attribute DOMString filename;\n  readonly attribute unsigned long length;\n  getter MimeType? item(unsigned long index);\n  getter MimeType? namedItem(DOMString name);\n};\n\n[Exposed=Window]\ninterface MimeType {\n  readonly attribute DOMString type;\n  readonly attribute DOMString description;\n  readonly attribute DOMString suffixes; // comma-separated\n  readonly attribute Plugin enabledPlugin;\n};\n\n[Exposed=(Window,Worker), Serializable, Transferable]\ninterface ImageBitmap {\n  readonly attribute unsigned long width;\n  readonly attribute unsigned long height;\n  undefined close();\n};\n\ntypedef (CanvasImageSource or\n         Blob or\n         ImageData) ImageBitmapSource;\n\nenum ImageOrientation { none, flipY };\nenum PremultiplyAlpha { none, premultiply, default };\nenum ColorSpaceConversion { none, default };\nenum ResizeQuality { pixelated, low, medium, high };\n\ndictionary ImageBitmapOptions {\n  ImageOrientation imageOrientation = none;\n  PremultiplyAlpha premultiplyAlpha = default;\n  ColorSpaceConversion colorSpaceConversion = default;\n  [EnforceRange] unsigned long resizeWidth;\n  [EnforceRange] unsigned long resizeHeight;\n  ResizeQuality resizeQuality = low;\n};\n\n[Constructor(DOMString type, optional MessageEventInit eventInitDict = {}), Exposed=(Window,Worker,AudioWorklet)]\ninterface MessageEvent : Event {\n  readonly attribute any data;\n  readonly attribute USVString origin;\n  readonly attribute DOMString lastEventId;\n  readonly attribute MessageEventSource? source;\n  readonly attribute FrozenArray<MessagePort> ports;\n\n  undefined initMessageEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any data = null, optional USVString origin = , optional DOMString lastEventId = , optional MessageEventSource? source = null, optional sequence<MessagePort> ports = []);\n};\n\ndictionary MessageEventInit : EventInit {\n  any data = null;\n  USVString origin = ;\n  DOMString lastEventId = ;\n  MessageEventSource? source = null;\n  sequence<MessagePort> ports = [];\n};\n\ntypedef (WindowProxy or MessagePort or ServiceWorker) MessageEventSource;\n\n[Constructor(USVString url, optional EventSourceInit eventSourceInitDict = {}), Exposed=(Window,Worker)]\ninterface EventSource : EventTarget {\n  readonly attribute USVString url;\n  readonly attribute boolean withCredentials;\n\n  // ready state\n  const unsigned short CONNECTING = 0;\n  const unsigned short OPEN = 1;\n  const unsigned short CLOSED = 2;\n  readonly attribute unsigned short readyState;\n\n  // networking\n  attribute EventHandler onopen;\n  attribute EventHandler onmessage;\n  attribute EventHandler onerror;\n  undefined close();\n};\n\ndictionary EventSourceInit {\n  boolean withCredentials = false;\n};\n\nenum BinaryType { blob, arraybuffer };\n[Constructor(USVString url, optional (DOMString or sequence<DOMString>) protocols = []), Exposed=(Window,Worker)]\ninterface WebSocket : EventTarget {\n  readonly attribute USVString url;\n\n  // ready state\n  const unsigned short CONNECTING = 0;\n  const unsigned short OPEN = 1;\n  const unsigned short CLOSING = 2;\n  const unsigned short CLOSED = 3;\n  readonly attribute unsigned short readyState;\n  readonly attribute unsigned long long bufferedAmount;\n\n  // networking\n  attribute EventHandler onopen;\n  attribute EventHandler onerror;\n  attribute EventHandler onclose;\n  readonly attribute DOMString extensions;\n  readonly attribute DOMString protocol;\n  undefined close(optional [Clamp] unsigned short code, optional USVString reason);\n\n  // messaging\n  attribute EventHandler onmessage;\n  attribute BinaryType binaryType;\n  undefined send(USVString data);\n  undefined send(Blob data);\n  undefined send(ArrayBuffer data);\n  undefined send(ArrayBufferView data);\n};\n\n[Constructor(DOMString type, optional CloseEventInit eventInitDict = {}), Exposed=(Window,Worker)]\ninterface CloseEvent : Event {\n  readonly attribute boolean wasClean;\n  readonly attribute unsigned short code;\n  readonly attribute USVString reason;\n};\n\ndictionary CloseEventInit : EventInit {\n  boolean wasClean = false;\n  unsigned short code = 0;\n  USVString reason = ;\n};\n\n[Constructor, Exposed=(Window,Worker)]\ninterface MessageChannel {\n  readonly attribute MessagePort port1;\n  readonly attribute MessagePort port2;\n};\n\n[Exposed=(Window,Worker,AudioWorklet), Transferable]\ninterface MessagePort : EventTarget {\n  undefined postMessage(any message, optional sequence<object> transfer = []);\n  undefined start();\n  undefined close();\n\n  // event handlers\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\n[Constructor(DOMString name), Exposed=(Window,Worker)]\ninterface BroadcastChannel : EventTarget {\n  readonly attribute DOMString name;\n  undefined postMessage(any message);\n  undefined close();\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\n[Exposed=Worker]\ninterface WorkerGlobalScope : EventTarget {\n  readonly attribute WorkerGlobalScope self;\n  readonly attribute WorkerLocation location;\n  readonly attribute WorkerNavigator navigator;\n  undefined importScripts(USVString... urls);\n\n  attribute OnErrorEventHandler onerror;\n  attribute EventHandler onlanguagechange;\n  attribute EventHandler onoffline;\n  attribute EventHandler ononline;\n  attribute EventHandler onrejectionhandled;\n  attribute EventHandler onunhandledrejection;\n};\n\n[Global=(Worker,DedicatedWorker),Exposed=DedicatedWorker]\ninterface DedicatedWorkerGlobalScope : WorkerGlobalScope {\n  [Replaceable] readonly attribute DOMString name;\n\n  undefined postMessage(any message, optional sequence<object> transfer = []);\n\n  undefined close();\n\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\n[Global=(Worker,SharedWorker),Exposed=SharedWorker]\ninterface SharedWorkerGlobalScope : WorkerGlobalScope {\n  [Replaceable] readonly attribute DOMString name;\n\n  undefined close();\n\n  attribute EventHandler onconnect;\n};\n\ninterface mixin AbstractWorker {\n  attribute EventHandler onerror;\n};\n\n[Constructor(USVString scriptURL, optional WorkerOptions options = {}), Exposed=(Window,Worker)]\ninterface Worker : EventTarget {\n  undefined terminate();\n\n  undefined postMessage(any message, optional sequence<object> transfer = []);\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\ndictionary WorkerOptions {\n  WorkerType type = classic;\n  RequestCredentials credentials = omit; // credentials is only used if type is \"module\"\n  DOMString name = ;\n};\n\nenum WorkerType { classic, module };\n\nWorker includes AbstractWorker;\n\n[Constructor(USVString scriptURL, optional (DOMString or WorkerOptions) options = {}),\n Exposed=(Window,Worker)]\ninterface SharedWorker : EventTarget {\n  readonly attribute MessagePort port;\n};\nSharedWorker includes AbstractWorker;\n\ninterface mixin NavigatorConcurrentHardware {\n  readonly attribute unsigned long long hardwareConcurrency;\n};\n\n[Exposed=Worker]\ninterface WorkerNavigator {};\nWorkerNavigator includes NavigatorID;\nWorkerNavigator includes NavigatorLanguage;\nWorkerNavigator includes NavigatorOnLine;\nWorkerNavigator includes NavigatorConcurrentHardware;\n\n[Exposed=Worker]\ninterface WorkerLocation {\n  stringifier readonly attribute USVString href;\n  readonly attribute USVString origin;\n  readonly attribute USVString protocol;\n  readonly attribute USVString host;\n  readonly attribute USVString hostname;\n  readonly attribute USVString port;\n  readonly attribute USVString pathname;\n  readonly attribute USVString search;\n  readonly attribute USVString hash;\n};\n\n[Exposed=Window]\ninterface Storage {\n  readonly attribute unsigned long length;\n  DOMString? key(unsigned long index);\n  getter DOMString? getItem(DOMString key);\n  setter undefined setItem(DOMString key, DOMString value);\n  deleter undefined removeItem(DOMString key);\n  undefined clear();\n};\n\ninterface mixin WindowSessionStorage {\n  readonly attribute Storage sessionStorage;\n};\nWindow includes WindowSessionStorage;\n\ninterface mixin WindowLocalStorage {\n  readonly attribute Storage localStorage;\n};\nWindow includes WindowLocalStorage;\n\n[Exposed=Window,\n Constructor(DOMString type, optional StorageEventInit eventInitDict = {})]\ninterface StorageEvent : Event {\n  readonly attribute DOMString? key;\n  readonly attribute DOMString? oldValue;\n  readonly attribute DOMString? newValue;\n  readonly attribute USVString url;\n  readonly attribute Storage? storageArea;\n};\n\ndictionary StorageEventInit : EventInit {\n  DOMString? key = null;\n  DOMString? oldValue = null;\n  DOMString? newValue = null;\n  USVString url = ;\n  Storage? storageArea = null;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMarqueeElement : HTMLElement {\n  [CEReactions] attribute DOMString behavior;\n  [CEReactions] attribute DOMString bgColor;\n  [CEReactions] attribute DOMString direction;\n  [CEReactions] attribute DOMString height;\n  [CEReactions] attribute unsigned long hspace;\n  [CEReactions] attribute long loop;\n  [CEReactions] attribute unsigned long scrollAmount;\n  [CEReactions] attribute unsigned long scrollDelay;\n  [CEReactions] attribute boolean trueSpeed;\n  [CEReactions] attribute unsigned long vspace;\n  [CEReactions] attribute DOMString width;\n\n  attribute EventHandler onbounce;\n  attribute EventHandler onfinish;\n  attribute EventHandler onstart;\n\n  undefined start();\n  undefined stop();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFrameSetElement : HTMLElement {\n  [CEReactions] attribute DOMString cols;\n  [CEReactions] attribute DOMString rows;\n};\nHTMLFrameSetElement includes WindowEventHandlers;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFrameElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString scrolling;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString frameBorder;\n  [CEReactions] attribute USVString longDesc;\n  [CEReactions] attribute boolean noResize;\n  readonly attribute Document? contentDocument;\n  readonly attribute WindowProxy? contentWindow;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginHeight;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginWidth;\n};\n\npartial interface HTMLAnchorElement {\n  [CEReactions] attribute DOMString coords;\n  [CEReactions] attribute DOMString charset;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString rev;\n  [CEReactions] attribute DOMString shape;\n};\n\npartial interface HTMLAreaElement {\n  [CEReactions] attribute boolean noHref;\n};\n\npartial interface HTMLBodyElement {\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString text;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString link;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString vLink;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString aLink;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n  [CEReactions] attribute DOMString background;\n};\n\npartial interface HTMLBRElement {\n  [CEReactions] attribute DOMString clear;\n};\n\npartial interface HTMLTableCaptionElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLTableColElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute DOMString vAlign;\n  [CEReactions] attribute DOMString width;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDirectoryElement : HTMLElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLDivElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLDListElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLEmbedElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString name;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFontElement : HTMLElement {\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString color;\n  [CEReactions] attribute DOMString face;\n  [CEReactions] attribute DOMString size; \n};\n\npartial interface HTMLHeadingElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLHRElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString color;\n  [CEReactions] attribute boolean noShade;\n  [CEReactions] attribute DOMString size;\n  [CEReactions] attribute DOMString width;\n};\n\npartial interface HTMLHtmlElement {\n  [CEReactions] attribute DOMString version;\n};\n\npartial interface HTMLIFrameElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString scrolling;\n  [CEReactions] attribute DOMString frameBorder;\n  [CEReactions] attribute USVString longDesc;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginHeight;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginWidth;\n};\n\npartial interface HTMLImageElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute USVString lowsrc;\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute unsigned long hspace;\n  [CEReactions] attribute unsigned long vspace;\n  [CEReactions] attribute USVString longDesc;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString border;\n};\n\npartial interface HTMLInputElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString useMap;\n};\n\npartial interface HTMLLegendElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLLIElement {\n  [CEReactions] attribute DOMString type;\n};\n\npartial interface HTMLLinkElement {\n  [CEReactions] attribute DOMString charset;\n  [CEReactions] attribute DOMString rev;\n  [CEReactions] attribute DOMString target;\n};\n\npartial interface HTMLMenuElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLMetaElement {\n  [CEReactions] attribute DOMString scheme;\n};\n\npartial interface HTMLObjectElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString archive;\n  [CEReactions] attribute DOMString code;\n  [CEReactions] attribute boolean declare;\n  [CEReactions] attribute unsigned long hspace;\n  [CEReactions] attribute DOMString standby;\n  [CEReactions] attribute unsigned long vspace;\n  [CEReactions] attribute DOMString codeBase;\n  [CEReactions] attribute DOMString codeType;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString border;\n};\n\npartial interface HTMLOListElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLParagraphElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLParamElement {\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString valueType;\n};\n\npartial interface HTMLPreElement {\n  [CEReactions] attribute long width;\n};\n\npartial interface HTMLStyleElement {\n  [CEReactions] attribute DOMString type;\n};\n\npartial interface HTMLScriptElement {\n  [CEReactions] attribute DOMString charset;\n  [CEReactions] attribute DOMString event;\n  [CEReactions] attribute DOMString htmlFor;\n};\n\npartial interface HTMLTableElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString border;\n  [CEReactions] attribute DOMString frame;\n  [CEReactions] attribute DOMString rules;\n  [CEReactions] attribute DOMString summary;\n  [CEReactions] attribute DOMString width;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString cellPadding;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString cellSpacing;\n};\n\npartial interface HTMLTableSectionElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute DOMString vAlign;\n};\n\npartial interface HTMLTableCellElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString axis;\n  [CEReactions] attribute DOMString height;\n  [CEReactions] attribute DOMString width;\n\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute boolean noWrap;\n  [CEReactions] attribute DOMString vAlign;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n};\n\npartial interface HTMLTableRowElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute DOMString vAlign;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n};\n\npartial interface HTMLUListElement {\n  [CEReactions] attribute boolean compact;\n  [CEReactions] attribute DOMString type;\n};\n\npartial interface Document {\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString fgColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString linkColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString vlinkColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString alinkColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n\n  [SameObject] readonly attribute HTMLCollection anchors;\n  [SameObject] readonly attribute HTMLCollection applets;\n\n  undefined clear();\n  undefined captureEvents();\n  undefined releaseEvents();\n\n  [SameObject] readonly attribute HTMLAllCollection all;\n};\n\npartial interface Window {\n  undefined captureEvents();\n  undefined releaseEvents();\n\n  [Replaceable, SameObject] readonly attribute External external;\n};\n\n[Exposed=Window,\n NoInterfaceObject]\ninterface External {\n  undefined AddSearchProvider();\n  undefined IsSearchProviderInstalled();\n};\n\n\n"`,
 right: `"[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface HTMLAllCollection {\n  readonly attribute unsigned long length;\n  getter Element (unsigned long index);\n  getter (HTMLCollection or Element)? namedItem(DOMString name);\n  (HTMLCollection or Element)? item(optional DOMString nameOrIndex);\n\n  // Note: HTMLAllCollection objects have a custom [[Call]] internal method and an [[IsHTMLDDA]] internal slot.\n};\n\n[Exposed=Window]\ninterface HTMLFormControlsCollection : HTMLCollection {\n  // inherits length and item()\n  getter (RadioNodeList or Element)? namedItem(DOMString name); // shadows inherited namedItem()\n};\n\n[Exposed=Window]\ninterface RadioNodeList : NodeList {\n  attribute DOMString value;\n};\n\n[Exposed=Window]\ninterface HTMLOptionsCollection : HTMLCollection {\n  // inherits item(), namedItem()\n  [CEReactions] attribute unsigned long length; // shadows inherited length\n  [CEReactions] setter undefined (unsigned long index, HTMLOptionElement? option);\n  [CEReactions] undefined add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);\n  [CEReactions] undefined remove(long index);\n  attribute long selectedIndex;\n};\n\n[Exposed=(Window,Worker)]\ninterface DOMStringList {\n  readonly attribute unsigned long length;\n  getter DOMString? item(unsigned long index);\n  boolean contains(DOMString string);\n};\n\nenum DocumentReadyState { \"loading\", \"interactive\", \"complete\" };\ntypedef (HTMLScriptElement or SVGScriptElement) HTMLOrSVGScriptElement;\n\n[OverrideBuiltins]\npartial interface Document {\n  // resource metadata management\n  [PutForwards=href, Unforgeable] readonly attribute Location? location;\n  attribute USVString domain;\n  readonly attribute USVString referrer;\n  attribute USVString cookie;\n  readonly attribute DOMString lastModified;\n  readonly attribute DocumentReadyState readyState;\n\n  // DOM tree accessors\n  getter object (DOMString name);\n  [CEReactions] attribute DOMString title;\n  [CEReactions] attribute DOMString dir;\n  [CEReactions] attribute HTMLElement? body;\n  readonly attribute HTMLHeadElement? head;\n  [SameObject] readonly attribute HTMLCollection images;\n  [SameObject] readonly attribute HTMLCollection embeds;\n  [SameObject] readonly attribute HTMLCollection plugins;\n  [SameObject] readonly attribute HTMLCollection links;\n  [SameObject] readonly attribute HTMLCollection forms;\n  [SameObject] readonly attribute HTMLCollection scripts;\n  NodeList getElementsByName(DOMString elementName);\n  readonly attribute HTMLOrSVGScriptElement? currentScript; // classic scripts in a document tree only\n\n  // dynamic markup insertion\n  [CEReactions] Document open(optional DOMString type, optional DOMString replace = \"\"); // type is ignored\n  WindowProxy open(USVString url, DOMString name, DOMString features);\n  [CEReactions] undefined close();\n  [CEReactions] undefined write(DOMString... text);\n  [CEReactions] undefined writeln(DOMString... text);\n\n  // user interaction\n  readonly attribute WindowProxy? defaultView;\n  readonly attribute Element? activeElement;\n  boolean hasFocus();\n  [CEReactions] attribute DOMString designMode;\n  [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = \"\");\n  boolean queryCommandEnabled(DOMString commandId);\n  boolean queryCommandIndeterm(DOMString commandId);\n  boolean queryCommandState(DOMString commandId);\n  boolean queryCommandSupported(DOMString commandId);\n  DOMString queryCommandValue(DOMString commandId);\n\n  // special event handler IDL attributes that only apply to Document objects\n  [LenientThis] attribute EventHandler onreadystatechange;\n};\nDocument includes GlobalEventHandlers;\nDocument includes DocumentAndElementEventHandlers;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLElement : Element {\n  // metadata attributes\n  [CEReactions] attribute DOMString title;\n  [CEReactions] attribute DOMString lang;\n  [CEReactions] attribute boolean translate;\n  [CEReactions] attribute DOMString dir;\n\n  // user interaction\n  [CEReactions] attribute boolean hidden;\n  undefined click();\n  [CEReactions] attribute DOMString accessKey;\n  readonly attribute DOMString accessKeyLabel;\n  [CEReactions] attribute boolean draggable;\n  [CEReactions] attribute boolean spellcheck;\n  [CEReactions] attribute DOMString autocapitalize;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString innerText;\n};\n\nHTMLElement includes GlobalEventHandlers;\nHTMLElement includes DocumentAndElementEventHandlers;\nHTMLElement includes ElementContentEditable;\n\n// Note: intentionally not [HTMLConstructor]\n[Exposed=Window]\ninterface HTMLUnknownElement : HTMLElement { };\n\ninterface mixin HTMLOrSVGElement {\n  [SameObject] readonly attribute DOMStringMap dataset;\n  attribute DOMString nonce;\n\n  [CEReactions] attribute long tabIndex;\n  undefined focus(optional FocusOptions options = {});\n  undefined blur();\n};\nHTMLElement includes HTMLOrSVGElement;\nSVGElement includes HTMLOrSVGElement;\n\n[Exposed=Window,\n OverrideBuiltins]\ninterface DOMStringMap {\n  getter DOMString (DOMString name);\n  [CEReactions] setter undefined (DOMString name, DOMString value);\n  [CEReactions] deleter undefined (DOMString name);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHtmlElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHeadElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTitleElement : HTMLElement {\n  [CEReactions] attribute DOMString text;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLBaseElement : HTMLElement {\n  [CEReactions] attribute USVString href;\n  [CEReactions] attribute DOMString target;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLinkElement : HTMLElement {\n  [CEReactions] attribute USVString href;\n  [CEReactions] attribute DOMString? crossOrigin;\n  [CEReactions] attribute DOMString rel;\n  [CEReactions] attribute DOMString as; // (default \"\")\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\n  [CEReactions] attribute DOMString media;\n  [CEReactions] attribute DOMString integrity;\n  [CEReactions] attribute DOMString hreflang;\n  [CEReactions] attribute DOMString type;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList sizes;\n  [CEReactions] attribute DOMString referrerPolicy;\n};\nHTMLLinkElement includes LinkStyle;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMetaElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString httpEquiv;\n  [CEReactions] attribute DOMString content;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLStyleElement : HTMLElement {\n  [CEReactions] attribute DOMString media;\n};\nHTMLStyleElement includes LinkStyle;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLBodyElement : HTMLElement {};\n\nHTMLBodyElement includes WindowEventHandlers;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHeadingElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLParagraphElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLHRElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLPreElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLQuoteElement : HTMLElement {\n  [CEReactions] attribute USVString cite;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLOListElement : HTMLElement {\n  [CEReactions] attribute boolean reversed;\n  [CEReactions] attribute long start;\n  [CEReactions] attribute DOMString type;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLUListElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMenuElement : HTMLElement {\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLIElement : HTMLElement {\n  [CEReactions] attribute long value;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDListElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDivElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLAnchorElement : HTMLElement {\n  [CEReactions] attribute DOMString target;\n  [CEReactions] attribute DOMString download;\n  [CEReactions] attribute USVString ping;\n  [CEReactions] attribute DOMString rel;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\n  [CEReactions] attribute DOMString hreflang;\n  [CEReactions] attribute DOMString type;\n\n  [CEReactions] attribute DOMString text;\n\n  [CEReactions] attribute DOMString referrerPolicy;\n};\nHTMLAnchorElement includes HTMLHyperlinkElementUtils;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDataElement : HTMLElement {\n  [CEReactions] attribute DOMString value;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTimeElement : HTMLElement {\n  [CEReactions] attribute DOMString dateTime;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSpanElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLBRElement : HTMLElement {};\n\ninterface mixin HTMLHyperlinkElementUtils {\n  [CEReactions] stringifier attribute USVString href;\n  readonly attribute USVString origin;\n  [CEReactions] attribute USVString protocol;\n  [CEReactions] attribute USVString username;\n  [CEReactions] attribute USVString password;\n  [CEReactions] attribute USVString host;\n  [CEReactions] attribute USVString hostname;\n  [CEReactions] attribute USVString port;\n  [CEReactions] attribute USVString pathname;\n  [CEReactions] attribute USVString search;\n  [CEReactions] attribute USVString hash;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLModElement : HTMLElement {\n  [CEReactions] attribute USVString cite;\n  [CEReactions] attribute DOMString dateTime;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLPictureElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSourceElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute USVString srcset;\n  [CEReactions] attribute DOMString sizes;\n  [CEReactions] attribute DOMString media;\n};\n\n[Exposed=Window,\n HTMLConstructor,\n NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]\ninterface HTMLImageElement : HTMLElement {\n  [CEReactions] attribute DOMString alt;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute USVString srcset;\n  [CEReactions] attribute DOMString sizes;\n  [CEReactions] attribute DOMString? crossOrigin;\n  [CEReactions] attribute DOMString useMap;\n  [CEReactions] attribute boolean isMap;\n  [CEReactions] attribute unsigned long width;\n  [CEReactions] attribute unsigned long height;\n  readonly attribute unsigned long naturalWidth;\n  readonly attribute unsigned long naturalHeight;\n  readonly attribute boolean complete;\n  readonly attribute USVString currentSrc;\n  [CEReactions] attribute DOMString referrerPolicy;\n  [CEReactions] attribute DOMString decoding;\n\n  Promise<undefined> decode();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLIFrameElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString srcdoc;\n  [CEReactions] attribute DOMString name;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList sandbox;\n  [CEReactions] attribute boolean allowFullscreen;\n  [CEReactions] attribute boolean allowPaymentRequest;\n  [CEReactions] attribute boolean allowUserMedia;\n  [CEReactions] attribute DOMString width;\n  [CEReactions] attribute DOMString height;\n  [CEReactions] attribute DOMString referrerPolicy;\n  readonly attribute Document? contentDocument;\n  readonly attribute WindowProxy? contentWindow;\n  Document? getSVGDocument();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLEmbedElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString width;\n  [CEReactions] attribute DOMString height;\n  Document? getSVGDocument();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLObjectElement : HTMLElement {\n  [CEReactions] attribute USVString data;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute boolean typeMustMatch;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString useMap;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString width;\n  [CEReactions] attribute DOMString height;\n  readonly attribute Document? contentDocument;\n  readonly attribute WindowProxy? contentWindow;\n  Document? getSVGDocument();\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLParamElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString value;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLVideoElement : HTMLMediaElement {\n  [CEReactions] attribute unsigned long width;\n  [CEReactions] attribute unsigned long height;\n  readonly attribute unsigned long videoWidth;\n  readonly attribute unsigned long videoHeight;\n  [CEReactions] attribute USVString poster;\n  [CEReactions] attribute boolean playsInline;\n};\n\n[Exposed=Window,\n HTMLConstructor,\n NamedConstructor=Audio(optional DOMString src)]\ninterface HTMLAudioElement : HTMLMediaElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTrackElement : HTMLElement {\n  [CEReactions] attribute DOMString kind;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString srclang;\n  [CEReactions] attribute DOMString label;\n  [CEReactions] attribute boolean default;\n\n  const unsigned short NONE = 0;\n  const unsigned short LOADING = 1;\n  const unsigned short LOADED = 2;\n  const unsigned short ERROR = 3;\n  readonly attribute unsigned short readyState;\n\n  readonly attribute TextTrack track;\n};\n\nenum CanPlayTypeResult { \"\" /* empty string */, \"maybe\", \"probably\" };\ntypedef (MediaStream or MediaSource or Blob) MediaProvider;\n\n[Exposed=Window]\ninterface HTMLMediaElement : HTMLElement {\n\n  // error state\n  readonly attribute MediaError? error;\n\n  // network state\n  [CEReactions] attribute USVString src;\n  attribute MediaProvider? srcObject;\n  readonly attribute USVString currentSrc;\n  [CEReactions] attribute DOMString? crossOrigin;\n  const unsigned short NETWORK_EMPTY = 0;\n  const unsigned short NETWORK_IDLE = 1;\n  const unsigned short NETWORK_LOADING = 2;\n  const unsigned short NETWORK_NO_SOURCE = 3;\n  readonly attribute unsigned short networkState;\n  [CEReactions] attribute DOMString preload;\n  readonly attribute TimeRanges buffered;\n  undefined load();\n  CanPlayTypeResult canPlayType(DOMString type);\n\n  // ready state\n  const unsigned short HAVE_NOTHING = 0;\n  const unsigned short HAVE_METADATA = 1;\n  const unsigned short HAVE_CURRENT_DATA = 2;\n  const unsigned short HAVE_FUTURE_DATA = 3;\n  const unsigned short HAVE_ENOUGH_DATA = 4;\n  readonly attribute unsigned short readyState;\n  readonly attribute boolean seeking;\n\n  // playback state\n  attribute double currentTime;\n  undefined fastSeek(double time);\n  readonly attribute unrestricted double duration;\n  object getStartDate();\n  readonly attribute boolean paused;\n  attribute double defaultPlaybackRate;\n  attribute double playbackRate;\n  readonly attribute TimeRanges played;\n  readonly attribute TimeRanges seekable;\n  readonly attribute boolean ended;\n  [CEReactions] attribute boolean autoplay;\n  [CEReactions] attribute boolean loop;\n  Promise<undefined> play();\n  undefined pause();\n\n  // controls\n  [CEReactions] attribute boolean controls;\n  attribute double volume;\n  attribute boolean muted;\n  [CEReactions] attribute boolean defaultMuted;\n\n  // tracks\n  [SameObject] readonly attribute AudioTrackList audioTracks;\n  [SameObject] readonly attribute VideoTrackList videoTracks;\n  [SameObject] readonly attribute TextTrackList textTracks;\n  TextTrack addTextTrack(TextTrackKind kind, optional DOMString label = \"\", optional DOMString language = \"\");\n};\n\n[Exposed=Window]\ninterface MediaError {\n  const unsigned short MEDIA_ERR_ABORTED = 1;\n  const unsigned short MEDIA_ERR_NETWORK = 2;\n  const unsigned short MEDIA_ERR_DECODE = 3;\n  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\n\n  readonly attribute unsigned short code;\n  readonly attribute DOMString message;\n};\n\n[Exposed=Window]\ninterface AudioTrackList : EventTarget {\n  readonly attribute unsigned long length;\n  getter AudioTrack (unsigned long index);\n  AudioTrack? getTrackById(DOMString id);\n\n  attribute EventHandler onchange;\n  attribute EventHandler onaddtrack;\n  attribute EventHandler onremovetrack;\n};\n\n[Exposed=Window]\ninterface AudioTrack {\n  readonly attribute DOMString id;\n  readonly attribute DOMString kind;\n  readonly attribute DOMString label;\n  readonly attribute DOMString language;\n  attribute boolean enabled;\n};\n\n[Exposed=Window]\ninterface VideoTrackList : EventTarget {\n  readonly attribute unsigned long length;\n  getter VideoTrack (unsigned long index);\n  VideoTrack? getTrackById(DOMString id);\n  readonly attribute long selectedIndex;\n\n  attribute EventHandler onchange;\n  attribute EventHandler onaddtrack;\n  attribute EventHandler onremovetrack;\n};\n\n[Exposed=Window]\ninterface VideoTrack {\n  readonly attribute DOMString id;\n  readonly attribute DOMString kind;\n  readonly attribute DOMString label;\n  readonly attribute DOMString language;\n  attribute boolean selected;\n};\n\n[Exposed=Window]\ninterface TextTrackList : EventTarget {\n  readonly attribute unsigned long length;\n  getter TextTrack (unsigned long index);\n  TextTrack? getTrackById(DOMString id);\n\n  attribute EventHandler onchange;\n  attribute EventHandler onaddtrack;\n  attribute EventHandler onremovetrack;\n};\n\nenum TextTrackMode { \"disabled\",  \"hidden\",  \"showing\" };\nenum TextTrackKind { \"subtitles\",  \"captions\",  \"descriptions\",  \"chapters\",  \"metadata\" };\n\n[Exposed=Window]\ninterface TextTrack : EventTarget {\n  readonly attribute TextTrackKind kind;\n  readonly attribute DOMString label;\n  readonly attribute DOMString language;\n\n  readonly attribute DOMString id;\n  readonly attribute DOMString inBandMetadataTrackDispatchType;\n\n  attribute TextTrackMode mode;\n\n  readonly attribute TextTrackCueList? cues;\n  readonly attribute TextTrackCueList? activeCues;\n\n  undefined addCue(TextTrackCue cue);\n  undefined removeCue(TextTrackCue cue);\n\n  attribute EventHandler oncuechange;\n};\n\n[Exposed=Window]\ninterface TextTrackCueList {\n  readonly attribute unsigned long length;\n  getter TextTrackCue (unsigned long index);\n  TextTrackCue? getCueById(DOMString id);\n};\n\n[Exposed=Window]\ninterface TextTrackCue : EventTarget {\n  readonly attribute TextTrack? track;\n\n  attribute DOMString id;\n  attribute double startTime;\n  attribute double endTime;\n  attribute boolean pauseOnExit;\n\n  attribute EventHandler onenter;\n  attribute EventHandler onexit;\n};\n\n[Exposed=Window]\ninterface TimeRanges {\n  readonly attribute unsigned long length;\n  double start(unsigned long index);\n  double end(unsigned long index);\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional TrackEventInit eventInitDict = {})]\ninterface TrackEvent : Event {\n  readonly attribute (VideoTrack or AudioTrack or TextTrack)? track;\n};\n\ndictionary TrackEventInit : EventInit {\n  (VideoTrack or AudioTrack or TextTrack)? track = null;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMapElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [SameObject] readonly attribute HTMLCollection areas;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLAreaElement : HTMLElement {\n  [CEReactions] attribute DOMString alt;\n  [CEReactions] attribute DOMString coords;\n  [CEReactions] attribute DOMString shape;\n  [CEReactions] attribute DOMString target;\n  [CEReactions] attribute DOMString download;\n  [CEReactions] attribute USVString ping;\n  [CEReactions] attribute DOMString rel;\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\n  [CEReactions] attribute DOMString referrerPolicy;\n};\nHTMLAreaElement includes HTMLHyperlinkElementUtils;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableElement : HTMLElement {\n  [CEReactions] attribute HTMLTableCaptionElement? caption;\n  HTMLTableCaptionElement createCaption();\n  [CEReactions] undefined deleteCaption();\n\n  [CEReactions] attribute HTMLTableSectionElement? tHead;\n  HTMLTableSectionElement createTHead();\n  [CEReactions] undefined deleteTHead();\n\n  [CEReactions] attribute HTMLTableSectionElement? tFoot;\n  HTMLTableSectionElement createTFoot();\n  [CEReactions] undefined deleteTFoot();\n\n  [SameObject] readonly attribute HTMLCollection tBodies;\n  HTMLTableSectionElement createTBody();\n\n  [SameObject] readonly attribute HTMLCollection rows;\n  HTMLTableRowElement insertRow(optional long index = -1);\n  [CEReactions] undefined deleteRow(long index);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableCaptionElement : HTMLElement {};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableColElement : HTMLElement {\n  [CEReactions] attribute unsigned long span;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableSectionElement : HTMLElement {\n  [SameObject] readonly attribute HTMLCollection rows;\n  HTMLTableRowElement insertRow(optional long index = -1);\n  [CEReactions] undefined deleteRow(long index);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableRowElement : HTMLElement {\n  readonly attribute long rowIndex;\n  readonly attribute long sectionRowIndex;\n  [SameObject] readonly attribute HTMLCollection cells;\n  HTMLTableCellElement insertCell(optional long index = -1);\n  [CEReactions] undefined deleteCell(long index);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTableCellElement : HTMLElement {\n  [CEReactions] attribute unsigned long colSpan;\n  [CEReactions] attribute unsigned long rowSpan;\n  [CEReactions] attribute DOMString headers;\n  readonly attribute long cellIndex;\n\n  [CEReactions] attribute DOMString scope; // only conforming for th elements\n  [CEReactions] attribute DOMString abbr;  // only conforming for th elements\n};\n\n[Exposed=Window,\n OverrideBuiltins,\n LegacyUnenumerableNamedProperties,\n HTMLConstructor]\ninterface HTMLFormElement : HTMLElement {\n  [CEReactions] attribute DOMString acceptCharset;\n  [CEReactions] attribute USVString action;\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute DOMString enctype;\n  [CEReactions] attribute DOMString encoding;\n  [CEReactions] attribute DOMString method;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute boolean noValidate;\n  [CEReactions] attribute DOMString target;\n\n  [SameObject] readonly attribute HTMLFormControlsCollection elements;\n  readonly attribute unsigned long length;\n  getter Element (unsigned long index);\n  getter (RadioNodeList or Element) (DOMString name);\n\n  undefined submit();\n  [CEReactions] undefined reset();\n  boolean checkValidity();\n  boolean reportValidity();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLabelElement : HTMLElement {\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString htmlFor;\n  readonly attribute HTMLElement? control;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLInputElement : HTMLElement {\n  [CEReactions] attribute DOMString accept;\n  [CEReactions] attribute DOMString alt;\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute boolean defaultChecked;\n  attribute boolean checked;\n  [CEReactions] attribute DOMString dirName;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  attribute FileList? files;\n  [CEReactions] attribute USVString formAction;\n  [CEReactions] attribute DOMString formEnctype;\n  [CEReactions] attribute DOMString formMethod;\n  [CEReactions] attribute boolean formNoValidate;\n  [CEReactions] attribute DOMString formTarget;\n  [CEReactions] attribute unsigned long height;\n  attribute boolean indeterminate;\n  readonly attribute HTMLElement? list;\n  [CEReactions] attribute DOMString max;\n  [CEReactions] attribute long maxLength;\n  [CEReactions] attribute DOMString min;\n  [CEReactions] attribute long minLength;\n  [CEReactions] attribute boolean multiple;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString pattern;\n  [CEReactions] attribute DOMString placeholder;\n  [CEReactions] attribute boolean readOnly;\n  [CEReactions] attribute boolean required;\n  [CEReactions] attribute unsigned long size;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString step;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString defaultValue;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString value;\n  attribute object? valueAsDate;\n  attribute unrestricted double valueAsNumber;\n  [CEReactions] attribute unsigned long width;\n\n  undefined stepUp(optional long n = 1);\n  undefined stepDown(optional long n = 1);\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList? labels;\n\n  undefined select();\n  attribute unsigned long? selectionStart;\n  attribute unsigned long? selectionEnd;\n  attribute DOMString? selectionDirection;\n  undefined setRangeText(DOMString replacement);\n  undefined setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = \"preserve\");\n  undefined setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLButtonElement : HTMLElement {\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute USVString formAction;\n  [CEReactions] attribute DOMString formEnctype;\n  [CEReactions] attribute DOMString formMethod;\n  [CEReactions] attribute boolean formNoValidate;\n  [CEReactions] attribute DOMString formTarget;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString value;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSelectElement : HTMLElement {\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute boolean multiple;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute boolean required;\n  [CEReactions] attribute unsigned long size;\n\n  readonly attribute DOMString type;\n\n  [SameObject] readonly attribute HTMLOptionsCollection options;\n  [CEReactions] attribute unsigned long length;\n  getter Element? item(unsigned long index);\n  HTMLOptionElement? namedItem(DOMString name);\n  [CEReactions] undefined add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);\n  [CEReactions] undefined remove(); // ChildNode overload\n  [CEReactions] undefined remove(long index);\n  [CEReactions] setter undefined (unsigned long index, HTMLOptionElement? option);\n\n  [SameObject] readonly attribute HTMLCollection selectedOptions;\n  attribute long selectedIndex;\n  attribute DOMString value;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDataListElement : HTMLElement {\n  [SameObject] readonly attribute HTMLCollection options;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLOptGroupElement : HTMLElement {\n  [CEReactions] attribute boolean disabled;\n  [CEReactions] attribute DOMString label;\n};\n\n[Exposed=Window,\n HTMLConstructor,\n NamedConstructor=Option(optional DOMString text = \"\", optional DOMString value, optional boolean defaultSelected = false, optional boolean selected = false)]\ninterface HTMLOptionElement : HTMLElement {\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString label;\n  [CEReactions] attribute boolean defaultSelected;\n  attribute boolean selected;\n  [CEReactions] attribute DOMString value;\n\n  [CEReactions] attribute DOMString text;\n  readonly attribute long index;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTextAreaElement : HTMLElement {\n  [CEReactions] attribute DOMString autocomplete;\n  [CEReactions] attribute boolean autofocus;\n  [CEReactions] attribute unsigned long cols;\n  [CEReactions] attribute DOMString dirName;\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute long maxLength;\n  [CEReactions] attribute long minLength;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString placeholder;\n  [CEReactions] attribute boolean readOnly;\n  [CEReactions] attribute boolean required;\n  [CEReactions] attribute unsigned long rows;\n  [CEReactions] attribute DOMString wrap;\n\n  readonly attribute DOMString type;\n  [CEReactions] attribute DOMString defaultValue;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString value;\n  readonly attribute unsigned long textLength;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n\n  undefined select();\n  attribute unsigned long selectionStart;\n  attribute unsigned long selectionEnd;\n  attribute DOMString selectionDirection;\n  undefined setRangeText(DOMString replacement);\n  undefined setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = \"preserve\");\n  undefined setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLOutputElement : HTMLElement {\n  [SameObject, PutForwards=value] readonly attribute DOMTokenList htmlFor;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString name;\n\n  readonly attribute DOMString type;\n  [CEReactions] attribute DOMString defaultValue;\n  [CEReactions] attribute DOMString value;\n\n  readonly attribute boolean willValidate;\n  readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLProgressElement : HTMLElement {\n  [CEReactions] attribute double value;\n  [CEReactions] attribute double max;\n  readonly attribute double position;\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMeterElement : HTMLElement {\n  [CEReactions] attribute double value;\n  [CEReactions] attribute double min;\n  [CEReactions] attribute double max;\n  [CEReactions] attribute double low;\n  [CEReactions] attribute double high;\n  [CEReactions] attribute double optimum;\n  readonly attribute NodeList labels;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFieldSetElement : HTMLElement {\n  [CEReactions] attribute boolean disabled;\n  readonly attribute HTMLFormElement? form;\n  [CEReactions] attribute DOMString name;\n\n  readonly attribute DOMString type;\n\n  [SameObject] readonly attribute HTMLCollection elements;\n\n  readonly attribute boolean willValidate;\n  [SameObject] readonly attribute ValidityState validity;\n  readonly attribute DOMString validationMessage;\n  boolean checkValidity();\n  boolean reportValidity();\n  undefined setCustomValidity(DOMString error);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLLegendElement : HTMLElement {\n  readonly attribute HTMLFormElement? form;\n};\n\nenum SelectionMode {\n  \"select\",\n  \"start\",\n  \"end\",\n  \"preserve\" // default\n};\n\n[Exposed=Window]\ninterface ValidityState {\n  readonly attribute boolean valueMissing;\n  readonly attribute boolean typeMismatch;\n  readonly attribute boolean patternMismatch;\n  readonly attribute boolean tooLong;\n  readonly attribute boolean tooShort;\n  readonly attribute boolean rangeUnderflow;\n  readonly attribute boolean rangeOverflow;\n  readonly attribute boolean stepMismatch;\n  readonly attribute boolean badInput;\n  readonly attribute boolean customError;\n  readonly attribute boolean valid;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDetailsElement : HTMLElement {\n  [CEReactions] attribute boolean open;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDialogElement : HTMLElement {\n  [CEReactions] attribute boolean open;\n  attribute DOMString returnValue;\n  [CEReactions] undefined show();\n  [CEReactions] undefined showModal();\n  [CEReactions] undefined close(optional DOMString returnValue);\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLScriptElement : HTMLElement {\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute boolean noModule;\n  [CEReactions] attribute boolean async;\n  [CEReactions] attribute boolean defer;\n  [CEReactions] attribute DOMString? crossOrigin;\n  [CEReactions] attribute DOMString text;\n  [CEReactions] attribute DOMString integrity;\n\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLTemplateElement : HTMLElement {\n  readonly attribute DocumentFragment content;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLSlotElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  sequence<Node> assignedNodes(optional AssignedNodesOptions options = {});\n  sequence<Element> assignedElements(optional AssignedNodesOptions options = {});\n};\n\ndictionary AssignedNodesOptions {\n  boolean flatten = false;\n};\n\ntypedef (CanvasRenderingContext2D or ImageBitmapRenderingContext or WebGLRenderingContext) RenderingContext;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLCanvasElement : HTMLElement {\n  [CEReactions] attribute unsigned long width;\n  [CEReactions] attribute unsigned long height;\n\n  RenderingContext? getContext(DOMString contextId, optional any options = null);\n\n  USVString toDataURL(optional DOMString type, optional any quality);\n  undefined toBlob(BlobCallback _callback, optional DOMString type, optional any quality);\n  OffscreenCanvas transferControlToOffscreen();\n};\n\ncallback BlobCallback = undefined (Blob? blob);\n\ntypedef (HTMLImageElement or\n         SVGImageElement) HTMLOrSVGImageElement;\n\ntypedef (HTMLOrSVGImageElement or\n         HTMLVideoElement or\n         HTMLCanvasElement or\n         ImageBitmap or\n         OffscreenCanvas) CanvasImageSource;\n\nenum CanvasFillRule { \"nonzero\", \"evenodd\" };\n\ndictionary CanvasRenderingContext2DSettings {\n  boolean alpha = true;\n};\n\nenum ImageSmoothingQuality { \"low\", \"medium\", \"high\" };\n\n[Exposed=Window]\ninterface CanvasRenderingContext2D {\n  // back-reference to the canvas\n  readonly attribute HTMLCanvasElement canvas;\n};\nCanvasRenderingContext2D includes CanvasState;\nCanvasRenderingContext2D includes CanvasTransform;\nCanvasRenderingContext2D includes CanvasCompositing;\nCanvasRenderingContext2D includes CanvasImageSmoothing;\nCanvasRenderingContext2D includes CanvasFillStrokeStyles;\nCanvasRenderingContext2D includes CanvasShadowStyles;\nCanvasRenderingContext2D includes CanvasFilters;\nCanvasRenderingContext2D includes CanvasRect;\nCanvasRenderingContext2D includes CanvasDrawPath;\nCanvasRenderingContext2D includes CanvasUserInterface;\nCanvasRenderingContext2D includes CanvasText;\nCanvasRenderingContext2D includes CanvasDrawImage;\nCanvasRenderingContext2D includes CanvasImageData;\nCanvasRenderingContext2D includes CanvasPathDrawingStyles;\nCanvasRenderingContext2D includes CanvasTextDrawingStyles;\nCanvasRenderingContext2D includes CanvasPath;\n\ninterface mixin CanvasState {\n  // state\n  undefined save(); // push state on state stack\n  undefined restore(); // pop state stack and restore state\n};\n\ninterface mixin CanvasTransform {\n  // transformations (default transform is the identity matrix)\n  undefined scale(unrestricted double x, unrestricted double y);\n  undefined rotate(unrestricted double angle);\n  undefined translate(unrestricted double x, unrestricted double y);\n  undefined transform(unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f);\n\n  [NewObject] DOMMatrix getTransform();\n  undefined setTransform(unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f);\n  undefined setTransform(optional DOMMatrix2DInit transform = {});\n  undefined resetTransform();\n\n};\n\ninterface mixin CanvasCompositing {\n  // compositing\n  attribute unrestricted double globalAlpha; // (default 1.0)\n  attribute DOMString globalCompositeOperation; // (default source-over)\n};\n\ninterface mixin CanvasImageSmoothing {\n  // image smoothing\n  attribute boolean imageSmoothingEnabled; // (default true)\n  attribute ImageSmoothingQuality imageSmoothingQuality; // (default low)\n\n};\n\ninterface mixin CanvasFillStrokeStyles {\n  // colors and styles (see also the CanvasPathDrawingStyles and CanvasTextDrawingStyles interfaces)\n  attribute (DOMString or CanvasGradient or CanvasPattern) strokeStyle; // (default black)\n  attribute (DOMString or CanvasGradient or CanvasPattern) fillStyle; // (default black)\n  CanvasGradient createLinearGradient(double x0, double y0, double x1, double y1);\n  CanvasGradient createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1);\n  CanvasPattern? createPattern(CanvasImageSource image, [TreatNullAs=EmptyString] DOMString repetition);\n\n};\n\ninterface mixin CanvasShadowStyles {\n  // shadows\n  attribute unrestricted double shadowOffsetX; // (default 0)\n  attribute unrestricted double shadowOffsetY; // (default 0)\n  attribute unrestricted double shadowBlur; // (default 0)\n  attribute DOMString shadowColor; // (default transparent black)\n};\n\ninterface mixin CanvasFilters {\n  // filters\n  attribute DOMString filter; // (default \"none\")\n};\n\ninterface mixin CanvasRect {\n  // rects\n  undefined clearRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n  undefined fillRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n  undefined strokeRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n};\n\ninterface mixin CanvasDrawPath {\n  // path API (see also CanvasPath)\n  undefined beginPath();\n  undefined fill(optional CanvasFillRule fillRule = \"nonzero\");\n  undefined fill(Path2D path, optional CanvasFillRule fillRule = \"nonzero\");\n  undefined stroke();\n  undefined stroke(Path2D path);\n  undefined clip(optional CanvasFillRule fillRule = \"nonzero\");\n  undefined clip(Path2D path, optional CanvasFillRule fillRule = \"nonzero\");\n  undefined resetClip();\n  boolean isPointInPath(unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = \"nonzero\");\n  boolean isPointInPath(Path2D path, unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = \"nonzero\");\n  boolean isPointInStroke(unrestricted double x, unrestricted double y);\n  boolean isPointInStroke(Path2D path, unrestricted double x, unrestricted double y);\n};\n\ninterface mixin CanvasUserInterface {\n  undefined drawFocusIfNeeded(Element element);\n  undefined drawFocusIfNeeded(Path2D path, Element element);\n  undefined scrollPathIntoView();\n  undefined scrollPathIntoView(Path2D path);\n};\n\ninterface mixin CanvasText {\n  // text (see also the CanvasPathDrawingStyles and CanvasTextDrawingStyles interfaces)\n  undefined fillText(DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth);\n  undefined strokeText(DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth);\n  TextMetrics measureText(DOMString text);\n};\n\ninterface mixin CanvasDrawImage {\n  // drawing images\n  undefined drawImage(CanvasImageSource image, unrestricted double dx, unrestricted double dy);\n  undefined drawImage(CanvasImageSource image, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh);\n  undefined drawImage(CanvasImageSource image, unrestricted double sx, unrestricted double sy, unrestricted double sw, unrestricted double sh, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh);\n};\n\ninterface mixin CanvasImageData {\n  // pixel manipulation\n  ImageData createImageData(long sw, long sh);\n  ImageData createImageData(ImageData imagedata);\n  ImageData getImageData(long sx, long sy, long sw, long sh);\n  undefined putImageData(ImageData imagedata, long dx, long dy);\n  undefined putImageData(ImageData imagedata, long dx, long dy, long dirtyX, long dirtyY, long dirtyWidth, long dirtyHeight);\n};\n\nenum CanvasLineCap { \"butt\", \"round\", \"square\" };\nenum CanvasLineJoin { \"round\", \"bevel\", \"miter\" };\nenum CanvasTextAlign { \"start\", \"end\", \"left\", \"right\", \"center\" };\nenum CanvasTextBaseline { \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\" };\nenum CanvasDirection { \"ltr\", \"rtl\", \"inherit\" };\n\ninterface mixin CanvasPathDrawingStyles {\n  // line caps/joins\n  attribute unrestricted double lineWidth; // (default 1)\n  attribute CanvasLineCap lineCap; // (default \"butt\")\n  attribute CanvasLineJoin lineJoin; // (default \"miter\")\n  attribute unrestricted double miterLimit; // (default 10)\n\n  // dashed lines\n  undefined setLineDash(sequence<unrestricted double> segments); // default empty\n  sequence<unrestricted double> getLineDash();\n  attribute unrestricted double lineDashOffset;\n};\n\ninterface mixin CanvasTextDrawingStyles {\n  // text\n  attribute DOMString font; // (default 10px sans-serif)\n  attribute CanvasTextAlign textAlign; // (default: \"start\")\n  attribute CanvasTextBaseline textBaseline; // (default: \"alphabetic\")\n  attribute CanvasDirection direction; // (default: \"inherit\")\n};\n\ninterface mixin CanvasPath {\n  // shared path API methods\n  undefined closePath();\n  undefined moveTo(unrestricted double x, unrestricted double y);\n  undefined lineTo(unrestricted double x, unrestricted double y);\n  undefined quadraticCurveTo(unrestricted double cpx, unrestricted double cpy, unrestricted double x, unrestricted double y);\n  undefined bezierCurveTo(unrestricted double cp1x, unrestricted double cp1y, unrestricted double cp2x, unrestricted double cp2y, unrestricted double x, unrestricted double y);\n  undefined arcTo(unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radius); \n  undefined rect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\n  undefined arc(unrestricted double x, unrestricted double y, unrestricted double radius, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false);\n  undefined ellipse(unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false);\n};\n\n[Exposed=(Window,Worker)]\ninterface CanvasGradient {\n  // opaque object\n  undefined addColorStop(double offset, DOMString color);\n};\n\n[Exposed=(Window,Worker)]\ninterface CanvasPattern {\n  // opaque object\n  undefined setTransform(optional DOMMatrix2DInit transform = {});\n};\n\n[Exposed=Window]\ninterface TextMetrics {\n  // x-direction\n  readonly attribute double width; // advance width\n  readonly attribute double actualBoundingBoxLeft;\n  readonly attribute double actualBoundingBoxRight;\n\n  // y-direction\n  readonly attribute double fontBoundingBoxAscent;\n  readonly attribute double fontBoundingBoxDescent;\n  readonly attribute double actualBoundingBoxAscent;\n  readonly attribute double actualBoundingBoxDescent;\n  readonly attribute double emHeightAscent;\n  readonly attribute double emHeightDescent;\n  readonly attribute double hangingBaseline;\n  readonly attribute double alphabeticBaseline;\n  readonly attribute double ideographicBaseline;\n};\n\n[Constructor(unsigned long sw, unsigned long sh),\n Constructor(Uint8ClampedArray data, unsigned long sw, optional unsigned long sh),\n Exposed=(Window,Worker),\n Serializable]\ninterface ImageData {\n  readonly attribute unsigned long width;\n  readonly attribute unsigned long height;\n  readonly attribute Uint8ClampedArray data;\n};\n\n[Constructor(optional (Path2D or DOMString) path),\n Exposed=(Window,Worker)]\ninterface Path2D {\n  undefined addPath(Path2D path, optional DOMMatrix2DInit transform = {});\n};\nPath2D includes CanvasPath;\n\n[Exposed=Window]\ninterface ImageBitmapRenderingContext {\n  readonly attribute HTMLCanvasElement canvas;\n  undefined transferFromImageBitmap(ImageBitmap? bitmap);\n};\n\ndictionary ImageBitmapRenderingContextSettings {\n  boolean alpha = true;\n};\n\ntypedef (OffscreenCanvasRenderingContext2D or\n        WebGLRenderingContext) OffscreenRenderingContext;\n\ndictionary ImageEncodeOptions {\n  DOMString type = \"image/png\";\n  unrestricted double quality = 1.0;\n};\n\nenum OffscreenRenderingContextId { \"2d\", \"webgl\" };\n\n[Constructor([EnforceRange] unsigned long long width, [EnforceRange] unsigned long long height), Exposed=(Window,Worker), Transferable]\ninterface OffscreenCanvas : EventTarget {\n  attribute unsigned long long width;\n  attribute unsigned long long height;\n\n  OffscreenRenderingContext? getContext(OffscreenRenderingContextId contextId, optional any options = null);\n  ImageBitmap transferToImageBitmap();\n  Promise<Blob> convertToBlob(optional ImageEncodeOptions options = {});\n};\n\n[Exposed=(Window,Worker)]\ninterface OffscreenCanvasRenderingContext2D {\n  undefined commit();\n  readonly attribute OffscreenCanvas canvas;\n};\n\nOffscreenCanvasRenderingContext2D includes CanvasState;\nOffscreenCanvasRenderingContext2D includes CanvasTransform;\nOffscreenCanvasRenderingContext2D includes CanvasCompositing;\nOffscreenCanvasRenderingContext2D includes CanvasImageSmoothing;\nOffscreenCanvasRenderingContext2D includes CanvasFillStrokeStyles;\nOffscreenCanvasRenderingContext2D includes CanvasShadowStyles;\nOffscreenCanvasRenderingContext2D includes CanvasFilters;\nOffscreenCanvasRenderingContext2D includes CanvasRect;\nOffscreenCanvasRenderingContext2D includes CanvasDrawPath;\nOffscreenCanvasRenderingContext2D includes CanvasDrawImage;\nOffscreenCanvasRenderingContext2D includes CanvasImageData;\nOffscreenCanvasRenderingContext2D includes CanvasPathDrawingStyles;\nOffscreenCanvasRenderingContext2D includes CanvasPath;\n\n[Exposed=Window]\ninterface CustomElementRegistry {\n  [CEReactions] undefined define(DOMString name, Function constructor, optional ElementDefinitionOptions options = {});\n  any get(DOMString name);\n  Promise<undefined> whenDefined(DOMString name);\n  [CEReactions] undefined upgrade(Node root);\n};\n\ndictionary ElementDefinitionOptions {\n  DOMString extends;\n};\n\ndictionary FocusOptions {\n  boolean preventScroll = false;\n};\n\ninterface mixin ElementContentEditable {\n  [CEReactions] attribute DOMString contentEditable;\n  readonly attribute boolean isContentEditable;\n  [CEReactions] attribute DOMString inputMode;\n};\n\n[Exposed=Window,\n Constructor]\ninterface DataTransfer {\n  attribute DOMString dropEffect;\n  attribute DOMString effectAllowed;\n\n  [SameObject] readonly attribute DataTransferItemList items;\n\n  undefined setDragImage(Element image, long x, long y);\n\n  /* old interface */\n  readonly attribute FrozenArray<DOMString> types;\n  DOMString getData(DOMString format);\n  undefined setData(DOMString format, DOMString data);\n  undefined clearData(optional DOMString format);\n  [SameObject] readonly attribute FileList files;\n};\n\n[Exposed=Window]\ninterface DataTransferItemList {\n  readonly attribute unsigned long length;\n  getter DataTransferItem (unsigned long index);\n  DataTransferItem? add(DOMString data, DOMString type);\n  DataTransferItem? add(File data);\n  undefined remove(unsigned long index);\n  undefined clear();\n};\n\n[Exposed=Window]\ninterface DataTransferItem {\n  readonly attribute DOMString kind;\n  readonly attribute DOMString type;\n  undefined getAsString(FunctionStringCallback? _callback);\n  File? getAsFile();\n};\n\ncallback FunctionStringCallback = undefined (DOMString data);\n\n[Exposed=Window,\n Constructor(DOMString type, optional DragEventInit eventInitDict = {})]\ninterface DragEvent : MouseEvent {\n  readonly attribute DataTransfer? dataTransfer;\n};\n\ndictionary DragEventInit : MouseEventInit {\n  DataTransfer? dataTransfer = null;\n};\n\n[Global=Window,\n Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface Window : EventTarget {\n  // the current browsing context\n  [Unforgeable] readonly attribute WindowProxy window;\n  [Replaceable] readonly attribute WindowProxy self;\n  [Unforgeable] readonly attribute Document document;\n  attribute DOMString name; \n  [PutForwards=href, Unforgeable] readonly attribute Location location;\n  readonly attribute History history;\n  readonly attribute CustomElementRegistry customElements;\n  [Replaceable] readonly attribute BarProp locationbar;\n  [Replaceable] readonly attribute BarProp menubar;\n  [Replaceable] readonly attribute BarProp personalbar;\n  [Replaceable] readonly attribute BarProp scrollbars;\n  [Replaceable] readonly attribute BarProp statusbar;\n  [Replaceable] readonly attribute BarProp toolbar;\n  attribute DOMString status;\n  undefined close();\n  readonly attribute boolean closed;\n  undefined stop();\n  undefined focus();\n  undefined blur();\n\n  // other browsing contexts\n  [Replaceable] readonly attribute WindowProxy frames;\n  [Replaceable] readonly attribute unsigned long length;\n  [Unforgeable] readonly attribute WindowProxy? top;\n  attribute any opener;\n  [Replaceable] readonly attribute WindowProxy? parent;\n  readonly attribute Element? frameElement;\n  WindowProxy? open(optional USVString url = \"about:blank\", optional DOMString target = \"_blank\", optional [TreatNullAs=EmptyString] DOMString features = \"\");\n  getter object (DOMString name);\n  // Since this is the global object, the IDL named getter adds a NamedPropertiesObject exotic\n  // object on the prototype chain. Indeed, this does not make the global object an exotic object.\n  // Indexed access is taken care of by the WindowProxy exotic object.\n\n  // the user agent\n  readonly attribute Navigator navigator; \n  readonly attribute ApplicationCache applicationCache;\n\n  // user prompts\n  undefined alert();\n  undefined alert(DOMString message);\n  boolean confirm(optional DOMString message = \"\");\n  DOMString? prompt(optional DOMString message = \"\", optional DOMString default = \"\");\n  undefined print();\n\n  unsigned long requestAnimationFrame(FrameRequestCallback callback);\n  undefined cancelAnimationFrame(unsigned long handle);\n\n  undefined postMessage(any message, USVString targetOrigin, optional sequence<object> transfer = []);\n};\nWindow includes GlobalEventHandlers;\nWindow includes WindowEventHandlers;\n\ncallback FrameRequestCallback = undefined (DOMHighResTimeStamp time);\n\n[Exposed=Window]\ninterface BarProp {\n  readonly attribute boolean visible;\n};\n\nenum ScrollRestoration { \"auto\", \"manual\" };\n\n[Exposed=Window]\ninterface History {\n  readonly attribute unsigned long length;\n  attribute ScrollRestoration scrollRestoration;\n  readonly attribute any state;\n  undefined go(optional long delta = 0);\n  undefined back();\n  undefined forward();\n  undefined pushState(any data, DOMString title, optional USVString? url = null);\n  undefined replaceState(any data, DOMString title, optional USVString? url = null);\n};\n\n[Exposed=Window]\ninterface Location { // but see also additional creation steps and overridden internal methods\n  [Unforgeable] stringifier attribute USVString href;\n  [Unforgeable] readonly attribute USVString origin;\n  [Unforgeable] attribute USVString protocol;\n  [Unforgeable] attribute USVString host;\n  [Unforgeable] attribute USVString hostname;\n  [Unforgeable] attribute USVString port;\n  [Unforgeable] attribute USVString pathname;\n  [Unforgeable] attribute USVString search;\n  [Unforgeable] attribute USVString hash;\n\n  [Unforgeable] undefined assign(USVString url);\n  [Unforgeable] undefined replace(USVString url);\n  [Unforgeable] undefined reload();\n\n  [Unforgeable, SameObject] readonly attribute DOMStringList ancestorOrigins;\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional PopStateEventInit eventInitDict = {})]\ninterface PopStateEvent : Event {\n  readonly attribute any state;\n};\n\ndictionary PopStateEventInit : EventInit {\n  any state = null;\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional HashChangeEventInit eventInitDict = {})]\ninterface HashChangeEvent : Event {\n  readonly attribute USVString oldURL;\n  readonly attribute USVString newURL;\n};\n\ndictionary HashChangeEventInit : EventInit {\n  USVString oldURL = \"\";\n  USVString newURL = \"\";\n};\n\n[Exposed=Window,\n Constructor(DOMString type, optional PageTransitionEventInit eventInitDict = {})]\ninterface PageTransitionEvent : Event {\n  readonly attribute boolean persisted;\n};\n\ndictionary PageTransitionEventInit : EventInit {\n  boolean persisted = false;\n};\n\n[Exposed=Window]\ninterface BeforeUnloadEvent : Event {\n  attribute DOMString returnValue;\n};\n\n[Exposed=Window]\ninterface ApplicationCache : EventTarget {\n\n  // update status\n  const unsigned short UNCACHED = 0;\n  const unsigned short IDLE = 1;\n  const unsigned short CHECKING = 2;\n  const unsigned short DOWNLOADING = 3;\n  const unsigned short UPDATEREADY = 4;\n  const unsigned short OBSOLETE = 5;\n  readonly attribute unsigned short status;\n\n  // updates\n  undefined update();\n  undefined abort();\n  undefined swapCache();\n\n  // events\n  attribute EventHandler onchecking;\n  attribute EventHandler onerror;\n  attribute EventHandler onnoupdate;\n  attribute EventHandler ondownloading;\n  attribute EventHandler onprogress;\n  attribute EventHandler onupdateready;\n  attribute EventHandler oncached;\n  attribute EventHandler onobsolete;\n};\n\ninterface mixin NavigatorOnLine {\n  readonly attribute boolean onLine;\n};\n\n[Constructor(DOMString type, optional ErrorEventInit eventInitDict = {}), Exposed=(Window,Worker)]\ninterface ErrorEvent : Event {\n  readonly attribute DOMString message;\n  readonly attribute USVString filename;\n  readonly attribute unsigned long lineno;\n  readonly attribute unsigned long colno;\n  readonly attribute any error;\n};\n\ndictionary ErrorEventInit : EventInit {\n  DOMString message = \"\";\n  USVString filename = \"\";\n  unsigned long lineno = 0;\n  unsigned long colno = 0;\n  any error = null;\n};\n\n[Constructor(DOMString type, PromiseRejectionEventInit eventInitDict), Exposed=(Window,Worker)]\ninterface PromiseRejectionEvent : Event {\n  readonly attribute Promise<any> promise;\n  readonly attribute any reason;\n};\n\ndictionary PromiseRejectionEventInit : EventInit {\n  required Promise<any> promise;\n  any reason;\n};\n\n[TreatNonObjectAsNull]\ncallback EventHandlerNonNull = any (Event event);\ntypedef EventHandlerNonNull? EventHandler;\n\n[TreatNonObjectAsNull]\ncallback OnErrorEventHandlerNonNull = any ((Event or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long colno, optional any error);\ntypedef OnErrorEventHandlerNonNull? OnErrorEventHandler;\n\n[TreatNonObjectAsNull]\ncallback OnBeforeUnloadEventHandlerNonNull = DOMString? (Event event);\ntypedef OnBeforeUnloadEventHandlerNonNull? OnBeforeUnloadEventHandler;\n\ninterface mixin GlobalEventHandlers {\n  attribute EventHandler onabort;\n  attribute EventHandler onauxclick;\n  attribute EventHandler onblur;\n  attribute EventHandler oncancel;\n  attribute EventHandler oncanplay;\n  attribute EventHandler oncanplaythrough;\n  attribute EventHandler onchange;\n  attribute EventHandler onclick;\n  attribute EventHandler onclose;\n  attribute EventHandler oncontextmenu;\n  attribute EventHandler oncuechange;\n  attribute EventHandler ondblclick;\n  attribute EventHandler ondrag;\n  attribute EventHandler ondragend;\n  attribute EventHandler ondragenter;\n  attribute EventHandler ondragexit;\n  attribute EventHandler ondragleave;\n  attribute EventHandler ondragover;\n  attribute EventHandler ondragstart;\n  attribute EventHandler ondrop;\n  attribute EventHandler ondurationchange;\n  attribute EventHandler onemptied;\n  attribute EventHandler onended;\n  attribute OnErrorEventHandler onerror;\n  attribute EventHandler onfocus;\n  attribute EventHandler oninput;\n  attribute EventHandler oninvalid;\n  attribute EventHandler onkeydown;\n  attribute EventHandler onkeypress;\n  attribute EventHandler onkeyup;\n  attribute EventHandler onload;\n  attribute EventHandler onloadeddata;\n  attribute EventHandler onloadedmetadata;\n  attribute EventHandler onloadend;\n  attribute EventHandler onloadstart;\n  attribute EventHandler onmousedown;\n  [LenientThis] attribute EventHandler onmouseenter;\n  [LenientThis] attribute EventHandler onmouseleave;\n  attribute EventHandler onmousemove;\n  attribute EventHandler onmouseout;\n  attribute EventHandler onmouseover;\n  attribute EventHandler onmouseup;\n  attribute EventHandler onwheel;\n  attribute EventHandler onpause;\n  attribute EventHandler onplay;\n  attribute EventHandler onplaying;\n  attribute EventHandler onprogress;\n  attribute EventHandler onratechange;\n  attribute EventHandler onreset;\n  attribute EventHandler onresize;\n  attribute EventHandler onscroll;\n  attribute EventHandler onsecuritypolicyviolation;\n  attribute EventHandler onseeked;\n  attribute EventHandler onseeking;\n  attribute EventHandler onselect;\n  attribute EventHandler onstalled;\n  attribute EventHandler onsubmit;\n  attribute EventHandler onsuspend;\n  attribute EventHandler ontimeupdate;\n  attribute EventHandler ontoggle;\n  attribute EventHandler onvolumechange;\n  attribute EventHandler onwaiting;\n};\n\ninterface mixin WindowEventHandlers {\n  attribute EventHandler onafterprint;\n  attribute EventHandler onbeforeprint;\n  attribute OnBeforeUnloadEventHandler onbeforeunload;\n  attribute EventHandler onhashchange;\n  attribute EventHandler onlanguagechange;\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n  attribute EventHandler onoffline;\n  attribute EventHandler ononline;\n  attribute EventHandler onpagehide;\n  attribute EventHandler onpageshow;\n  attribute EventHandler onpopstate;\n  attribute EventHandler onrejectionhandled;\n  attribute EventHandler onstorage;\n  attribute EventHandler onunhandledrejection;\n  attribute EventHandler onunload;\n};\n\ninterface mixin DocumentAndElementEventHandlers {\n  attribute EventHandler oncopy;\n  attribute EventHandler oncut;\n  attribute EventHandler onpaste;\n};\n\ntypedef (DOMString or Function) TimerHandler;\n\ninterface mixin WindowOrWorkerGlobalScope {\n  [Replaceable] readonly attribute USVString origin;\n\n  // base64 utility methods\n  DOMString btoa(DOMString data);\n  ByteString atob(DOMString data);\n\n  // timers\n  long setTimeout(TimerHandler handler, optional long timeout = 0, any... arguments);\n  undefined clearTimeout(optional long handle = 0);\n  long setInterval(TimerHandler handler, optional long timeout = 0, any... arguments);\n  undefined clearInterval(optional long handle = 0);\n\n  // ImageBitmap\n  Promise<ImageBitmap> createImageBitmap(ImageBitmapSource image, optional ImageBitmapOptions options = {});\n  Promise<ImageBitmap> createImageBitmap(ImageBitmapSource image, long sx, long sy, long sw, long sh, optional ImageBitmapOptions options = {});\n};\nWindow includes WindowOrWorkerGlobalScope;\nWorkerGlobalScope includes WindowOrWorkerGlobalScope;\n\n[Exposed=Window]\ninterface Navigator {\n  // objects implementing this interface also implement the interfaces given below\n};\nNavigator includes NavigatorID;\nNavigator includes NavigatorLanguage;\nNavigator includes NavigatorOnLine;\nNavigator includes NavigatorContentUtils;\nNavigator includes NavigatorCookies;\nNavigator includes NavigatorPlugins;\nNavigator includes NavigatorConcurrentHardware;\n\ninterface mixin NavigatorID {\n  readonly attribute DOMString appCodeName; // constant \"Mozilla\"\n  readonly attribute DOMString appName; // constant \"Netscape\"\n  readonly attribute DOMString appVersion;\n  readonly attribute DOMString platform;\n  readonly attribute DOMString product; // constant \"Gecko\"\n  [Exposed=Window] readonly attribute DOMString productSub;\n  readonly attribute DOMString userAgent;\n  [Exposed=Window] readonly attribute DOMString vendor;\n  [Exposed=Window] readonly attribute DOMString vendorSub; // constant \"\"\n};\n\npartial interface NavigatorID {\n  [Exposed=Window] boolean taintEnabled(); // constant false\n  [Exposed=Window] readonly attribute DOMString oscpu;\n};\n\ninterface mixin NavigatorLanguage {\n  readonly attribute DOMString language;\n  readonly attribute FrozenArray<DOMString> languages;\n};\n\ninterface mixin NavigatorContentUtils {\n  undefined registerProtocolHandler(DOMString scheme, USVString url, DOMString title);\n  undefined unregisterProtocolHandler(DOMString scheme, USVString url);\n};\n\ninterface mixin NavigatorCookies {\n  readonly attribute boolean cookieEnabled;\n};\n\ninterface mixin NavigatorPlugins {\n  [SameObject] readonly attribute PluginArray plugins;\n  [SameObject] readonly attribute MimeTypeArray mimeTypes;\n  boolean javaEnabled();\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface PluginArray {\n  undefined refresh(optional boolean reload = false);\n  readonly attribute unsigned long length;\n  getter Plugin? item(unsigned long index);\n  getter Plugin? namedItem(DOMString name);\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface MimeTypeArray {\n  readonly attribute unsigned long length;\n  getter MimeType? item(unsigned long index);\n  getter MimeType? namedItem(DOMString name);\n};\n\n[Exposed=Window,\n LegacyUnenumerableNamedProperties]\ninterface Plugin {\n  readonly attribute DOMString name;\n  readonly attribute DOMString description;\n  readonly attribute DOMString filename;\n  readonly attribute unsigned long length;\n  getter MimeType? item(unsigned long index);\n  getter MimeType? namedItem(DOMString name);\n};\n\n[Exposed=Window]\ninterface MimeType {\n  readonly attribute DOMString type;\n  readonly attribute DOMString description;\n  readonly attribute DOMString suffixes; // comma-separated\n  readonly attribute Plugin enabledPlugin;\n};\n\n[Exposed=(Window,Worker), Serializable, Transferable]\ninterface ImageBitmap {\n  readonly attribute unsigned long width;\n  readonly attribute unsigned long height;\n  undefined close();\n};\n\ntypedef (CanvasImageSource or\n         Blob or\n         ImageData) ImageBitmapSource;\n\nenum ImageOrientation { \"none\", \"flipY\" };\nenum PremultiplyAlpha { \"none\", \"premultiply\", \"default\" };\nenum ColorSpaceConversion { \"none\", \"default\" };\nenum ResizeQuality { \"pixelated\", \"low\", \"medium\", \"high\" };\n\ndictionary ImageBitmapOptions {\n  ImageOrientation imageOrientation = \"none\";\n  PremultiplyAlpha premultiplyAlpha = \"default\";\n  ColorSpaceConversion colorSpaceConversion = \"default\";\n  [EnforceRange] unsigned long resizeWidth;\n  [EnforceRange] unsigned long resizeHeight;\n  ResizeQuality resizeQuality = \"low\";\n};\n\n[Constructor(DOMString type, optional MessageEventInit eventInitDict = {}), Exposed=(Window,Worker,AudioWorklet)]\ninterface MessageEvent : Event {\n  readonly attribute any data;\n  readonly attribute USVString origin;\n  readonly attribute DOMString lastEventId;\n  readonly attribute MessageEventSource? source;\n  readonly attribute FrozenArray<MessagePort> ports;\n\n  undefined initMessageEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any data = null, optional USVString origin = \"\", optional DOMString lastEventId = \"\", optional MessageEventSource? source = null, optional sequence<MessagePort> ports = []);\n};\n\ndictionary MessageEventInit : EventInit {\n  any data = null;\n  USVString origin = \"\";\n  DOMString lastEventId = \"\";\n  MessageEventSource? source = null;\n  sequence<MessagePort> ports = [];\n};\n\ntypedef (WindowProxy or MessagePort or ServiceWorker) MessageEventSource;\n\n[Constructor(USVString url, optional EventSourceInit eventSourceInitDict = {}), Exposed=(Window,Worker)]\ninterface EventSource : EventTarget {\n  readonly attribute USVString url;\n  readonly attribute boolean withCredentials;\n\n  // ready state\n  const unsigned short CONNECTING = 0;\n  const unsigned short OPEN = 1;\n  const unsigned short CLOSED = 2;\n  readonly attribute unsigned short readyState;\n\n  // networking\n  attribute EventHandler onopen;\n  attribute EventHandler onmessage;\n  attribute EventHandler onerror;\n  undefined close();\n};\n\ndictionary EventSourceInit {\n  boolean withCredentials = false;\n};\n\nenum BinaryType { \"blob\", \"arraybuffer\" };\n[Constructor(USVString url, optional (DOMString or sequence<DOMString>) protocols = []), Exposed=(Window,Worker)]\ninterface WebSocket : EventTarget {\n  readonly attribute USVString url;\n\n  // ready state\n  const unsigned short CONNECTING = 0;\n  const unsigned short OPEN = 1;\n  const unsigned short CLOSING = 2;\n  const unsigned short CLOSED = 3;\n  readonly attribute unsigned short readyState;\n  readonly attribute unsigned long long bufferedAmount;\n\n  // networking\n  attribute EventHandler onopen;\n  attribute EventHandler onerror;\n  attribute EventHandler onclose;\n  readonly attribute DOMString extensions;\n  readonly attribute DOMString protocol;\n  undefined close(optional [Clamp] unsigned short code, optional USVString reason);\n\n  // messaging\n  attribute EventHandler onmessage;\n  attribute BinaryType binaryType;\n  undefined send(USVString data);\n  undefined send(Blob data);\n  undefined send(ArrayBuffer data);\n  undefined send(ArrayBufferView data);\n};\n\n[Constructor(DOMString type, optional CloseEventInit eventInitDict = {}), Exposed=(Window,Worker)]\ninterface CloseEvent : Event {\n  readonly attribute boolean wasClean;\n  readonly attribute unsigned short code;\n  readonly attribute USVString reason;\n};\n\ndictionary CloseEventInit : EventInit {\n  boolean wasClean = false;\n  unsigned short code = 0;\n  USVString reason = \"\";\n};\n\n[Constructor, Exposed=(Window,Worker)]\ninterface MessageChannel {\n  readonly attribute MessagePort port1;\n  readonly attribute MessagePort port2;\n};\n\n[Exposed=(Window,Worker,AudioWorklet), Transferable]\ninterface MessagePort : EventTarget {\n  undefined postMessage(any message, optional sequence<object> transfer = []);\n  undefined start();\n  undefined close();\n\n  // event handlers\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\n[Constructor(DOMString name), Exposed=(Window,Worker)]\ninterface BroadcastChannel : EventTarget {\n  readonly attribute DOMString name;\n  undefined postMessage(any message);\n  undefined close();\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\n[Exposed=Worker]\ninterface WorkerGlobalScope : EventTarget {\n  readonly attribute WorkerGlobalScope self;\n  readonly attribute WorkerLocation location;\n  readonly attribute WorkerNavigator navigator;\n  undefined importScripts(USVString... urls);\n\n  attribute OnErrorEventHandler onerror;\n  attribute EventHandler onlanguagechange;\n  attribute EventHandler onoffline;\n  attribute EventHandler ononline;\n  attribute EventHandler onrejectionhandled;\n  attribute EventHandler onunhandledrejection;\n};\n\n[Global=(Worker,DedicatedWorker),Exposed=DedicatedWorker]\ninterface DedicatedWorkerGlobalScope : WorkerGlobalScope {\n  [Replaceable] readonly attribute DOMString name;\n\n  undefined postMessage(any message, optional sequence<object> transfer = []);\n\n  undefined close();\n\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\n[Global=(Worker,SharedWorker),Exposed=SharedWorker]\ninterface SharedWorkerGlobalScope : WorkerGlobalScope {\n  [Replaceable] readonly attribute DOMString name;\n\n  undefined close();\n\n  attribute EventHandler onconnect;\n};\n\ninterface mixin AbstractWorker {\n  attribute EventHandler onerror;\n};\n\n[Constructor(USVString scriptURL, optional WorkerOptions options = {}), Exposed=(Window,Worker)]\ninterface Worker : EventTarget {\n  undefined terminate();\n\n  undefined postMessage(any message, optional sequence<object> transfer = []);\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};\n\ndictionary WorkerOptions {\n  WorkerType type = \"classic\";\n  RequestCredentials credentials = \"omit\"; // credentials is only used if type is \"module\"\n  DOMString name = \"\";\n};\n\nenum WorkerType { \"classic\", \"module\" };\n\nWorker includes AbstractWorker;\n\n[Constructor(USVString scriptURL, optional (DOMString or WorkerOptions) options = {}),\n Exposed=(Window,Worker)]\ninterface SharedWorker : EventTarget {\n  readonly attribute MessagePort port;\n};\nSharedWorker includes AbstractWorker;\n\ninterface mixin NavigatorConcurrentHardware {\n  readonly attribute unsigned long long hardwareConcurrency;\n};\n\n[Exposed=Worker]\ninterface WorkerNavigator {};\nWorkerNavigator includes NavigatorID;\nWorkerNavigator includes NavigatorLanguage;\nWorkerNavigator includes NavigatorOnLine;\nWorkerNavigator includes NavigatorConcurrentHardware;\n\n[Exposed=Worker]\ninterface WorkerLocation {\n  stringifier readonly attribute USVString href;\n  readonly attribute USVString origin;\n  readonly attribute USVString protocol;\n  readonly attribute USVString host;\n  readonly attribute USVString hostname;\n  readonly attribute USVString port;\n  readonly attribute USVString pathname;\n  readonly attribute USVString search;\n  readonly attribute USVString hash;\n};\n\n[Exposed=Window]\ninterface Storage {\n  readonly attribute unsigned long length;\n  DOMString? key(unsigned long index);\n  getter DOMString? getItem(DOMString key);\n  setter undefined setItem(DOMString key, DOMString value);\n  deleter undefined removeItem(DOMString key);\n  undefined clear();\n};\n\ninterface mixin WindowSessionStorage {\n  readonly attribute Storage sessionStorage;\n};\nWindow includes WindowSessionStorage;\n\ninterface mixin WindowLocalStorage {\n  readonly attribute Storage localStorage;\n};\nWindow includes WindowLocalStorage;\n\n[Exposed=Window,\n Constructor(DOMString type, optional StorageEventInit eventInitDict = {})]\ninterface StorageEvent : Event {\n  readonly attribute DOMString? key;\n  readonly attribute DOMString? oldValue;\n  readonly attribute DOMString? newValue;\n  readonly attribute USVString url;\n  readonly attribute Storage? storageArea;\n};\n\ndictionary StorageEventInit : EventInit {\n  DOMString? key = null;\n  DOMString? oldValue = null;\n  DOMString? newValue = null;\n  USVString url = \"\";\n  Storage? storageArea = null;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLMarqueeElement : HTMLElement {\n  [CEReactions] attribute DOMString behavior;\n  [CEReactions] attribute DOMString bgColor;\n  [CEReactions] attribute DOMString direction;\n  [CEReactions] attribute DOMString height;\n  [CEReactions] attribute unsigned long hspace;\n  [CEReactions] attribute long loop;\n  [CEReactions] attribute unsigned long scrollAmount;\n  [CEReactions] attribute unsigned long scrollDelay;\n  [CEReactions] attribute boolean trueSpeed;\n  [CEReactions] attribute unsigned long vspace;\n  [CEReactions] attribute DOMString width;\n\n  attribute EventHandler onbounce;\n  attribute EventHandler onfinish;\n  attribute EventHandler onstart;\n\n  undefined start();\n  undefined stop();\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFrameSetElement : HTMLElement {\n  [CEReactions] attribute DOMString cols;\n  [CEReactions] attribute DOMString rows;\n};\nHTMLFrameSetElement includes WindowEventHandlers;\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFrameElement : HTMLElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString scrolling;\n  [CEReactions] attribute USVString src;\n  [CEReactions] attribute DOMString frameBorder;\n  [CEReactions] attribute USVString longDesc;\n  [CEReactions] attribute boolean noResize;\n  readonly attribute Document? contentDocument;\n  readonly attribute WindowProxy? contentWindow;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginHeight;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginWidth;\n};\n\npartial interface HTMLAnchorElement {\n  [CEReactions] attribute DOMString coords;\n  [CEReactions] attribute DOMString charset;\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute DOMString rev;\n  [CEReactions] attribute DOMString shape;\n};\n\npartial interface HTMLAreaElement {\n  [CEReactions] attribute boolean noHref;\n};\n\npartial interface HTMLBodyElement {\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString text;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString link;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString vLink;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString aLink;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n  [CEReactions] attribute DOMString background;\n};\n\npartial interface HTMLBRElement {\n  [CEReactions] attribute DOMString clear;\n};\n\npartial interface HTMLTableCaptionElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLTableColElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute DOMString vAlign;\n  [CEReactions] attribute DOMString width;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLDirectoryElement : HTMLElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLDivElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLDListElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLEmbedElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString name;\n};\n\n[Exposed=Window,\n HTMLConstructor]\ninterface HTMLFontElement : HTMLElement {\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString color;\n  [CEReactions] attribute DOMString face;\n  [CEReactions] attribute DOMString size; \n};\n\npartial interface HTMLHeadingElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLHRElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString color;\n  [CEReactions] attribute boolean noShade;\n  [CEReactions] attribute DOMString size;\n  [CEReactions] attribute DOMString width;\n};\n\npartial interface HTMLHtmlElement {\n  [CEReactions] attribute DOMString version;\n};\n\npartial interface HTMLIFrameElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString scrolling;\n  [CEReactions] attribute DOMString frameBorder;\n  [CEReactions] attribute USVString longDesc;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginHeight;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString marginWidth;\n};\n\npartial interface HTMLImageElement {\n  [CEReactions] attribute DOMString name;\n  [CEReactions] attribute USVString lowsrc;\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute unsigned long hspace;\n  [CEReactions] attribute unsigned long vspace;\n  [CEReactions] attribute USVString longDesc;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString border;\n};\n\npartial interface HTMLInputElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString useMap;\n};\n\npartial interface HTMLLegendElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLLIElement {\n  [CEReactions] attribute DOMString type;\n};\n\npartial interface HTMLLinkElement {\n  [CEReactions] attribute DOMString charset;\n  [CEReactions] attribute DOMString rev;\n  [CEReactions] attribute DOMString target;\n};\n\npartial interface HTMLMenuElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLMetaElement {\n  [CEReactions] attribute DOMString scheme;\n};\n\npartial interface HTMLObjectElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString archive;\n  [CEReactions] attribute DOMString code;\n  [CEReactions] attribute boolean declare;\n  [CEReactions] attribute unsigned long hspace;\n  [CEReactions] attribute DOMString standby;\n  [CEReactions] attribute unsigned long vspace;\n  [CEReactions] attribute DOMString codeBase;\n  [CEReactions] attribute DOMString codeType;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString border;\n};\n\npartial interface HTMLOListElement {\n  [CEReactions] attribute boolean compact;\n};\n\npartial interface HTMLParagraphElement {\n  [CEReactions] attribute DOMString align;\n};\n\npartial interface HTMLParamElement {\n  [CEReactions] attribute DOMString type;\n  [CEReactions] attribute DOMString valueType;\n};\n\npartial interface HTMLPreElement {\n  [CEReactions] attribute long width;\n};\n\npartial interface HTMLStyleElement {\n  [CEReactions] attribute DOMString type;\n};\n\npartial interface HTMLScriptElement {\n  [CEReactions] attribute DOMString charset;\n  [CEReactions] attribute DOMString event;\n  [CEReactions] attribute DOMString htmlFor;\n};\n\npartial interface HTMLTableElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString border;\n  [CEReactions] attribute DOMString frame;\n  [CEReactions] attribute DOMString rules;\n  [CEReactions] attribute DOMString summary;\n  [CEReactions] attribute DOMString width;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString cellPadding;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString cellSpacing;\n};\n\npartial interface HTMLTableSectionElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute DOMString vAlign;\n};\n\npartial interface HTMLTableCellElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString axis;\n  [CEReactions] attribute DOMString height;\n  [CEReactions] attribute DOMString width;\n\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute boolean noWrap;\n  [CEReactions] attribute DOMString vAlign;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n};\n\npartial interface HTMLTableRowElement {\n  [CEReactions] attribute DOMString align;\n  [CEReactions] attribute DOMString ch;\n  [CEReactions] attribute DOMString chOff;\n  [CEReactions] attribute DOMString vAlign;\n\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n};\n\npartial interface HTMLUListElement {\n  [CEReactions] attribute boolean compact;\n  [CEReactions] attribute DOMString type;\n};\n\npartial interface Document {\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString fgColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString linkColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString vlinkColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString alinkColor;\n  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString bgColor;\n\n  [SameObject] readonly attribute HTMLCollection anchors;\n  [SameObject] readonly attribute HTMLCollection applets;\n\n  undefined clear();\n  undefined captureEvents();\n  undefined releaseEvents();\n\n  [SameObject] readonly attribute HTMLAllCollection all;\n};\n\npartial interface Window {\n  undefined captureEvents();\n  undefined releaseEvents();\n\n  [Replaceable, SameObject] readonly attribute External external;\n};\n\n[Exposed=Window,\n NoInterfaceObject]\ninterface External {\n  undefined AddSearchProvider();\n  undefined IsSearchProviderInstalled();\n};\n\n\n"`', tests\webidl.rs:44:5
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\std\src\panicking.rs:575
   1: core::panicking::panic_fmt
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:64
   2: core::fmt::Arguments::new_v1
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\fmt\mod.rs:403
   3: core::panicking::assert_failed_inner
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\panicking.rs:258
   4: core::panicking::assert_failed<alloc::string::String,alloc::string::String>
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\panicking.rs:212
   5: webidl::should_write_same
             at .\tests\webidl.rs:44
   6: webidl::should_write_same_tests_defs_html_webidl
             at .\tests\webidl.rs:38
   7: webidl::should_write_same_tests_defs_html_webidl::closure$0
             at .\tests\webidl.rs:38
   8: core::ops::function::FnOnce::call_once<webidl::should_write_same_tests_defs_html_webidl::closure_env$0,tuple$<> >
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14\library\core\src\ops\function.rs:250
   9: core::ops::function::FnOnce::call_once
             at /rustc/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14/library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    interface_constructor
    should_write_same_tests_defs_constructor_webidl
    should_write_same_tests_defs_dictionary_inherits_webidl
    should_write_same_tests_defs_dictionary_webidl
    should_write_same_tests_defs_dom_webidl
    should_write_same_tests_defs_enum_webidl
    should_write_same_tests_defs_extended_attributes_webidl
    should_write_same_tests_defs_html_webidl
    should_write_same_tests_defs_mediacapture_streams_webidl
    should_write_same_tests_defs_reflector_interface_webidl
    should_write_same_tests_defs_streams_webidl

test result: FAILED. 215 passed; 11 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.60s

