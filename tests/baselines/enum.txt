[
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "",
            },
            identifier: Identifier(
                "MealType",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "rice",
                        ),
                        StringLit(
                            "noodles",
                        ),
                        StringLit(
                            "other",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "Meal",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n  ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MealType",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "type",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n  ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Float(
                                                    FloatType {
                                                        unrestricted: None,
                                                        float: VariantToken {
                                                            variant: Float(
                                                                "float",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "size",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "     // in grams\n\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "initialize",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MealType",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "type",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            FloatingPoint(
                                                                MayBeNull {
                                                                    type_: Float(
                                                                        FloatType {
                                                                            unrestricted: None,
                                                                            float: VariantToken {
                                                                                variant: Float(
                                                                                    "float",
                                                                                ),
                                                                                trivia: " ",
                                                                            },
                                                                        },
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "size",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "_AltMealType",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "rice",
                        ),
                        StringLit(
                            "noodles",
                        ),
                        StringLit(
                            "other",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: " ",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
