[
    PartialInterface(
        PartialInterfaceDefinition {
            attributes: None,
            partial: VariantToken {
                variant: Partial(
                    "partial",
                ),
                trivia: "",
            },
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "CSSStyleDeclaration",
                ),
                trivia: "",
            },
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: Some(
                                Bracketed {
                                    open_bracket: VariantToken {
                                        variant: OpenBracket(
                                            "[",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            NoArgs(
                                                ExtendedAttributeNoArgs(
                                                    VariantToken {
                                                        variant: Identifier(
                                                            "CEReactions",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                    },
                                    close_bracket: VariantToken {
                                        variant: CloseBracket(
                                            "]",
                                        ),
                                        trivia: "",
                                    },
                                },
                            ),
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: " ",
                            },
                            type_: AttributedType {
                                attributes: Some(
                                    Bracketed {
                                        open_bracket: VariantToken {
                                            variant: OpenBracket(
                                                "[",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Ident(
                                                    ExtendedAttributeIdent {
                                                        lhs_identifier: VariantToken {
                                                            variant: Identifier(
                                                                "TreatNullAs",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        rhs: VariantToken {
                                                            variant: Identifier(
                                                                "EmptyString",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_bracket: VariantToken {
                                            variant: CloseBracket(
                                                "]",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Identifier(
                                                        "CSSOMString",
                                                    ),
                                                    trivia: " ",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                VariantToken {
                                    variant: Identifier(
                                        "-will-change",
                                    ),
                                    trivia: "",
                                },
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
