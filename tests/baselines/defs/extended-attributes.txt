[
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: Token {
                        trivia: "// Extracted from http://www.w3.org/TR/2015/WD-service-workers-20150205/\n\n",
                        variant: OpenBracket,
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Global",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    list: Parenthesized {
                                        open_paren: Token {
                                            trivia: "",
                                            variant: OpenParen,
                                        },
                                        body: Punctuated {
                                            list: [
                                                Token {
                                                    trivia: "",
                                                    variant: Identifier(
                                                        "Worker",
                                                    ),
                                                },
                                                Token {
                                                    trivia: "",
                                                    variant: Identifier(
                                                        "ServiceWorker",
                                                    ),
                                                },
                                            ],
                                            separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                        },
                                        close_paren: Token {
                                            trivia: "",
                                            variant: CloseParen,
                                        },
                                    },
                                },
                            ),
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Token {
                                        trivia: " ",
                                        variant: Identifier(
                                            "Exposed",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "ServiceWorker",
                                        ),
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                    },
                    close_bracket: Token {
                        trivia: "",
                        variant: CloseBracket,
                    },
                },
            ),
            interface: Token {
                trivia: "\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "ServiceWorkerGlobalScope",
                ),
            },
            inheritance: Some(
                Inheritance {
                    colon: Token {
                        trivia: " ",
                        variant: Colon,
                    },
                    identifier: Token {
                        trivia: " ",
                        variant: Identifier(
                            "WorkerGlobalScope",
                        ),
                    },
                },
            ),
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [],
                close_brace: Token {
                    trivia: "\n\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: Token {
                        trivia: "\n\n// Conformance with ExtendedAttributeList grammar in http://www.w3.org/TR/WebIDL/#idl-extended-attributes\n// Section 3.11\n",
                        variant: OpenBracket,
                    },
                    body: Punctuated {
                        list: [
                            Integer(
                                ExtendedAttributeInteger {
                                    lhs_identifier: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "IntAttr",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: Oct(
                                            OctLit(
                                                "0",
                                            ),
                                        ),
                                    },
                                },
                            ),
                            Float(
                                ExtendedAttributeFloat {
                                    lhs_identifier: Token {
                                        trivia: " ",
                                        variant: Identifier(
                                            "FloatAttr",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Value(
                                        Token {
                                            trivia: "",
                                            variant: FloatValueLit(
                                                "3.14",
                                            ),
                                        },
                                    ),
                                },
                            ),
                            String(
                                ExtendedAttributeString {
                                    lhs_identifier: Token {
                                        trivia: " ",
                                        variant: Identifier(
                                            "StringAttr",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: StringLit(
                                            "abc",
                                        ),
                                    },
                                },
                            ),
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Token {
                                        trivia: " ",
                                        variant: Identifier(
                                            "IdentifierAttr",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "_null",
                                        ),
                                    },
                                },
                            ),
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Token {
                                        trivia: " ",
                                        variant: Identifier(
                                            "IdentifiersAttr",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    list: Parenthesized {
                                        open_paren: Token {
                                            trivia: "",
                                            variant: OpenParen,
                                        },
                                        body: Punctuated {
                                            list: [
                                                Token {
                                                    trivia: "",
                                                    variant: Identifier(
                                                        "_null",
                                                    ),
                                                },
                                                Token {
                                                    trivia: " ",
                                                    variant: Identifier(
                                                        "_const",
                                                    ),
                                                },
                                            ],
                                            separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                        },
                                        close_paren: Token {
                                            trivia: "",
                                            variant: CloseParen,
                                        },
                                    },
                                },
                            ),
                            FloatList(
                                ExtendedAttributeFloatList {
                                    identifier: Token {
                                        trivia: " ",
                                        variant: Identifier(
                                            "FloatList",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    list: Parenthesized {
                                        open_paren: Token {
                                            trivia: "",
                                            variant: OpenParen,
                                        },
                                        body: Punctuated {
                                            list: [
                                                Value(
                                                    Token {
                                                        trivia: "",
                                                        variant: FloatValueLit(
                                                            "3.14",
                                                        ),
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                        },
                                        close_paren: Token {
                                            trivia: "",
                                            variant: CloseParen,
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                    },
                    close_bracket: Token {
                        trivia: "",
                        variant: CloseBracket,
                    },
                },
            ),
            interface: Token {
                trivia: "\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "IdInterface",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [],
                close_brace: Token {
                    trivia: "",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: Token {
                        trivia: "\n\n// Extracted from http://www.w3.org/TR/2016/REC-WebIDL-1-20161215/#Constructor on 2017-5-18 with whitespace differences\n",
                        variant: OpenBracket,
                    },
                    body: Punctuated {
                        list: [
                            NoArgs(
                                ExtendedAttributeNoArgs(
                                    Token {
                                        trivia: "\n  ",
                                        variant: Identifier(
                                            "Constructor",
                                        ),
                                    },
                                ),
                            ),
                            ArgList(
                                ExtendedAttributeArgList {
                                    identifier: Token {
                                        trivia: "\n  ",
                                        variant: Identifier(
                                            "Constructor",
                                        ),
                                    },
                                    args: Parenthesized {
                                        open_paren: Token {
                                            trivia: "",
                                            variant: OpenParen,
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                Distinguishable(
                                                                    FloatingPoint(
                                                                        MayBeNull {
                                                                            type_: Double(
                                                                                DoubleType {
                                                                                    unrestricted: None,
                                                                                    double: Token {
                                                                                        trivia: "",
                                                                                        variant: Double,
                                                                                    },
                                                                                },
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Token {
                                                            trivia: " ",
                                                            variant: Identifier(
                                                                "radius",
                                                            ),
                                                        },
                                                        default: None,
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                        },
                                        close_paren: Token {
                                            trivia: "",
                                            variant: CloseParen,
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                    },
                    close_bracket: Token {
                        trivia: "\n",
                        variant: CloseBracket,
                    },
                },
            ),
            interface: Token {
                trivia: "\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "Circle",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n  ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: None,
                                                        double: Token {
                                                            trivia: " ",
                                                            variant: Double,
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "r",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n  ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: None,
                                                        double: Token {
                                                            trivia: " ",
                                                            variant: Double,
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "cx",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n  ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: None,
                                                        double: Token {
                                                            trivia: " ",
                                                            variant: Double,
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "cy",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                Token {
                                    trivia: "\n  ",
                                    variant: ReadOnly,
                                },
                            ),
                            attribute: Token {
                                trivia: " ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: None,
                                                        double: Token {
                                                            trivia: " ",
                                                            variant: Double,
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "circumference",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: Token {
                        trivia: "\n\n// Extracted from https://heycam.github.io/webidl/#idl-annotated-types on 2017-12-15\n",
                        variant: OpenBracket,
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Exposed",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Window",
                                        ),
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                    },
                    close_bracket: Token {
                        trivia: "",
                        variant: CloseBracket,
                    },
                },
            ),
            interface: Token {
                trivia: "\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "I",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n    ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: Some(
                                    Bracketed {
                                        open_bracket: Token {
                                            trivia: " ",
                                            variant: OpenBracket,
                                        },
                                        body: Punctuated {
                                            list: [
                                                NoArgs(
                                                    ExtendedAttributeNoArgs(
                                                        Token {
                                                            trivia: "",
                                                            variant: Identifier(
                                                                "XAttr",
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                            separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                        },
                                        close_bracket: Token {
                                            trivia: "",
                                            variant: CloseBracket,
                                        },
                                    },
                                ),
                                type_: Union(
                                    MayBeNull {
                                        type_: Parenthesized {
                                            open_paren: Token {
                                                trivia: " ",
                                                variant: OpenParen,
                                            },
                                            body: Punctuated {
                                                list: [
                                                    Single(
                                                        AttributedNonAnyType {
                                                            attributes: None,
                                                            type_: Integer(
                                                                MayBeNull {
                                                                    type_: Long(
                                                                        LongType {
                                                                            unsigned: None,
                                                                            long: Token {
                                                                                trivia: "",
                                                                                variant: Long,
                                                                            },
                                                                        },
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    Single(
                                                        AttributedNonAnyType {
                                                            attributes: None,
                                                            type_: Identifier(
                                                                MayBeNull {
                                                                    type_: Token {
                                                                        trivia: " ",
                                                                        variant: Identifier(
                                                                            "Node",
                                                                        ),
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                separator: PhantomData<weedle::term::Token<weedle::term::Or>>,
                                            },
                                            close_paren: Token {
                                                trivia: "",
                                                variant: CloseParen,
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "attrib",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
]
