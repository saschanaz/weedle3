[
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: Token {
                        trivia: "",
                        variant: OpenBracket,
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Exposed",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Window",
                                        ),
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                    },
                    close_bracket: Token {
                        trivia: "",
                        variant: CloseBracket,
                    },
                },
            ),
            interface: Token {
                trivia: "\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "Foo",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Token {
                                                trivia: "\n  ",
                                                variant: Undefined,
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "foo",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Token {
                                            trivia: "\n  ",
                                            variant: Promise,
                                        },
                                        generics: Generics {
                                            open_angle: Token {
                                                trivia: "",
                                                variant: LessThan,
                                            },
                                            body: Union(
                                                MayBeNull {
                                                    type_: Parenthesized {
                                                        open_paren: Token {
                                                            trivia: "",
                                                            variant: OpenParen,
                                                        },
                                                        body: Punctuated {
                                                            list: [
                                                                Single(
                                                                    AttributedNonAnyType {
                                                                        attributes: None,
                                                                        type_: DOMString(
                                                                            MayBeNull {
                                                                                type_: Token {
                                                                                    trivia: "",
                                                                                    variant: DOMString,
                                                                                },
                                                                                q_mark: None,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                Single(
                                                                    AttributedNonAnyType {
                                                                        attributes: None,
                                                                        type_: Undefined(
                                                                            MayBeNull {
                                                                                type_: Token {
                                                                                    trivia: " ",
                                                                                    variant: Undefined,
                                                                                },
                                                                                q_mark: None,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                            separator: PhantomData<weedle::term::Token<weedle::term::Or>>,
                                                        },
                                                        close_paren: Token {
                                                            trivia: "",
                                                            variant: CloseParen,
                                                        },
                                                    },
                                                    q_mark: None,
                                                },
                                            ),
                                            close_angle: Token {
                                                trivia: "",
                                                variant: GreaterThan,
                                            },
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "bar",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    FloatingPoint(
                                        MayBeNull {
                                            type_: Float(
                                                FloatType {
                                                    unrestricted: None,
                                                    float: Token {
                                                        trivia: "\n  ",
                                                        variant: Float,
                                                    },
                                                },
                                            ),
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "baz",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Undefined(
                                                                MayBeNull {
                                                                    type_: Token {
                                                                        trivia: "",
                                                                        variant: Undefined,
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Token {
                                                    trivia: " ",
                                                    variant: Identifier(
                                                        "boo",
                                                    ),
                                                },
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
]
