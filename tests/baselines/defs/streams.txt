[
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ReadableStream",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Object(
                                                                MayBeNull {
                                                                    type_: Object,
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "underlyingSource",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "strategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Boolean(
                                            MayBeNull {
                                                type_: Boolean,
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "locked",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "cancel",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Identifier(
                                        MayBeNull {
                                            type_: Identifier(
                                                "ReadableStreamReader",
                                            ),
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getReader",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableStreamGetReaderOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Identifier(
                                        MayBeNull {
                                            type_: Identifier(
                                                "ReadableStream",
                                            ),
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "pipeThrough",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableWritablePair",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "transform",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "StreamPipeOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "pipeTo",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "WritableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "destination",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "StreamPipeOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Sequence(
                                        MayBeNull {
                                            type_: SequenceType {
                                                sequence: Sequence,
                                                generics: Generics {
                                                    open_angle: LessThan,
                                                    body: AttributedType {
                                                        attributes: None,
                                                        type_: Single(
                                                            Distinguishable(
                                                                Identifier(
                                                                    MayBeNull {
                                                                        type_: Identifier(
                                                                            "ReadableStream",
                                                                        ),
                                                                        q_mark: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ),
                                                    },
                                                    close_angle: GreaterThan,
                                                },
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "tee",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    AsyncIterable(
                        Single(
                            SingleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    Async,
                                    Iterable,
                                ),
                                generics: Generics {
                                    open_angle: LessThan,
                                    body: AttributedType {
                                        attributes: None,
                                        type_: Single(
                                            Any(
                                                Any,
                                            ),
                                        ),
                                    },
                                    close_angle: GreaterThan,
                                },
                                args: Some(
                                    Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: Some(
                                                            Optional,
                                                        ),
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                Distinguishable(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "ReadableStreamIteratorOptions",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "options",
                                                        ),
                                                        default: Some(
                                                            Default {
                                                                assign: Assign,
                                                                value: EmptyDictionary(
                                                                    EmptyDictionaryLit {
                                                                        open_brace: OpenBrace,
                                                                        close_brace: CloseBrace,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                ),
                                semi_colon: SemiColon,
                            },
                        ),
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: Typedef,
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: OpenParen,
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamDefaultReader",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamBYOBReader",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: Or,
                            },
                            close_paren: CloseParen,
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ReadableStreamReader",
            ),
            semi_colon: SemiColon,
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: Enum,
            identifier: Identifier(
                "ReadableStreamReaderMode",
            ),
            values: Braced {
                open_brace: OpenBrace,
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "byob",
                        ),
                    ],
                    separator: Comma,
                },
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "ReadableStreamGetReaderOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ReadableStreamReaderMode",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "mode",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "ReadableStreamIteratorOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Boolean(
                                    MayBeNull {
                                        type_: Boolean,
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventCancel",
                        ),
                        default: Some(
                            Default {
                                assign: Assign,
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "ReadableWritablePair",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            Required,
                        ),
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ReadableStream",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "readable",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            Required,
                        ),
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "WritableStream",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "writable",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "StreamPipeOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Boolean(
                                    MayBeNull {
                                        type_: Boolean,
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventClose",
                        ),
                        default: Some(
                            Default {
                                assign: Assign,
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Boolean(
                                    MayBeNull {
                                        type_: Boolean,
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventAbort",
                        ),
                        default: Some(
                            Default {
                                assign: Assign,
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Boolean(
                                    MayBeNull {
                                        type_: Boolean,
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventCancel",
                        ),
                        default: Some(
                            Default {
                                assign: Assign,
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "AbortSignal",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "signal",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "UnderlyingSource",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSourceStartCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "start",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSourcePullCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "pull",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSourceCancelCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "cancel",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ReadableStreamType",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "type",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: Some(
                            Bracketed {
                                open_bracket: OpenBracket,
                                body: Punctuated {
                                    list: [
                                        NoArgs(
                                            ExtendedAttributeNoArgs(
                                                Identifier(
                                                    "EnforceRange",
                                                ),
                                            ),
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_bracket: CloseBracket,
                            },
                        ),
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Integer(
                                    MayBeNull {
                                        type_: LongLong(
                                            LongLongType {
                                                unsigned: Some(
                                                    Unsigned,
                                                ),
                                                long_long: (
                                                    Long,
                                                    Long,
                                                ),
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "autoAllocateChunkSize",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: Typedef,
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: OpenParen,
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableByteStreamController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: Or,
                            },
                            close_paren: CloseParen,
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ReadableStreamController",
            ),
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSourceStartCallback",
            ),
            assign: Assign,
            return_type: Single(
                Any(
                    Any,
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSourcePullCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSourceCancelCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    Optional,
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            Any,
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "reason",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: Enum,
            identifier: Identifier(
                "ReadableStreamType",
            ),
            values: Braced {
                open_brace: OpenBrace,
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "bytes",
                        ),
                    ],
                    separator: Comma,
                },
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ReadableStreamDefaultReader",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "stream",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Promise(
                                        PromiseType {
                                            promise: Promise,
                                            generics: Generics {
                                                open_angle: LessThan,
                                                body: Single(
                                                    Distinguishable(
                                                        Undefined(
                                                            MayBeNull {
                                                                type_: Undefined,
                                                                q_mark: None,
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                close_angle: GreaterThan,
                                            },
                                        },
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "closed",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "cancel",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Any(
                                                    Any,
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "read",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "releaseLock",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ReadableStreamBYOBReader",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "stream",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Promise(
                                        PromiseType {
                                            promise: Promise,
                                            generics: Generics {
                                                open_angle: LessThan,
                                                body: Single(
                                                    Distinguishable(
                                                        Undefined(
                                                            MayBeNull {
                                                                type_: Undefined,
                                                                q_mark: None,
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                close_angle: GreaterThan,
                                            },
                                        },
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "closed",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "cancel",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Any(
                                                    Any,
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "read",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ArrayBufferView",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "view",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "releaseLock",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ReadableStreamDefaultController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            Unrestricted,
                                                        ),
                                                        double: Double,
                                                    },
                                                ),
                                                q_mark: Some(
                                                    QMark,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "enqueue",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "e",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ReadableByteStreamController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ReadableStreamBYOBRequest",
                                                ),
                                                q_mark: Some(
                                                    QMark,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "byobRequest",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            Unrestricted,
                                                        ),
                                                        double: Double,
                                                    },
                                                ),
                                                q_mark: Some(
                                                    QMark,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "enqueue",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ArrayBufferView",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "e",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ReadableStreamBYOBRequest",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ArrayBufferView",
                                                ),
                                                q_mark: Some(
                                                    QMark,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "view",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "respond",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: Some(
                                                    Bracketed {
                                                        open_bracket: OpenBracket,
                                                        body: Punctuated {
                                                            list: [
                                                                NoArgs(
                                                                    ExtendedAttributeNoArgs(
                                                                        Identifier(
                                                                            "EnforceRange",
                                                                        ),
                                                                    ),
                                                                ),
                                                            ],
                                                            separator: Comma,
                                                        },
                                                        close_bracket: CloseBracket,
                                                    },
                                                ),
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Integer(
                                                                MayBeNull {
                                                                    type_: LongLong(
                                                                        LongLongType {
                                                                            unsigned: Some(
                                                                                Unsigned,
                                                                            ),
                                                                            long_long: (
                                                                                Long,
                                                                                Long,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "bytesWritten",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "respondWithNewView",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ArrayBufferView",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "view",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "WritableStream",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Object(
                                                                MayBeNull {
                                                                    type_: Object,
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "underlyingSink",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "strategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Boolean(
                                            MayBeNull {
                                                type_: Boolean,
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "locked",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "abort",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Identifier(
                                        MayBeNull {
                                            type_: Identifier(
                                                "WritableStreamDefaultWriter",
                                            ),
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getWriter",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "UnderlyingSink",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkStartCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "start",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkWriteCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "write",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkCloseCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "close",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkAbortCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "abort",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Any(
                                Any,
                            ),
                        ),
                        identifier: Identifier(
                            "type",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSinkStartCallback",
            ),
            assign: Assign,
            return_type: Single(
                Any(
                    Any,
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "WritableStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSinkWriteCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "WritableStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    Optional,
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            Any,
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "chunk",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSinkCloseCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "UnderlyingSinkAbortCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    Optional,
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            Any,
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "reason",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "WritableStreamDefaultWriter",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "WritableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "stream",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Promise(
                                        PromiseType {
                                            promise: Promise,
                                            generics: Generics {
                                                open_angle: LessThan,
                                                body: Single(
                                                    Distinguishable(
                                                        Undefined(
                                                            MayBeNull {
                                                                type_: Undefined,
                                                                q_mark: None,
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                close_angle: GreaterThan,
                                            },
                                        },
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "closed",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            Unrestricted,
                                                        ),
                                                        double: Double,
                                                    },
                                                ),
                                                q_mark: Some(
                                                    QMark,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Promise(
                                        PromiseType {
                                            promise: Promise,
                                            generics: Generics {
                                                open_angle: LessThan,
                                                body: Single(
                                                    Distinguishable(
                                                        Undefined(
                                                            MayBeNull {
                                                                type_: Undefined,
                                                                q_mark: None,
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                close_angle: GreaterThan,
                                            },
                                        },
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "ready",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "abort",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "releaseLock",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Promise(
                                    PromiseType {
                                        promise: Promise,
                                        generics: Generics {
                                            open_angle: LessThan,
                                            body: Single(
                                                Distinguishable(
                                                    Undefined(
                                                        MayBeNull {
                                                            type_: Undefined,
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                            close_angle: GreaterThan,
                                        },
                                    },
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "write",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "WritableStreamDefaultController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "e",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "TransformStream",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Object(
                                                                MayBeNull {
                                                                    type_: Object,
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "transformer",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "writableStrategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "readableStrategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: Assign,
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: OpenBrace,
                                                                close_brace: CloseBrace,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ReadableStream",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "readable",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "WritableStream",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "writable",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "Transformer",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "TransformerStartCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "start",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "TransformerTransformCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "transform",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "TransformerFlushCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "flush",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Any(
                                Any,
                            ),
                        ),
                        identifier: Identifier(
                            "readableType",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Any(
                                Any,
                            ),
                        ),
                        identifier: Identifier(
                            "writableType",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "TransformerStartCallback",
            ),
            assign: Assign,
            return_type: Single(
                Any(
                    Any,
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "TransformStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "TransformerFlushCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "TransformStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "TransformerTransformCallback",
            ),
            assign: Assign,
            return_type: Single(
                Promise(
                    PromiseType {
                        promise: Promise,
                        generics: Generics {
                            open_angle: LessThan,
                            body: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            close_angle: GreaterThan,
                        },
                    },
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Distinguishable(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "TransformStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    Optional,
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            Any,
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "chunk",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "TransformStreamDefaultController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            Unrestricted,
                                                        ),
                                                        double: Double,
                                                    },
                                                ),
                                                q_mark: Some(
                                                    QMark,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "enqueue",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    Optional,
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            Any,
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Undefined,
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "terminate",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "QueuingStrategy",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: Some(
                                                    Unrestricted,
                                                ),
                                                double: Double,
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "highWaterMark",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "QueuingStrategySize",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "size",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: Callback,
            identifier: Identifier(
                "QueuingStrategySize",
            ),
            assign: Assign,
            return_type: Single(
                Distinguishable(
                    FloatingPoint(
                        MayBeNull {
                            type_: Double(
                                DoubleType {
                                    unrestricted: Some(
                                        Unrestricted,
                                    ),
                                    double: Double,
                                },
                            ),
                            q_mark: None,
                        },
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: OpenParen,
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    Optional,
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            Any,
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "chunk",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: Comma,
                },
                close_paren: CloseParen,
            },
            semi_colon: SemiColon,
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Dictionary,
            identifier: Identifier(
                "QueuingStrategyInit",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            Required,
                        ),
                        type_: Single(
                            Distinguishable(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: Some(
                                                    Unrestricted,
                                                ),
                                                double: Double,
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "highWaterMark",
                        ),
                        default: None,
                        semi_colon: SemiColon,
                    },
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "ByteLengthQueuingStrategy",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategyInit",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "init",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            Unrestricted,
                                                        ),
                                                        double: Double,
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "highWaterMark",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "Function",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "size",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: OpenBracket,
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: Assign,
                                    list: Parenthesized {
                                        open_paren: OpenParen,
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: Comma,
                                        },
                                        close_paren: CloseParen,
                                    },
                                },
                            ),
                        ],
                        separator: Comma,
                    },
                    close_bracket: CloseBracket,
                },
            ),
            interface: Interface,
            identifier: Identifier(
                "CountQueuingStrategy",
            ),
            inheritance: None,
            members: Braced {
                open_brace: OpenBrace,
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: Constructor,
                            args: Parenthesized {
                                open_paren: OpenParen,
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategyInit",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "init",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: Comma,
                                },
                                close_paren: CloseParen,
                            },
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            Unrestricted,
                                                        ),
                                                        double: Double,
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "highWaterMark",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                ReadOnly,
                            ),
                            attribute: Attribute,
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "Function",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "size",
                            ),
                            semi_colon: SemiColon,
                        },
                    ),
                ],
                close_brace: CloseBrace,
            },
            semi_colon: SemiColon,
        },
    ),
]
