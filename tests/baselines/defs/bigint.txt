[
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: Token {
                        trivia: "",
                        variant: OpenBracket,
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Exposed",
                                        ),
                                    },
                                    assign: Token {
                                        trivia: "",
                                        variant: Assign,
                                    },
                                    rhs: Token {
                                        trivia: "",
                                        variant: Identifier(
                                            "Window",
                                        ),
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                    },
                    close_bracket: Token {
                        trivia: "",
                        variant: CloseBracket,
                    },
                },
            ),
            interface: Token {
                trivia: "\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "Interface",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n  ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Bigint(
                                            MayBeNull {
                                                type_: Token {
                                                    trivia: " ",
                                                    variant: Bigint,
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "_bigint",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Bigint(
                                        MayBeNull {
                                            type_: Token {
                                                trivia: "\n  ",
                                                variant: Bigint,
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "getBig",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Identifier(
                                        MayBeNull {
                                            type_: Token {
                                                trivia: "\n  ",
                                                variant: Identifier(
                                                    "void",
                                                ),
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "setBig",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Bigint(
                                                                MayBeNull {
                                                                    type_: Token {
                                                                        trivia: "",
                                                                        variant: Bigint,
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Token {
                                                    trivia: " ",
                                                    variant: Identifier(
                                                        "big",
                                                    ),
                                                },
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: Token {
                trivia: "\n\n",
                variant: Dictionary,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "Dictionary",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Distinguishable(
                                Bigint(
                                    MayBeNull {
                                        type_: Token {
                                            trivia: "\n  ",
                                            variant: Bigint,
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Token {
                            trivia: " ",
                            variant: Identifier(
                                "big",
                            ),
                        },
                        default: None,
                        semi_colon: Token {
                            trivia: "",
                            variant: SemiColon,
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            Token {
                                trivia: "\n  ",
                                variant: Required,
                            },
                        ),
                        type_: Single(
                            Distinguishable(
                                Bigint(
                                    MayBeNull {
                                        type_: Token {
                                            trivia: " ",
                                            variant: Bigint,
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Token {
                            trivia: " ",
                            variant: Identifier(
                                "another",
                            ),
                        },
                        default: None,
                        semi_colon: Token {
                            trivia: "",
                            variant: SemiColon,
                        },
                    },
                ],
                close_brace: Token {
                    trivia: "\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: Token {
                trivia: "\n\n",
                variant: Typedef,
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: Token {
                                trivia: " ",
                                variant: OpenParen,
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Bigint(
                                                MayBeNull {
                                                    type_: Token {
                                                        trivia: "",
                                                        variant: Bigint,
                                                    },
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Integer(
                                                MayBeNull {
                                                    type_: Short(
                                                        ShortType {
                                                            unsigned: None,
                                                            short: Token {
                                                                trivia: " ",
                                                                variant: Short,
                                                            },
                                                        },
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::term::Token<weedle::term::Or>>,
                            },
                            close_paren: Token {
                                trivia: "",
                                variant: CloseParen,
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "allowed",
                ),
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
]
