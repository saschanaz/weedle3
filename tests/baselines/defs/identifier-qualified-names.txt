[
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: Token {
                trivia: "// Extracted from http://dev.w3.org/2006/webapi/WebIDL/ on 2011-05-06\n  // Typedef identifier: \"number\"\n  // Qualified name:    \"::framework::number\"\n  ",
                variant: Typedef,
            },
            type_: AttributedType {
                attributes: None,
                type_: Single(
                    Distinguishable(
                        FloatingPoint(
                            MayBeNull {
                                type_: Float(
                                    FloatType {
                                        unrestricted: None,
                                        float: Token {
                                            trivia: " ",
                                            variant: Float,
                                        },
                                    },
                                ),
                                q_mark: None,
                            },
                        ),
                    ),
                ),
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "number",
                ),
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: Token {
                trivia: "\n\n  // Interface identifier: \"System\"\n  // Qualified name:       \"::framework::System\"\n  ",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "System",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Object(
                                        MayBeNull {
                                            type_: Token {
                                                trivia: "\n\n    // Operation identifier:          \"createObject\"\n    // Operation argument identifier: \"interface\"\n    ",
                                                variant: Object,
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "createObject",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: Token {
                                                                        trivia: "",
                                                                        variant: DOMString,
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Token {
                                                    trivia: " ",
                                                    variant: Identifier(
                                                        "_interface",
                                                    ),
                                                },
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: Some(
                                Getter(
                                    Token {
                                        trivia: "\n\n    // Operation has no identifier; it declares a getter.\n    ",
                                        variant: Getter,
                                    },
                                ),
                            ),
                            return_type: Single(
                                Distinguishable(
                                    DOMString(
                                        MayBeNull {
                                            type_: Token {
                                                trivia: " ",
                                                variant: DOMString,
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: None,
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: " ",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: Token {
                                                                        trivia: "",
                                                                        variant: DOMString,
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Token {
                                                    trivia: " ",
                                                    variant: Identifier(
                                                        "keyName",
                                                    ),
                                                },
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n  ",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: Token {
                trivia: "\n\n\n    // Interface identifier: \"TextField\"\n    // Qualified name:       \"::framework::gui::TextField\"\n    ",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "TextField",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n\n      // Attribute identifier: \"const\"\n      ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        Boolean(
                                            MayBeNull {
                                                type_: Token {
                                                    trivia: " ",
                                                    variant: Boolean,
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "_const",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: Token {
                                trivia: "\n\n      // Attribute identifier: \"value\"\n      ",
                                variant: Attribute,
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    Distinguishable(
                                        DOMString(
                                            MayBeNull {
                                                type_: Token {
                                                    trivia: " ",
                                                    variant: DOMString,
                                                },
                                                q_mark: Some(
                                                    Token {
                                                        trivia: "",
                                                        variant: QMark,
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Token {
                                trivia: " ",
                                variant: Identifier(
                                    "_value",
                                ),
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n    ",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: Token {
                trivia: "\n\n",
                variant: Interface,
            },
            identifier: Token {
                trivia: " ",
                variant: Identifier(
                    "FooEventTarget",
                ),
            },
            inheritance: None,
            members: Braced {
                open_brace: Token {
                    trivia: " ",
                    variant: OpenBrace,
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            return_type: Single(
                                Distinguishable(
                                    Undefined(
                                        MayBeNull {
                                            type_: Token {
                                                trivia: "\n  // Argument names allow some selected keywords\n  ",
                                                variant: Undefined,
                                            },
                                            q_mark: None,
                                        },
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Token {
                                    trivia: " ",
                                    variant: Identifier(
                                        "addEventListener",
                                    ),
                                },
                            ),
                            args: Parenthesized {
                                open_paren: Token {
                                    trivia: "",
                                    variant: OpenParen,
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Distinguishable(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Token {
                                                                        trivia: "",
                                                                        variant: Identifier(
                                                                            "EventListener",
                                                                        ),
                                                                    },
                                                                    q_mark: Some(
                                                                        Token {
                                                                            trivia: "",
                                                                            variant: QMark,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Token {
                                                    trivia: " ",
                                                    variant: Identifier(
                                                        "callback",
                                                    ),
                                                },
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::term::Token<weedle::term::Comma>>,
                                },
                                close_paren: Token {
                                    trivia: "",
                                    variant: CloseParen,
                                },
                            },
                            semi_colon: Token {
                                trivia: "",
                                variant: SemiColon,
                            },
                        },
                    ),
                ],
                close_brace: Token {
                    trivia: "\n",
                    variant: CloseBrace,
                },
            },
            semi_colon: Token {
                trivia: "",
                variant: SemiColon,
            },
        },
    ),
]
