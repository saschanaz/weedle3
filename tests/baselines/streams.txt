[
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ReadableStream",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Object(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Object(
                                                                            "object",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "underlyingSource",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "strategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "locked",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "cancel",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ReadableStreamReader",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getReader",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableStreamGetReaderOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ReadableStream",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "pipeThrough",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableWritablePair",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "transform",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "StreamPipeOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "pipeTo",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "WritableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "destination",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "StreamPipeOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Sequence(
                                            MayBeNull {
                                                type_: SequenceType {
                                                    sequence: VariantToken {
                                                        variant: Sequence(
                                                            "sequence",
                                                        ),
                                                        trivia: "\n  ",
                                                    },
                                                    generics: Generics {
                                                        open_angle: VariantToken {
                                                            variant: LessThan(
                                                                "<",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        body: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "ReadableStream",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        close_angle: VariantToken {
                                                            variant: GreaterThan(
                                                                ">",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "tee",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    AsyncIterable(
                        Single(
                            SingleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: AttributedType {
                                        attributes: None,
                                        type_: Single(
                                            Any(
                                                VariantToken {
                                                    variant: Any(
                                                        "any",
                                                    ),
                                                    trivia: "",
                                                },
                                            ),
                                        ),
                                    },
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: Some(
                                    Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: Some(
                                                            VariantToken {
                                                                variant: Optional(
                                                                    "optional",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "ReadableStreamIteratorOptions",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "options",
                                                        ),
                                                        default: Some(
                                                            Default {
                                                                assign: VariantToken {
                                                                    variant: Assign(
                                                                        "=",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                                value: EmptyDictionary(
                                                                    EmptyDictionaryLit {
                                                                        open_brace: VariantToken {
                                                                            variant: OpenBrace(
                                                                                "{",
                                                                            ),
                                                                            trivia: " ",
                                                                        },
                                                                        close_brace: VariantToken {
                                                                            variant: CloseBrace(
                                                                                "}",
                                                                            ),
                                                                            trivia: "",
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: VariantToken {
                                variant: OpenParen(
                                    "(",
                                ),
                                trivia: "",
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamDefaultReader",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamBYOBReader",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                            },
                            close_paren: VariantToken {
                                variant: CloseParen(
                                    ")",
                                ),
                                trivia: "",
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ReadableStreamReader",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ReadableStreamReaderMode",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "byob",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ReadableStreamGetReaderOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ReadableStreamReaderMode",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "mode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ReadableStreamIteratorOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n  ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventCancel",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ReadableWritablePair",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            VariantToken {
                                variant: Required(
                                    "required",
                                ),
                                trivia: "\n  ",
                            },
                        ),
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ReadableStream",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "readable",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            VariantToken {
                                variant: Required(
                                    "required",
                                ),
                                trivia: "\n  ",
                            },
                        ),
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "WritableStream",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "writable",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "StreamPipeOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n  ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventClose",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n  ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventAbort",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n  ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "preventCancel",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "AbortSignal",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "signal",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "UnderlyingSource",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSourceStartCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "start",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSourcePullCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "pull",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSourceCancelCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "cancel",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ReadableStreamType",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "type",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: Some(
                            Bracketed {
                                open_bracket: VariantToken {
                                    variant: OpenBracket(
                                        "[",
                                    ),
                                    trivia: "\n  ",
                                },
                                body: Punctuated {
                                    list: [
                                        NoArgs(
                                            ExtendedAttributeNoArgs(
                                                Identifier(
                                                    "EnforceRange",
                                                ),
                                            ),
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_bracket: VariantToken {
                                    variant: CloseBracket(
                                        "]",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: LongLong(
                                            LongLongType {
                                                unsigned: Some(
                                                    VariantToken {
                                                        variant: Unsigned(
                                                            "unsigned",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                long_long: (
                                                    VariantToken {
                                                        variant: Long(
                                                            "long",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    VariantToken {
                                                        variant: Long(
                                                            "long",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "autoAllocateChunkSize",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: VariantToken {
                                variant: OpenParen(
                                    "(",
                                ),
                                trivia: "",
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableByteStreamController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                            },
                            close_paren: VariantToken {
                                variant: CloseParen(
                                    ")",
                                ),
                                trivia: "",
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ReadableStreamController",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "UnderlyingSourceStartCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    Any(
                        VariantToken {
                            variant: Any(
                                "any",
                            ),
                            trivia: " ",
                        },
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: "",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "UnderlyingSourcePullCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ReadableStreamController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "UnderlyingSourceCancelCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    VariantToken {
                                        variant: Optional(
                                            "optional",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            VariantToken {
                                                variant: Any(
                                                    "any",
                                                ),
                                                trivia: "",
                                            },
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "reason",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ReadableStreamType",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "bytes",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ReadableStreamDefaultReader",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "stream",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "closed",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "cancel",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Type(
                                                        Single(
                                                            Any(
                                                                VariantToken {
                                                                    variant: Any(
                                                                        "any",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "read",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "releaseLock",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ReadableStreamBYOBReader",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ReadableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "stream",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "closed",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "cancel",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Type(
                                                        Single(
                                                            Any(
                                                                VariantToken {
                                                                    variant: Any(
                                                                        "any",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "read",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ArrayBufferView",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "view",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "releaseLock",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ReadableStreamDefaultController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            VariantToken {
                                                                variant: Unrestricted(
                                                                    "unrestricted",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        double: VariantToken {
                                                            variant: Double(
                                                                "double",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "enqueue",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "e",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ReadableByteStreamController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ReadableStreamBYOBRequest",
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "byobRequest",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            VariantToken {
                                                                variant: Unrestricted(
                                                                    "unrestricted",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        double: VariantToken {
                                                            variant: Double(
                                                                "double",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "enqueue",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ArrayBufferView",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "e",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ReadableStreamBYOBRequest",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ArrayBufferView",
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "view",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "respond",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: Some(
                                                    Bracketed {
                                                        open_bracket: VariantToken {
                                                            variant: OpenBracket(
                                                                "[",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        body: Punctuated {
                                                            list: [
                                                                NoArgs(
                                                                    ExtendedAttributeNoArgs(
                                                                        Identifier(
                                                                            "EnforceRange",
                                                                        ),
                                                                    ),
                                                                ),
                                                            ],
                                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                                        },
                                                        close_bracket: VariantToken {
                                                            variant: CloseBracket(
                                                                "]",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Integer(
                                                                MayBeNull {
                                                                    type_: LongLong(
                                                                        LongLongType {
                                                                            unsigned: Some(
                                                                                VariantToken {
                                                                                    variant: Unsigned(
                                                                                        "unsigned",
                                                                                    ),
                                                                                    trivia: " ",
                                                                                },
                                                                            ),
                                                                            long_long: (
                                                                                VariantToken {
                                                                                    variant: Long(
                                                                                        "long",
                                                                                    ),
                                                                                    trivia: "",
                                                                                },
                                                                                VariantToken {
                                                                                    variant: Long(
                                                                                        "long",
                                                                                    ),
                                                                                    trivia: "",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "bytesWritten",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "respondWithNewView",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ArrayBufferView",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "view",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "WritableStream",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Object(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Object(
                                                                            "object",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "underlyingSink",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "strategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "locked",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "abort",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "WritableStreamDefaultWriter",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getWriter",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "UnderlyingSink",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkStartCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "start",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkWriteCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "write",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkCloseCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "close",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "UnderlyingSinkAbortCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "abort",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Any(
                                VariantToken {
                                    variant: Any(
                                        "any",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                        ),
                        identifier: Identifier(
                            "type",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "UnderlyingSinkStartCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    Any(
                        VariantToken {
                            variant: Any(
                                "any",
                            ),
                            trivia: " ",
                        },
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: "",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "WritableStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "UnderlyingSinkWriteCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "WritableStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    VariantToken {
                                        variant: Optional(
                                            "optional",
                                        ),
                                        trivia: " ",
                                    },
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            VariantToken {
                                                variant: Any(
                                                    "any",
                                                ),
                                                trivia: "",
                                            },
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "chunk",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "UnderlyingSinkCloseCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "UnderlyingSinkAbortCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    VariantToken {
                                        variant: Optional(
                                            "optional",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            VariantToken {
                                                variant: Any(
                                                    "any",
                                                ),
                                                trivia: "",
                                            },
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "reason",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "WritableStreamDefaultWriter",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "WritableStream",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "stream",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "closed",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            VariantToken {
                                                                variant: Unrestricted(
                                                                    "unrestricted",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        double: VariantToken {
                                                            variant: Double(
                                                                "double",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "ready",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "abort",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "close",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "releaseLock",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "write",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "WritableStreamDefaultController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "e",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "TransformStream",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Object(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Object(
                                                                            "object",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "transformer",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "\n              ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "writableStrategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "\n              ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategy",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "readableStrategy",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "ReadableStream",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "readable",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "WritableStream",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "writable",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "Transformer",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "TransformerStartCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "start",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "TransformerTransformCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "transform",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "TransformerFlushCallback",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "flush",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Any(
                                VariantToken {
                                    variant: Any(
                                        "any",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                        ),
                        identifier: Identifier(
                            "readableType",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            Any(
                                VariantToken {
                                    variant: Any(
                                        "any",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                        ),
                        identifier: Identifier(
                            "writableType",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "TransformerStartCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    Any(
                        VariantToken {
                            variant: Any(
                                "any",
                            ),
                            trivia: " ",
                        },
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: "",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "TransformStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "TransformerFlushCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "TransformStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "TransformerTransformCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        Promise(
                            PromiseType {
                                promise: VariantToken {
                                    variant: Promise(
                                        "Promise",
                                    ),
                                    trivia: " ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: Undefined(
                                        VariantToken {
                                            variant: Undefined(
                                                "undefined",
                                            ),
                                            trivia: "",
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: " ",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "TransformStreamDefaultController",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "controller",
                                ),
                                default: None,
                            },
                        ),
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    VariantToken {
                                        variant: Optional(
                                            "optional",
                                        ),
                                        trivia: " ",
                                    },
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            VariantToken {
                                                variant: Any(
                                                    "any",
                                                ),
                                                trivia: "",
                                            },
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "chunk",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "TransformStreamDefaultController",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            VariantToken {
                                                                variant: Unrestricted(
                                                                    "unrestricted",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        double: VariantToken {
                                                            variant: Double(
                                                                "double",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "desiredSize",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "enqueue",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "chunk",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "error",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        Any(
                                                            VariantToken {
                                                                variant: Any(
                                                                    "any",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "reason",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "terminate",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "QueuingStrategy",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: Some(
                                                    VariantToken {
                                                        variant: Unrestricted(
                                                            "unrestricted",
                                                        ),
                                                        trivia: "\n  ",
                                                    },
                                                ),
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "highWaterMark",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "QueuingStrategySize",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "size",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "QueuingStrategySize",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Type(
                Single(
                    NonAny(
                        FloatingPoint(
                            MayBeNull {
                                type_: Double(
                                    DoubleType {
                                        unrestricted: Some(
                                            VariantToken {
                                                variant: Unrestricted(
                                                    "unrestricted",
                                                ),
                                                trivia: " ",
                                            },
                                        ),
                                        double: VariantToken {
                                            variant: Double(
                                                "double",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                q_mark: None,
                            },
                        ),
                    ),
                ),
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: "",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: Some(
                                    VariantToken {
                                        variant: Optional(
                                            "optional",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        Any(
                                            VariantToken {
                                                variant: Any(
                                                    "any",
                                                ),
                                                trivia: "",
                                            },
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "chunk",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "QueuingStrategyInit",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            VariantToken {
                                variant: Required(
                                    "required",
                                ),
                                trivia: "\n  ",
                            },
                        ),
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: Some(
                                                    VariantToken {
                                                        variant: Unrestricted(
                                                            "unrestricted",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "highWaterMark",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "ByteLengthQueuingStrategy",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategyInit",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "init",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            VariantToken {
                                                                variant: Unrestricted(
                                                                    "unrestricted",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        double: VariantToken {
                                                            variant: Double(
                                                                "double",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "highWaterMark",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "Function",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "size",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            IdentList(
                                ExtendedAttributeIdentList {
                                    identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    list: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Identifier(
                                                    "Window",
                                                ),
                                                Identifier(
                                                    "Worker",
                                                ),
                                                Identifier(
                                                    "Worklet",
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "CountQueuingStrategy",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "QueuingStrategyInit",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "init",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Double(
                                                    DoubleType {
                                                        unrestricted: Some(
                                                            VariantToken {
                                                                variant: Unrestricted(
                                                                    "unrestricted",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        ),
                                                        double: VariantToken {
                                                            variant: Double(
                                                                "double",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "highWaterMark",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "Function",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "size",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
