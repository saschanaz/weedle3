[
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                            NoArgs(
                                ExtendedAttributeNoArgs(
                                    Identifier(
                                        "Constructor",
                                    ),
                                ),
                            ),
                            ArgList(
                                ExtendedAttributeArgList {
                                    identifier: Identifier(
                                        "Constructor",
                                    ),
                                    args: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "MediaStream",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "stream",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                            ArgList(
                                ExtendedAttributeArgList {
                                    identifier: Identifier(
                                        "Constructor",
                                    ),
                                    args: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Sequence(
                                                                        MayBeNull {
                                                                            type_: SequenceType {
                                                                                sequence: VariantToken {
                                                                                    variant: Sequence(
                                                                                        "sequence",
                                                                                    ),
                                                                                    trivia: "",
                                                                                },
                                                                                generics: Generics {
                                                                                    open_angle: VariantToken {
                                                                                        variant: LessThan(
                                                                                            "<",
                                                                                        ),
                                                                                        trivia: "",
                                                                                    },
                                                                                    body: AttributedType {
                                                                                        attributes: None,
                                                                                        type_: Single(
                                                                                            NonAny(
                                                                                                Identifier(
                                                                                                    MayBeNull {
                                                                                                        type_: Identifier(
                                                                                                            "MediaStreamTrack",
                                                                                                        ),
                                                                                                        q_mark: None,
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                        ),
                                                                                    },
                                                                                    close_angle: VariantToken {
                                                                                        variant: GreaterThan(
                                                                                            ">",
                                                                                        ),
                                                                                        trivia: "",
                                                                                    },
                                                                                },
                                                                            },
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "tracks",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "MediaStream",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "EventTarget",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "id",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Sequence(
                                            MayBeNull {
                                                type_: SequenceType {
                                                    sequence: VariantToken {
                                                        variant: Sequence(
                                                            "sequence",
                                                        ),
                                                        trivia: "\n    ",
                                                    },
                                                    generics: Generics {
                                                        open_angle: VariantToken {
                                                            variant: LessThan(
                                                                "<",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        body: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "MediaStreamTrack",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        close_angle: VariantToken {
                                                            variant: GreaterThan(
                                                                ">",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getAudioTracks",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Sequence(
                                            MayBeNull {
                                                type_: SequenceType {
                                                    sequence: VariantToken {
                                                        variant: Sequence(
                                                            "sequence",
                                                        ),
                                                        trivia: "\n    ",
                                                    },
                                                    generics: Generics {
                                                        open_angle: VariantToken {
                                                            variant: LessThan(
                                                                "<",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        body: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "MediaStreamTrack",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        close_angle: VariantToken {
                                                            variant: GreaterThan(
                                                                ">",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getVideoTracks",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Sequence(
                                            MayBeNull {
                                                type_: SequenceType {
                                                    sequence: VariantToken {
                                                        variant: Sequence(
                                                            "sequence",
                                                        ),
                                                        trivia: "\n    ",
                                                    },
                                                    generics: Generics {
                                                        open_angle: VariantToken {
                                                            variant: LessThan(
                                                                "<",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        body: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "MediaStreamTrack",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        close_angle: VariantToken {
                                                            variant: GreaterThan(
                                                                ">",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getTracks",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaStreamTrack",
                                                ),
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getTrackById",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: DOMString(
                                                                            "DOMString",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "trackId",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "addTrack",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MediaStreamTrack",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "track",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "removeTrack",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MediaStreamTrack",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "track",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaStream",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "clone",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "active",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "EventHandler",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "onaddtrack",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "EventHandler",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "onremovetrack",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "MediaStreamTrack",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "EventTarget",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "kind",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "id",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "label",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "enabled",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "muted",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "EventHandler",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "onmute",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "EventHandler",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "onunmute",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaStreamTrackState",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "readyState",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "EventHandler",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "onended",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaStreamTrack",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "clone",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "stop",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaTrackCapabilities",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getCapabilities",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaTrackConstraints",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getConstraints",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaTrackSettings",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getSettings",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n    ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Undefined(
                                                        VariantToken {
                                                            variant: Undefined(
                                                                "undefined",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "applyConstraints",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MediaTrackConstraints",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "constraints",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaStreamTrackState",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "live",
                        ),
                        StringLit(
                            "ended",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaTrackSupportedConstraints",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "width",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "height",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "aspectRatio",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "frameRate",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "facingMode",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "resizeMode",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "volume",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleRate",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleSize",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "echoCancellation",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "autoGainControl",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "noiseSuppression",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "latency",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "channelCount",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "deviceId",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "groupId",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        true,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaTrackCapabilities",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ULongRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "width",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ULongRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "height",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "DoubleRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "aspectRatio",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "DoubleRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "frameRate",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: DOMString(
                                                                            "DOMString",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "facingMode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: DOMString(
                                                                            "DOMString",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "resizeMode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "DoubleRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "volume",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ULongRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleRate",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ULongRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleSize",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Boolean(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Boolean(
                                                                            "boolean",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "echoCancellation",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Boolean(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Boolean(
                                                                            "boolean",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "autoGainControl",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Boolean(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Boolean(
                                                                            "boolean",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "noiseSuppression",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "DoubleRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "latency",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ULongRange",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "channelCount",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                DOMString(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: DOMString(
                                                "DOMString",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "deviceId",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                DOMString(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: DOMString(
                                                "DOMString",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "groupId",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaTrackConstraints",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "MediaTrackConstraintSet",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MediaTrackConstraintSet",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "advanced",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaTrackConstraintSet",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainULong",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "width",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainULong",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "height",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDouble",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "aspectRatio",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDouble",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "frameRate",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDOMString",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "facingMode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDOMString",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "resizeMode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDouble",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "volume",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainULong",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleRate",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainULong",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleSize",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainBoolean",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "echoCancellation",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainBoolean",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "autoGainControl",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainBoolean",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "noiseSuppression",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDouble",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "latency",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainULong",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "channelCount",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDOMString",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "deviceId",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "ConstrainDOMString",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "groupId",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaTrackSettings",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: None,
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "width",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: None,
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "height",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "aspectRatio",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "frameRate",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                DOMString(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: DOMString(
                                                "DOMString",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "facingMode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                DOMString(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: DOMString(
                                                "DOMString",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "resizeMode",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "volume",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: None,
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleRate",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: None,
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "sampleSize",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "echoCancellation",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "autoGainControl",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "noiseSuppression",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "latency",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: None,
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "channelCount",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                DOMString(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: DOMString(
                                                "DOMString",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "deviceId",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                DOMString(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: DOMString(
                                                "DOMString",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "groupId",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "VideoFacingModeEnum",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "user",
                        ),
                        StringLit(
                            "environment",
                        ),
                        StringLit(
                            "left",
                        ),
                        StringLit(
                            "right",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "VideoResizeModeEnum",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "none",
                        ),
                        StringLit(
                            "crop-and-scale",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                            ArgList(
                                ExtendedAttributeArgList {
                                    identifier: Identifier(
                                        "Constructor",
                                    ),
                                    args: Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    DOMString(
                                                                        MayBeNull {
                                                                            type_: VariantToken {
                                                                                variant: DOMString(
                                                                                    "DOMString",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "type",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Identifier(
                                                                        MayBeNull {
                                                                            type_: Identifier(
                                                                                "MediaStreamTrackEventInit",
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "eventInitDict",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "MediaStreamTrackEvent",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "Event",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: Some(
                                Bracketed {
                                    open_bracket: VariantToken {
                                        variant: OpenBracket(
                                            "[",
                                        ),
                                        trivia: "\n    ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            NoArgs(
                                                ExtendedAttributeNoArgs(
                                                    Identifier(
                                                        "SameObject",
                                                    ),
                                                ),
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                    },
                                    close_bracket: VariantToken {
                                        variant: CloseBracket(
                                            "]",
                                        ),
                                        trivia: "",
                                    },
                                },
                            ),
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaStreamTrack",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "track",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaStreamTrackEventInit",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "EventInit",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: Some(
                            VariantToken {
                                variant: Required(
                                    "required",
                                ),
                                trivia: "\n    ",
                            },
                        ),
                        type_: Single(
                            NonAny(
                                Identifier(
                                    MayBeNull {
                                        type_: Identifier(
                                            "MediaStreamTrack",
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "track",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    PartialInterface(
        PartialInterfaceDefinition {
            attributes: None,
            partial: VariantToken {
                variant: Partial(
                    "partial",
                ),
                trivia: "\n\n",
            },
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "",
            },
            identifier: Identifier(
                "Navigator",
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: Some(
                                Bracketed {
                                    open_bracket: VariantToken {
                                        variant: OpenBracket(
                                            "[",
                                        ),
                                        trivia: "\n    ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            NoArgs(
                                                ExtendedAttributeNoArgs(
                                                    Identifier(
                                                        "SameObject",
                                                    ),
                                                ),
                                            ),
                                            NoArgs(
                                                ExtendedAttributeNoArgs(
                                                    Identifier(
                                                        "SecureContext",
                                                    ),
                                                ),
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                    },
                                    close_bracket: VariantToken {
                                        variant: CloseBracket(
                                            "]",
                                        ),
                                        trivia: "",
                                    },
                                },
                            ),
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaDevices",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "mediaDevices",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                            NoArgs(
                                ExtendedAttributeNoArgs(
                                    Identifier(
                                        "SecureContext",
                                    ),
                                ),
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "MediaDevices",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "EventTarget",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n                    ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "EventHandler",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "ondevicechange",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n    ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Type(
                                                        Single(
                                                            NonAny(
                                                                Sequence(
                                                                    MayBeNull {
                                                                        type_: SequenceType {
                                                                            sequence: VariantToken {
                                                                                variant: Sequence(
                                                                                    "sequence",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                            generics: Generics {
                                                                                open_angle: VariantToken {
                                                                                    variant: LessThan(
                                                                                        "<",
                                                                                    ),
                                                                                    trivia: "",
                                                                                },
                                                                                body: AttributedType {
                                                                                    attributes: None,
                                                                                    type_: Single(
                                                                                        NonAny(
                                                                                            Identifier(
                                                                                                MayBeNull {
                                                                                                    type_: Identifier(
                                                                                                        "MediaDeviceInfo",
                                                                                                    ),
                                                                                                    q_mark: None,
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                                close_angle: VariantToken {
                                                                                    variant: GreaterThan(
                                                                                        ">",
                                                                                    ),
                                                                                    trivia: "",
                                                                                },
                                                                            },
                                                                        },
                                                                        q_mark: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "enumerateDevices",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                            NoArgs(
                                ExtendedAttributeNoArgs(
                                    Identifier(
                                        "SecureContext",
                                    ),
                                ),
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "MediaDeviceInfo",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "deviceId",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaDeviceKind",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "kind",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "label",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "groupId",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: Some(
                                Bracketed {
                                    open_bracket: VariantToken {
                                        variant: OpenBracket(
                                            "[",
                                        ),
                                        trivia: "\n    ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            NoArgs(
                                                ExtendedAttributeNoArgs(
                                                    Identifier(
                                                        "Default",
                                                    ),
                                                ),
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                    },
                                    close_bracket: VariantToken {
                                        variant: CloseBracket(
                                            "]",
                                        ),
                                        trivia: "",
                                    },
                                },
                            ),
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Object(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Object(
                                                        "object",
                                                    ),
                                                    trivia: " ",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "toJSON",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Enum(
        EnumDefinition {
            attributes: None,
            enum_: VariantToken {
                variant: Enum(
                    "enum",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaDeviceKind",
            ),
            values: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: PunctuatedNonEmpty {
                    list: [
                        StringLit(
                            "audioinput",
                        ),
                        StringLit(
                            "audiooutput",
                        ),
                        StringLit(
                            "videoinput",
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: " ",
            },
            identifier: Identifier(
                "InputDeviceInfo",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "MediaDeviceInfo",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaTrackCapabilities",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getCapabilities",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    PartialInterface(
        PartialInterfaceDefinition {
            attributes: None,
            partial: VariantToken {
                variant: Partial(
                    "partial",
                ),
                trivia: "\n\n",
            },
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "",
            },
            identifier: Identifier(
                "Navigator",
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: Some(
                                Bracketed {
                                    open_bracket: VariantToken {
                                        variant: OpenBracket(
                                            "[",
                                        ),
                                        trivia: "\n    ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            NoArgs(
                                                ExtendedAttributeNoArgs(
                                                    Identifier(
                                                        "SecureContext",
                                                    ),
                                                ),
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                    },
                                    close_bracket: VariantToken {
                                        variant: CloseBracket(
                                            "]",
                                        ),
                                        trivia: "",
                                    },
                                },
                            ),
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n    ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    "getUserMedia",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MediaStreamConstraints",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "constraints",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "NavigatorUserMediaSuccessCallback",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "successCallback",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "NavigatorUserMediaErrorCallback",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "errorCallback",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    PartialInterface(
        PartialInterfaceDefinition {
            attributes: None,
            partial: VariantToken {
                variant: Partial(
                    "partial",
                ),
                trivia: "\n\n",
            },
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "",
            },
            identifier: Identifier(
                "MediaDevices",
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Identifier(
                                            MayBeNull {
                                                type_: Identifier(
                                                    "MediaTrackSupportedConstraints",
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getSupportedConstraints",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Promise(
                                            PromiseType {
                                                promise: VariantToken {
                                                    variant: Promise(
                                                        "Promise",
                                                    ),
                                                    trivia: "\n    ",
                                                },
                                                generics: Generics {
                                                    open_angle: VariantToken {
                                                        variant: LessThan(
                                                            "<",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Type(
                                                        Single(
                                                            NonAny(
                                                                Identifier(
                                                                    MayBeNull {
                                                                        type_: Identifier(
                                                                            "MediaStream",
                                                                        ),
                                                                        q_mark: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    close_angle: VariantToken {
                                                        variant: GreaterThan(
                                                            ">",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "getUserMedia",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "MediaStreamConstraints",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "constraints",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "MediaStreamConstraints",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Union(
                            MayBeNull {
                                type_: Parenthesized {
                                    open_paren: VariantToken {
                                        variant: OpenParen(
                                            "(",
                                        ),
                                        trivia: "\n             ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: Boolean(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: Boolean(
                                                                    "boolean",
                                                                ),
                                                                trivia: "",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: Identifier(
                                                        MayBeNull {
                                                            type_: Identifier(
                                                                "MediaTrackConstraints",
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                                    },
                                    close_paren: VariantToken {
                                        variant: CloseParen(
                                            ")",
                                        ),
                                        trivia: "",
                                    },
                                },
                                q_mark: None,
                            },
                        ),
                        identifier: Identifier(
                            "video",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Union(
                            MayBeNull {
                                type_: Parenthesized {
                                    open_paren: VariantToken {
                                        variant: OpenParen(
                                            "(",
                                        ),
                                        trivia: "\n             ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: Boolean(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: Boolean(
                                                                    "boolean",
                                                                ),
                                                                trivia: "",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: Identifier(
                                                        MayBeNull {
                                                            type_: Identifier(
                                                                "MediaTrackConstraints",
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                                    },
                                    close_paren: VariantToken {
                                        variant: CloseParen(
                                            ")",
                                        ),
                                        trivia: "",
                                    },
                                },
                                q_mark: None,
                            },
                        ),
                        identifier: Identifier(
                            "audio",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "NavigatorUserMediaSuccessCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Undefined(
                VariantToken {
                    variant: Undefined(
                        "undefined",
                    ),
                    trivia: " ",
                },
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: "",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "MediaStream",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "stream",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Callback(
        CallbackDefinition {
            attributes: None,
            callback: VariantToken {
                variant: Callback(
                    "callback",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "NavigatorUserMediaErrorCallback",
            ),
            assign: VariantToken {
                variant: Assign(
                    "=",
                ),
                trivia: "",
            },
            return_type: Undefined(
                VariantToken {
                    variant: Undefined(
                        "undefined",
                    ),
                    trivia: " ",
                },
            ),
            arguments: Parenthesized {
                open_paren: VariantToken {
                    variant: OpenParen(
                        "(",
                    ),
                    trivia: "",
                },
                body: Punctuated {
                    list: [
                        Single(
                            SingleArgument {
                                attributes: None,
                                optional: None,
                                type_: AttributedType {
                                    attributes: None,
                                    type_: Single(
                                        NonAny(
                                            Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "MediaStreamError",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        ),
                                    ),
                                },
                                identifier: Identifier(
                                    "error",
                                ),
                                default: None,
                            },
                        ),
                    ],
                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                },
                close_paren: VariantToken {
                    variant: CloseParen(
                        ")",
                    ),
                    trivia: "",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Single(
                    NonAny(
                        Object(
                            MayBeNull {
                                type_: VariantToken {
                                    variant: Object(
                                        "object",
                                    ),
                                    trivia: "",
                                },
                                q_mark: None,
                            },
                        ),
                    ),
                ),
            },
            identifier: Identifier(
                "MediaStreamError",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "DoubleRange",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "max",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "min",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ConstrainDoubleRange",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "DoubleRange",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "exact",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                FloatingPoint(
                                    MayBeNull {
                                        type_: Double(
                                            DoubleType {
                                                unrestricted: None,
                                                double: VariantToken {
                                                    variant: Double(
                                                        "double",
                                                    ),
                                                    trivia: "\n             ",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "ideal",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ULongRange",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: Some(
                            Bracketed {
                                open_bracket: VariantToken {
                                    variant: OpenBracket(
                                        "[",
                                    ),
                                    trivia: "\n             ",
                                },
                                body: Punctuated {
                                    list: [
                                        NoArgs(
                                            ExtendedAttributeNoArgs(
                                                Identifier(
                                                    "Clamp",
                                                ),
                                            ),
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_bracket: VariantToken {
                                    variant: CloseBracket(
                                        "]",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: Some(
                                                    VariantToken {
                                                        variant: Unsigned(
                                                            "unsigned",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "max",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: Some(
                            Bracketed {
                                open_bracket: VariantToken {
                                    variant: OpenBracket(
                                        "[",
                                    ),
                                    trivia: "\n             ",
                                },
                                body: Punctuated {
                                    list: [
                                        NoArgs(
                                            ExtendedAttributeNoArgs(
                                                Identifier(
                                                    "Clamp",
                                                ),
                                            ),
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_bracket: VariantToken {
                                    variant: CloseBracket(
                                        "]",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: Some(
                                                    VariantToken {
                                                        variant: Unsigned(
                                                            "unsigned",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "min",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ConstrainULongRange",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "ULongRange",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: Some(
                            Bracketed {
                                open_bracket: VariantToken {
                                    variant: OpenBracket(
                                        "[",
                                    ),
                                    trivia: "\n             ",
                                },
                                body: Punctuated {
                                    list: [
                                        NoArgs(
                                            ExtendedAttributeNoArgs(
                                                Identifier(
                                                    "Clamp",
                                                ),
                                            ),
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_bracket: VariantToken {
                                    variant: CloseBracket(
                                        "]",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: Some(
                                                    VariantToken {
                                                        variant: Unsigned(
                                                            "unsigned",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "exact",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: Some(
                            Bracketed {
                                open_bracket: VariantToken {
                                    variant: OpenBracket(
                                        "[",
                                    ),
                                    trivia: "\n             ",
                                },
                                body: Punctuated {
                                    list: [
                                        NoArgs(
                                            ExtendedAttributeNoArgs(
                                                Identifier(
                                                    "Clamp",
                                                ),
                                            ),
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_bracket: VariantToken {
                                    variant: CloseBracket(
                                        "]",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                        required: None,
                        type_: Single(
                            NonAny(
                                Integer(
                                    MayBeNull {
                                        type_: Long(
                                            LongType {
                                                unsigned: Some(
                                                    VariantToken {
                                                        variant: Unsigned(
                                                            "unsigned",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                long: VariantToken {
                                                    variant: Long(
                                                        "long",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "ideal",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ConstrainBooleanParameters",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "exact",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n             ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "ideal",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ConstrainDOMStringParameters",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Union(
                            MayBeNull {
                                type_: Parenthesized {
                                    open_paren: VariantToken {
                                        variant: OpenParen(
                                            "(",
                                        ),
                                        trivia: "\n             ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: DOMString(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: DOMString(
                                                                    "DOMString",
                                                                ),
                                                                trivia: "",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: Sequence(
                                                        MayBeNull {
                                                            type_: SequenceType {
                                                                sequence: VariantToken {
                                                                    variant: Sequence(
                                                                        "sequence",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                                generics: Generics {
                                                                    open_angle: VariantToken {
                                                                        variant: LessThan(
                                                                            "<",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    body: AttributedType {
                                                                        attributes: None,
                                                                        type_: Single(
                                                                            NonAny(
                                                                                DOMString(
                                                                                    MayBeNull {
                                                                                        type_: VariantToken {
                                                                                            variant: DOMString(
                                                                                                "DOMString",
                                                                                            ),
                                                                                            trivia: "",
                                                                                        },
                                                                                        q_mark: None,
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ),
                                                                    },
                                                                    close_angle: VariantToken {
                                                                        variant: GreaterThan(
                                                                            ">",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                },
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                                    },
                                    close_paren: VariantToken {
                                        variant: CloseParen(
                                            ")",
                                        ),
                                        trivia: "",
                                    },
                                },
                                q_mark: None,
                            },
                        ),
                        identifier: Identifier(
                            "exact",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Union(
                            MayBeNull {
                                type_: Parenthesized {
                                    open_paren: VariantToken {
                                        variant: OpenParen(
                                            "(",
                                        ),
                                        trivia: "\n             ",
                                    },
                                    body: Punctuated {
                                        list: [
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: DOMString(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: DOMString(
                                                                    "DOMString",
                                                                ),
                                                                trivia: "",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            Single(
                                                AttributedNonAnyType {
                                                    attributes: None,
                                                    type_: Sequence(
                                                        MayBeNull {
                                                            type_: SequenceType {
                                                                sequence: VariantToken {
                                                                    variant: Sequence(
                                                                        "sequence",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                                generics: Generics {
                                                                    open_angle: VariantToken {
                                                                        variant: LessThan(
                                                                            "<",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    body: AttributedType {
                                                                        attributes: None,
                                                                        type_: Single(
                                                                            NonAny(
                                                                                DOMString(
                                                                                    MayBeNull {
                                                                                        type_: VariantToken {
                                                                                            variant: DOMString(
                                                                                                "DOMString",
                                                                                            ),
                                                                                            trivia: "",
                                                                                        },
                                                                                        q_mark: None,
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ),
                                                                    },
                                                                    close_angle: VariantToken {
                                                                        variant: GreaterThan(
                                                                            ">",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                },
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                                    },
                                    close_paren: VariantToken {
                                        variant: CloseParen(
                                            ")",
                                        ),
                                        trivia: "",
                                    },
                                },
                                q_mark: None,
                            },
                        ),
                        identifier: Identifier(
                            "ideal",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: VariantToken {
                                variant: OpenParen(
                                    "(",
                                ),
                                trivia: "",
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: Some(
                                                Bracketed {
                                                    open_bracket: VariantToken {
                                                        variant: OpenBracket(
                                                            "[",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Punctuated {
                                                        list: [
                                                            NoArgs(
                                                                ExtendedAttributeNoArgs(
                                                                    Identifier(
                                                                        "Clamp",
                                                                    ),
                                                                ),
                                                            ),
                                                        ],
                                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                                    },
                                                    close_bracket: VariantToken {
                                                        variant: CloseBracket(
                                                            "]",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            ),
                                            type_: Integer(
                                                MayBeNull {
                                                    type_: Long(
                                                        LongType {
                                                            unsigned: Some(
                                                                VariantToken {
                                                                    variant: Unsigned(
                                                                        "unsigned",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                            ),
                                                            long: VariantToken {
                                                                variant: Long(
                                                                    "long",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        },
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ConstrainULongRange",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                            },
                            close_paren: VariantToken {
                                variant: CloseParen(
                                    ")",
                                ),
                                trivia: "",
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ConstrainULong",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: VariantToken {
                                variant: OpenParen(
                                    "(",
                                ),
                                trivia: "",
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: FloatingPoint(
                                                MayBeNull {
                                                    type_: Double(
                                                        DoubleType {
                                                            unrestricted: None,
                                                            double: VariantToken {
                                                                variant: Double(
                                                                    "double",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        },
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ConstrainDoubleRange",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                            },
                            close_paren: VariantToken {
                                variant: CloseParen(
                                    ")",
                                ),
                                trivia: "",
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ConstrainDouble",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: VariantToken {
                                variant: OpenParen(
                                    "(",
                                ),
                                trivia: "",
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Boolean(
                                                MayBeNull {
                                                    type_: VariantToken {
                                                        variant: Boolean(
                                                            "boolean",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ConstrainBooleanParameters",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                            },
                            close_paren: VariantToken {
                                variant: CloseParen(
                                    ")",
                                ),
                                trivia: "",
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ConstrainBoolean",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "\n\n",
            },
            type_: AttributedType {
                attributes: None,
                type_: Union(
                    MayBeNull {
                        type_: Parenthesized {
                            open_paren: VariantToken {
                                variant: OpenParen(
                                    "(",
                                ),
                                trivia: "",
                            },
                            body: Punctuated {
                                list: [
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: DOMString(
                                                MayBeNull {
                                                    type_: VariantToken {
                                                        variant: DOMString(
                                                            "DOMString",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Sequence(
                                                MayBeNull {
                                                    type_: SequenceType {
                                                        sequence: VariantToken {
                                                            variant: Sequence(
                                                                "sequence",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        generics: Generics {
                                                            open_angle: VariantToken {
                                                                variant: LessThan(
                                                                    "<",
                                                                ),
                                                                trivia: "",
                                                            },
                                                            body: AttributedType {
                                                                attributes: None,
                                                                type_: Single(
                                                                    NonAny(
                                                                        DOMString(
                                                                            MayBeNull {
                                                                                type_: VariantToken {
                                                                                    variant: DOMString(
                                                                                        "DOMString",
                                                                                    ),
                                                                                    trivia: "",
                                                                                },
                                                                                q_mark: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                ),
                                                            },
                                                            close_angle: VariantToken {
                                                                variant: GreaterThan(
                                                                    ">",
                                                                ),
                                                                trivia: "",
                                                            },
                                                        },
                                                    },
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                    Single(
                                        AttributedNonAnyType {
                                            attributes: None,
                                            type_: Identifier(
                                                MayBeNull {
                                                    type_: Identifier(
                                                        "ConstrainDOMStringParameters",
                                                    ),
                                                    q_mark: None,
                                                },
                                            ),
                                        },
                                    ),
                                ],
                                separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                            },
                            close_paren: VariantToken {
                                variant: CloseParen(
                                    ")",
                                ),
                                trivia: "",
                            },
                        },
                        q_mark: None,
                    },
                ),
            },
            identifier: Identifier(
                "ConstrainDOMString",
            ),
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "Capabilities",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "Settings",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "ConstraintSet",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "Constraints",
            ),
            inheritance: Some(
                Inheritance {
                    colon: VariantToken {
                        variant: Colon(
                            ":",
                        ),
                        trivia: "",
                    },
                    identifier: Identifier(
                        "ConstraintSet",
                    ),
                },
            ),
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Sequence(
                                    MayBeNull {
                                        type_: SequenceType {
                                            sequence: VariantToken {
                                                variant: Sequence(
                                                    "sequence",
                                                ),
                                                trivia: "\n             ",
                                            },
                                            generics: Generics {
                                                open_angle: VariantToken {
                                                    variant: LessThan(
                                                        "<",
                                                    ),
                                                    trivia: "",
                                                },
                                                body: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "ConstraintSet",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                close_angle: VariantToken {
                                                    variant: GreaterThan(
                                                        ">",
                                                    ),
                                                    trivia: "",
                                                },
                                            },
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "advanced",
                        ),
                        default: None,
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
