[
    Typedef(
        TypedefDefinition {
            attributes: None,
            typedef: VariantToken {
                variant: Typedef(
                    "typedef",
                ),
                trivia: "// Extracted from http://dev.w3.org/2006/webapi/WebIDL/ on 2011-05-06\n  // Typedef identifier: \"number\"\n  // Qualified name:    \"::framework::number\"\n  ",
            },
            type_: AttributedType {
                attributes: None,
                type_: Single(
                    NonAny(
                        FloatingPoint(
                            MayBeNull {
                                type_: Float(
                                    FloatType {
                                        unrestricted: None,
                                        float: VariantToken {
                                            variant: Float(
                                                "float",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                q_mark: None,
                            },
                        ),
                    ),
                ),
            },
            identifier: VariantToken {
                variant: Identifier(
                    "number",
                ),
                trivia: "",
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n  // Interface identifier: \"System\"\n  // Qualified name:       \"::framework::System\"\n  ",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "System",
                ),
                trivia: "",
            },
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Object(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Object(
                                                        "object",
                                                    ),
                                                    trivia: "\n\n    // Operation identifier:          \"createObject\"\n    // Operation argument identifier: \"interface\"\n    ",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    VariantToken {
                                        variant: Identifier(
                                            "createObject",
                                        ),
                                        trivia: "",
                                    },
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: DOMString(
                                                                            "DOMString",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    VariantToken {
                                                        variant: Identifier(
                                                            "_interface",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: Some(
                                Getter(
                                    VariantToken {
                                        variant: Getter(
                                            "getter",
                                        ),
                                        trivia: "\n\n    // Operation has no identifier; it declares a getter.\n    ",
                                    },
                                ),
                            ),
                            return_type: Type(
                                Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: None,
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            DOMString(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: DOMString(
                                                                            "DOMString",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    VariantToken {
                                                        variant: Identifier(
                                                            "keyName",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n  ",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n\n    // Interface identifier: \"TextField\"\n    // Qualified name:       \"::framework::gui::TextField\"\n    ",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "TextField",
                ),
                trivia: "",
            },
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n\n      // Attribute identifier: \"const\"\n      ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                VariantToken {
                                    variant: Identifier(
                                        "_const",
                                    ),
                                    trivia: "",
                                },
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n\n      // Attribute identifier: \"value\"\n      ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        DOMString(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: DOMString(
                                                        "DOMString",
                                                    ),
                                                    trivia: "",
                                                },
                                                q_mark: Some(
                                                    VariantToken {
                                                        variant: QuestionMark(
                                                            "?",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                VariantToken {
                                    variant: Identifier(
                                        "_value",
                                    ),
                                    trivia: " ",
                                },
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n    ",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "FooEventTarget",
                ),
                trivia: "",
            },
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Undefined(
                                VariantToken {
                                    variant: Undefined(
                                        "undefined",
                                    ),
                                    trivia: "\n  // Argument names allow some selected keywords\n  ",
                                },
                            ),
                            identifier: Some(
                                Identifier(
                                    VariantToken {
                                        variant: Identifier(
                                            "addEventListener",
                                        ),
                                        trivia: "",
                                    },
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: Identifier(
                                                                            "EventListener",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: Some(
                                                                        VariantToken {
                                                                            variant: QuestionMark(
                                                                                "?",
                                                                            ),
                                                                            trivia: "",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Callback(
                                                    VariantToken {
                                                        variant: Callback(
                                                            "callback",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
