[
    Dictionary(
        DictionaryDefinition {
            attributes: None,
            dictionary: VariantToken {
                variant: Dictionary(
                    "dictionary",
                ),
                trivia: "// Extracted from https://heycam.github.io/webidl/#idl-operations (Example 13)\n// on 2019-07-18\n\n",
            },
            identifier: Identifier(
                "LookupOptions",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    DictionaryMember {
                        attributes: None,
                        required: None,
                        type_: Single(
                            NonAny(
                                Boolean(
                                    MayBeNull {
                                        type_: VariantToken {
                                            variant: Boolean(
                                                "boolean",
                                            ),
                                            trivia: "\n  ",
                                        },
                                        q_mark: None,
                                    },
                                ),
                            ),
                        ),
                        identifier: Identifier(
                            "caseSensitive",
                        ),
                        default: Some(
                            Default {
                                assign: VariantToken {
                                    variant: Assign(
                                        "=",
                                    ),
                                    trivia: "",
                                },
                                value: Boolean(
                                    BooleanLit(
                                        false,
                                    ),
                                ),
                            },
                        ),
                        semi_colon: VariantToken {
                            variant: SemiColon(
                                ";",
                            ),
                            trivia: "",
                        },
                    },
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: Some(
                Bracketed {
                    open_bracket: VariantToken {
                        variant: OpenBracket(
                            "[",
                        ),
                        trivia: "\n\n",
                    },
                    body: Punctuated {
                        list: [
                            Ident(
                                ExtendedAttributeIdent {
                                    lhs_identifier: Identifier(
                                        "Exposed",
                                    ),
                                    assign: VariantToken {
                                        variant: Assign(
                                            "=",
                                        ),
                                        trivia: "",
                                    },
                                    rhs: Identifier(
                                        "Window",
                                    ),
                                },
                            ),
                        ],
                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                    },
                    close_bracket: VariantToken {
                        variant: CloseBracket(
                            "]",
                        ),
                        trivia: "",
                    },
                },
            ),
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n",
            },
            identifier: Identifier(
                "AddressBook",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Operation(
                        OperationInterfaceMember {
                            attributes: None,
                            modifier: None,
                            special: None,
                            return_type: Type(
                                Single(
                                    NonAny(
                                        Boolean(
                                            MayBeNull {
                                                type_: VariantToken {
                                                    variant: Boolean(
                                                        "boolean",
                                                    ),
                                                    trivia: "\n  ",
                                                },
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            ),
                            identifier: Some(
                                Identifier(
                                    "hasAddressForName",
                                ),
                            ),
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            USVString(
                                                                MayBeNull {
                                                                    type_: VariantToken {
                                                                        variant: USVString(
                                                                            "USVString",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "name",
                                                ),
                                                default: None,
                                            },
                                        ),
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "LookupOptions",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "options",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: EmptyDictionary(
                                                            EmptyDictionaryLit {
                                                                open_brace: VariantToken {
                                                                    variant: OpenBrace(
                                                                        "{",
                                                                    ),
                                                                    trivia: " ",
                                                                },
                                                                close_brace: VariantToken {
                                                                    variant: CloseBrace(
                                                                        "}",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
