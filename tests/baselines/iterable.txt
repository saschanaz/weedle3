[
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface,
                trivia: "",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "IterableOne",
                ),
                trivia: " ",
            },
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace,
                    trivia: " ",
                },
                body: [
                    Iterable(
                        Single(
                            SingleTypedIterable {
                                attributes: None,
                                iterable: VariantToken {
                                    variant: Iterable,
                                    trivia: "\n  ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan,
                                        trivia: "",
                                    },
                                    body: AttributedType {
                                        attributes: None,
                                        type_: Single(
                                            Distinguishable(
                                                Integer(
                                                    MayBeNull {
                                                        type_: Long(
                                                            LongType {
                                                                unsigned: None,
                                                                long: VariantToken {
                                                                    variant: Long,
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                        q_mark: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    close_angle: VariantToken {
                                        variant: GreaterThan,
                                        trivia: "",
                                    },
                                },
                                semi_colon: VariantToken {
                                    variant: SemiColon,
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace,
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon,
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface,
                trivia: "\n\n",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "IterableTwo",
                ),
                trivia: " ",
            },
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace,
                    trivia: " ",
                },
                body: [
                    Iterable(
                        Double(
                            DoubleTypedIterable {
                                attributes: None,
                                iterable: VariantToken {
                                    variant: Iterable,
                                    trivia: "\n  ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan,
                                        trivia: "",
                                    },
                                    body: (
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                Distinguishable(
                                                    Integer(
                                                        MayBeNull {
                                                            type_: Short(
                                                                ShortType {
                                                                    unsigned: None,
                                                                    short: VariantToken {
                                                                        variant: Short,
                                                                        trivia: "",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                        VariantToken {
                                            variant: Comma,
                                            trivia: "",
                                        },
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                Distinguishable(
                                                    FloatingPoint(
                                                        MayBeNull {
                                                            type_: Double(
                                                                DoubleType {
                                                                    unrestricted: None,
                                                                    double: VariantToken {
                                                                        variant: Double,
                                                                        trivia: " ",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: Some(
                                                                VariantToken {
                                                                    variant: QMark,
                                                                    trivia: "",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan,
                                        trivia: "",
                                    },
                                },
                                semi_colon: VariantToken {
                                    variant: SemiColon,
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace,
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon,
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface,
                trivia: "\n\n",
            },
            identifier: VariantToken {
                variant: Identifier(
                    "IterableThree",
                ),
                trivia: " ",
            },
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace,
                    trivia: " ",
                },
                body: [
                    Iterable(
                        Single(
                            SingleTypedIterable {
                                attributes: None,
                                iterable: VariantToken {
                                    variant: Iterable,
                                    trivia: "\n  ",
                                },
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan,
                                        trivia: "",
                                    },
                                    body: AttributedType {
                                        attributes: Some(
                                            Bracketed {
                                                open_bracket: VariantToken {
                                                    variant: OpenBracket,
                                                    trivia: "",
                                                },
                                                body: Punctuated {
                                                    list: [
                                                        NoArgs(
                                                            ExtendedAttributeNoArgs(
                                                                VariantToken {
                                                                    variant: Identifier(
                                                                        "XAttr",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::term::Comma>>,
                                                },
                                                close_bracket: VariantToken {
                                                    variant: CloseBracket,
                                                    trivia: "",
                                                },
                                            },
                                        ),
                                        type_: Single(
                                            Distinguishable(
                                                Integer(
                                                    MayBeNull {
                                                        type_: Long(
                                                            LongType {
                                                                unsigned: None,
                                                                long: VariantToken {
                                                                    variant: Long,
                                                                    trivia: " ",
                                                                },
                                                            },
                                                        ),
                                                        q_mark: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    close_angle: VariantToken {
                                        variant: GreaterThan,
                                        trivia: "",
                                    },
                                },
                                semi_colon: VariantToken {
                                    variant: SemiColon,
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace,
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon,
                trivia: "",
            },
        },
    ),
]
