[
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "// Extracted from http://dev.w3.org/2006/webapi/WebIDL/ on 2011-05-06\n",
            },
            identifier: Identifier(
                "Circle",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            FloatingPoint(
                                                                MayBeNull {
                                                                    type_: Float(
                                                                        FloatType {
                                                                            unrestricted: None,
                                                                            float: VariantToken {
                                                                                variant: Float(
                                                                                    "float",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                        },
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "radius",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: Some(
                                                    VariantToken {
                                                        variant: Optional(
                                                            "optional",
                                                        ),
                                                        trivia: "",
                                                    },
                                                ),
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Identifier(
                                                                MayBeNull {
                                                                    type_: Identifier(
                                                                        "string",
                                                                    ),
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "str",
                                                ),
                                                default: Some(
                                                    Default {
                                                        assign: VariantToken {
                                                            variant: Assign(
                                                                "=",
                                                            ),
                                                            trivia: "",
                                                        },
                                                        value: String(
                                                            StringLit(
                                                                "",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Single(
                                                        NonAny(
                                                            Sequence(
                                                                MayBeNull {
                                                                    type_: SequenceType {
                                                                        sequence: VariantToken {
                                                                            variant: Sequence(
                                                                                "sequence",
                                                                            ),
                                                                            trivia: "",
                                                                        },
                                                                        generics: Generics {
                                                                            open_angle: VariantToken {
                                                                                variant: LessThan(
                                                                                    "<",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                            body: AttributedType {
                                                                                attributes: None,
                                                                                type_: Single(
                                                                                    NonAny(
                                                                                        Identifier(
                                                                                            MayBeNull {
                                                                                                type_: Identifier(
                                                                                                    "string",
                                                                                                ),
                                                                                                q_mark: None,
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                ),
                                                                            },
                                                                            close_angle: VariantToken {
                                                                                variant: GreaterThan(
                                                                                    ">",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                        },
                                                                    },
                                                                    q_mark: None,
                                                                },
                                                            ),
                                                        ),
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "seq",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Constructor(
                        ConstructorInterfaceMember {
                            attributes: None,
                            constructor: VariantToken {
                                variant: Constructor(
                                    "constructor",
                                ),
                                trivia: "\n  ",
                            },
                            args: Parenthesized {
                                open_paren: VariantToken {
                                    variant: OpenParen(
                                        "(",
                                    ),
                                    trivia: "",
                                },
                                body: Punctuated {
                                    list: [
                                        Single(
                                            SingleArgument {
                                                attributes: None,
                                                optional: None,
                                                type_: AttributedType {
                                                    attributes: None,
                                                    type_: Union(
                                                        MayBeNull {
                                                            type_: Parenthesized {
                                                                open_paren: VariantToken {
                                                                    variant: OpenParen(
                                                                        "(",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                                body: Punctuated {
                                                                    list: [
                                                                        Single(
                                                                            AttributedNonAnyType {
                                                                                attributes: None,
                                                                                type_: Identifier(
                                                                                    MayBeNull {
                                                                                        type_: Identifier(
                                                                                            "Type1",
                                                                                        ),
                                                                                        q_mark: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        Single(
                                                                            AttributedNonAnyType {
                                                                                attributes: None,
                                                                                type_: Identifier(
                                                                                    MayBeNull {
                                                                                        type_: Identifier(
                                                                                            "Type2",
                                                                                        ),
                                                                                        q_mark: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Or>>,
                                                                },
                                                                close_paren: VariantToken {
                                                                    variant: CloseParen(
                                                                        ")",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                },
                                                identifier: Identifier(
                                                    "union",
                                                ),
                                                default: None,
                                            },
                                        ),
                                    ],
                                    separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                },
                                close_paren: VariantToken {
                                    variant: CloseParen(
                                        ")",
                                    ),
                                    trivia: "",
                                },
                            },
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n  ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Float(
                                                    FloatType {
                                                        unrestricted: None,
                                                        float: VariantToken {
                                                            variant: Float(
                                                                "float",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "r",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n  ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Float(
                                                    FloatType {
                                                        unrestricted: None,
                                                        float: VariantToken {
                                                            variant: Float(
                                                                "float",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "cx",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: None,
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "\n  ",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Float(
                                                    FloatType {
                                                        unrestricted: None,
                                                        float: VariantToken {
                                                            variant: Float(
                                                                "float",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "cy",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                    Attribute(
                        AttributeInterfaceMember {
                            attributes: None,
                            modifier: None,
                            readonly: Some(
                                VariantToken {
                                    variant: ReadOnly(
                                        "readonly",
                                    ),
                                    trivia: "\n  ",
                                },
                            ),
                            attribute: VariantToken {
                                variant: Attribute(
                                    "attribute",
                                ),
                                trivia: "",
                            },
                            type_: AttributedType {
                                attributes: None,
                                type_: Single(
                                    NonAny(
                                        FloatingPoint(
                                            MayBeNull {
                                                type_: Float(
                                                    FloatType {
                                                        unrestricted: None,
                                                        float: VariantToken {
                                                            variant: Float(
                                                                "float",
                                                            ),
                                                            trivia: "",
                                                        },
                                                    },
                                                ),
                                                q_mark: None,
                                            },
                                        ),
                                    ),
                                ),
                            },
                            identifier: Identifier(
                                "circumference",
                            ),
                            semi_colon: VariantToken {
                                variant: SemiColon(
                                    ";",
                                ),
                                trivia: "",
                            },
                        },
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
