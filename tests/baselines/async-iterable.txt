[
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "",
            },
            identifier: Identifier(
                "AsyncIterable",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Double(
                            DoubleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: (
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                NonAny(
                                                    Integer(
                                                        MayBeNull {
                                                            type_: Long(
                                                                LongType {
                                                                    unsigned: None,
                                                                    long: VariantToken {
                                                                        variant: Long(
                                                                            "long",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                        VariantToken {
                                            variant: Comma(
                                                ",",
                                            ),
                                            trivia: "",
                                        },
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                NonAny(
                                                    FloatingPoint(
                                                        MayBeNull {
                                                            type_: Float(
                                                                FloatType {
                                                                    unrestricted: None,
                                                                    float: VariantToken {
                                                                        variant: Float(
                                                                            "float",
                                                                        ),
                                                                        trivia: " ",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: None,
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "AsyncIterableWithExtAttr",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Double(
                            DoubleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: (
                                        AttributedType {
                                            attributes: Some(
                                                Bracketed {
                                                    open_bracket: VariantToken {
                                                        variant: OpenBracket(
                                                            "[",
                                                        ),
                                                        trivia: "",
                                                    },
                                                    body: Punctuated {
                                                        list: [
                                                            NoArgs(
                                                                ExtendedAttributeNoArgs(
                                                                    Identifier(
                                                                        "XAttr2",
                                                                    ),
                                                                ),
                                                            ),
                                                        ],
                                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                                    },
                                                    close_bracket: VariantToken {
                                                        variant: CloseBracket(
                                                            "]",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            ),
                                            type_: Single(
                                                NonAny(
                                                    DOMString(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: DOMString(
                                                                    "DOMString",
                                                                ),
                                                                trivia: " ",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                        VariantToken {
                                            variant: Comma(
                                                ",",
                                            ),
                                            trivia: "",
                                        },
                                        AttributedType {
                                            attributes: Some(
                                                Bracketed {
                                                    open_bracket: VariantToken {
                                                        variant: OpenBracket(
                                                            "[",
                                                        ),
                                                        trivia: " ",
                                                    },
                                                    body: Punctuated {
                                                        list: [
                                                            NoArgs(
                                                                ExtendedAttributeNoArgs(
                                                                    Identifier(
                                                                        "XAttr3",
                                                                    ),
                                                                ),
                                                            ),
                                                        ],
                                                        separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                                    },
                                                    close_bracket: VariantToken {
                                                        variant: CloseBracket(
                                                            "]",
                                                        ),
                                                        trivia: "",
                                                    },
                                                },
                                            ),
                                            type_: Single(
                                                NonAny(
                                                    Integer(
                                                        MayBeNull {
                                                            type_: Long(
                                                                LongType {
                                                                    unsigned: None,
                                                                    long: VariantToken {
                                                                        variant: Long(
                                                                            "long",
                                                                        ),
                                                                        trivia: " ",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: None,
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "AsyncIterableWithNoParam",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Double(
                            DoubleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: (
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                NonAny(
                                                    FloatingPoint(
                                                        MayBeNull {
                                                            type_: Float(
                                                                FloatType {
                                                                    unrestricted: None,
                                                                    float: VariantToken {
                                                                        variant: Float(
                                                                            "float",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                        VariantToken {
                                            variant: Comma(
                                                ",",
                                            ),
                                            trivia: "",
                                        },
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                NonAny(
                                                    ByteString(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: ByteString(
                                                                    "ByteString",
                                                                ),
                                                                trivia: " ",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: Some(
                                    Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "AsyncIterableWithParam",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Double(
                            DoubleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: (
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                NonAny(
                                                    FloatingPoint(
                                                        MayBeNull {
                                                            type_: Float(
                                                                FloatType {
                                                                    unrestricted: None,
                                                                    float: VariantToken {
                                                                        variant: Float(
                                                                            "float",
                                                                        ),
                                                                        trivia: "",
                                                                    },
                                                                },
                                                            ),
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                        VariantToken {
                                            variant: Comma(
                                                ",",
                                            ),
                                            trivia: "",
                                        },
                                        AttributedType {
                                            attributes: None,
                                            type_: Single(
                                                NonAny(
                                                    ByteString(
                                                        MayBeNull {
                                                            type_: VariantToken {
                                                                variant: ByteString(
                                                                    "ByteString",
                                                                ),
                                                                trivia: " ",
                                                            },
                                                            q_mark: None,
                                                        },
                                                    ),
                                                ),
                                            ),
                                        },
                                    ),
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: Some(
                                    Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    USVString(
                                                                        MayBeNull {
                                                                            type_: VariantToken {
                                                                                variant: USVString(
                                                                                    "USVString",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "str",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "AsyncValueIterable",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Single(
                            SingleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: AttributedType {
                                        attributes: None,
                                        type_: Single(
                                            NonAny(
                                                FloatingPoint(
                                                    MayBeNull {
                                                        type_: Float(
                                                            FloatType {
                                                                unrestricted: None,
                                                                float: VariantToken {
                                                                    variant: Float(
                                                                        "float",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                        q_mark: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: None,
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "AsyncValueIterableWithNoParam",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Single(
                            SingleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: AttributedType {
                                        attributes: None,
                                        type_: Single(
                                            NonAny(
                                                FloatingPoint(
                                                    MayBeNull {
                                                        type_: Float(
                                                            FloatType {
                                                                unrestricted: None,
                                                                float: VariantToken {
                                                                    variant: Float(
                                                                        "float",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                        q_mark: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: Some(
                                    Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
    Interface(
        InterfaceDefinition {
            attributes: None,
            interface: VariantToken {
                variant: Interface(
                    "interface",
                ),
                trivia: "\n\n",
            },
            identifier: Identifier(
                "AsyncValueIterableWithParams",
            ),
            inheritance: None,
            members: Braced {
                open_brace: VariantToken {
                    variant: OpenBrace(
                        "{",
                    ),
                    trivia: "",
                },
                body: [
                    AsyncIterable(
                        Single(
                            SingleTypedAsyncIterable {
                                attributes: None,
                                async_iterable: (
                                    VariantToken {
                                        variant: Async(
                                            "async",
                                        ),
                                        trivia: "\n  ",
                                    },
                                    VariantToken {
                                        variant: Iterable(
                                            "iterable",
                                        ),
                                        trivia: "",
                                    },
                                ),
                                generics: Generics {
                                    open_angle: VariantToken {
                                        variant: LessThan(
                                            "<",
                                        ),
                                        trivia: "",
                                    },
                                    body: AttributedType {
                                        attributes: None,
                                        type_: Single(
                                            NonAny(
                                                FloatingPoint(
                                                    MayBeNull {
                                                        type_: Float(
                                                            FloatType {
                                                                unrestricted: None,
                                                                float: VariantToken {
                                                                    variant: Float(
                                                                        "float",
                                                                    ),
                                                                    trivia: "",
                                                                },
                                                            },
                                                        ),
                                                        q_mark: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    close_angle: VariantToken {
                                        variant: GreaterThan(
                                            ">",
                                        ),
                                        trivia: "",
                                    },
                                },
                                args: Some(
                                    Parenthesized {
                                        open_paren: VariantToken {
                                            variant: OpenParen(
                                                "(",
                                            ),
                                            trivia: "",
                                        },
                                        body: Punctuated {
                                            list: [
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    DOMString(
                                                                        MayBeNull {
                                                                            type_: VariantToken {
                                                                                variant: DOMString(
                                                                                    "DOMString",
                                                                                ),
                                                                                trivia: "",
                                                                            },
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "str",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                                Single(
                                                    SingleArgument {
                                                        attributes: None,
                                                        optional: None,
                                                        type_: AttributedType {
                                                            attributes: None,
                                                            type_: Single(
                                                                NonAny(
                                                                    Integer(
                                                                        MayBeNull {
                                                                            type_: Short(
                                                                                ShortType {
                                                                                    unsigned: None,
                                                                                    short: VariantToken {
                                                                                        variant: Short(
                                                                                            "short",
                                                                                        ),
                                                                                        trivia: " ",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            q_mark: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                        identifier: Identifier(
                                                            "s",
                                                        ),
                                                        default: None,
                                                    },
                                                ),
                                            ],
                                            separator: PhantomData<weedle::parser::eat::VariantToken<weedle::lexer::keywords::Comma>>,
                                        },
                                        close_paren: VariantToken {
                                            variant: CloseParen(
                                                ")",
                                            ),
                                            trivia: "",
                                        },
                                    },
                                ),
                                semi_colon: VariantToken {
                                    variant: SemiColon(
                                        ";",
                                    ),
                                    trivia: "",
                                },
                            },
                        ),
                    ),
                ],
                close_brace: VariantToken {
                    variant: CloseBrace(
                        "}",
                    ),
                    trivia: "\n",
                },
            },
            semi_colon: VariantToken {
                variant: SemiColon(
                    ";",
                ),
                trivia: "",
            },
        },
    ),
]
